<nav class="toc" id="toc" data-toc-selector="{{ include.selector | default: '.post-content' }}"
  data-toc-max-level="{{ include.max_level | default: 3 }}"
  data-toc-scroll-offset="{{ include.scroll_offset | default: 20 }}">
  <div class="toc-head">
    <h2>{{ include.title | default: "TOC" }}</h2>
    <button class="toc-toggle" aria-expanded="true" type="button">{{ include.btn_hidden }}</button>
  </div>
  <div class="toc-list-wrapper">
    <ul class="toc-list" role="list"></ul>
    <p class="toc-empty" style="display:none">No titles found. Remove TOC!</p>
  </div>
</nav>

<script>
(function () {
  const minLayoutWidth = 1830;

  const toc = document.getElementById('toc');
  if (toc) {
    const sentinel = document.createElement('div');
    toc.parentNode.insertBefore(sentinel, toc);

    function shouldApplyFixed() {
      return window.innerWidth > minLayoutWidth;
    }

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (shouldApplyFixed()) {
          if (!entry.isIntersecting) {
            toc.classList.add('toc-fixed');
          } else {
            toc.classList.remove('toc-fixed');
          }
        } else {
          toc.classList.remove('toc-fixed');
        }
      },
      { threshold: 0 }
    );
    observer.observe(sentinel);

    window.addEventListener('resize', () => {
        if (!shouldApplyFixed()) {
            toc.classList.remove('toc-fixed');
        }
    });
  }

  function slugify(text) {
    if (!text) return '';
    return text.toString().toLowerCase().trim()
      .normalize('NFKD').replace(/[\u0300-\u036f]/g, '')
      .replace(/[^\w\s-]/g, '').replace(/\s+/g, '-').replace(/--+/g, '-');
  }

  function buildTOC(tocEl) {
    const selector = tocEl.dataset.tocSelector || '.post-content' || '.page-content';
    const maxLevel = parseInt(tocEl.dataset.tocMaxLevel || '3', 10);
    const offset = parseInt(tocEl.dataset.tocScrollOffset || '20', 10);
    const root = document.querySelector(selector);

    if (!root) {
      tocEl.querySelector('.toc-empty').textContent = `Content not found (${selector})`;
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const headings = Array.from(root.querySelectorAll(Array(maxLevel).fill(0).map((_, i) => `h${i + 1}`).join(',')))
      .filter(h => !tocEl.contains(h))
      .filter(h => parseInt(h.tagName.substring(1)) <= maxLevel);

    if (headings.length === 0) {
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const tocRoot = tocEl.querySelector('.toc-list');
    tocRoot.innerHTML = '';

    const idCounts = {};
    headings.forEach(h => {
      if (!h.id) {
        let id = slugify(h.textContent);
        if (!id) id = 'section';
        if (idCounts[id]) { idCounts[id] += 1; id = id + '-' + idCounts[id]; }
        else idCounts[id] = 1;
        h.id = id;
      }
    });

    // Build hierarchical tree
    const stack = [{ level: 0, ul: tocRoot }];
    headings.forEach((h, i) => {
      const level = parseInt(h.tagName.substring(1));
      const li = document.createElement('li');
      const a = document.createElement('a');
      a.href = '#' + h.id;
      a.textContent = h.textContent.trim();
      a.addEventListener('click', e => {
        e.preventDefault();
        window.scrollTo({ top: h.getBoundingClientRect().top + window.scrollY - offset, behavior: 'smooth' });
        history.replaceState(null, '', '#' + h.id);

        // // Clicking on the TOC menu closes the TOC
        // const wrapper = tocEl.querySelector('.toc-list-wrapper');
        // const toggle = tocEl.querySelector('.toc-toggle');
        // wrapper.style.display = 'none';
        // toggle.setAttribute('aria-expanded', 'false');
        // toggle.textContent = '{ { include.btn_show } }';
      });
      li.appendChild(a);

      while (stack.length > 1 && level <= stack[stack.length - 1].level) stack.pop();
      const parent = stack[stack.length - 1].ul;
      parent.appendChild(li);

      const next = headings[i + 1];
      if (next) {
        const nextLevel = parseInt(next.tagName.substring(1));
        if (nextLevel > level) {
          const newUl = document.createElement('ul');
          li.appendChild(newUl);
          stack.push({ level, ul: newUl });
        }
      }
    });

    // Active Highlight
    const links = tocRoot.querySelectorAll('a');
    function onScroll() {
      const fromTop = window.scrollY + offset + 1;
      let current = headings[0];
      for (let i = 0; i < headings.length; i++) {
        if (headings[i].offsetTop <= fromTop) current = headings[i];
      }
      links.forEach(l => l.classList.toggle('active', l.getAttribute('href') === '#' + current.id));
    }
    window.addEventListener('scroll', onScroll, { passive: true });
    onScroll();
  }

  document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.toc').forEach(toc => {
      buildTOC(toc);
      const toggle = toc.querySelector('.toc-toggle');
      const wrapper = toc.querySelector('.toc-list-wrapper');

      wrapper.style.display = 'none';
      toggle.setAttribute('aria-expanded', 'false');
      toggle.textContent = '{{ include.btn_show }}';

      toggle.addEventListener('click', () => {
        const expanded = toggle.getAttribute('aria-expanded') === 'true';
        wrapper.style.display = expanded ? 'none' : 'block';
        toggle.setAttribute('aria-expanded', (!expanded).toString());
        toggle.textContent = expanded ? '{{ include.btn_show }}' : '{{ include.btn_hidden }}';
      });

      const tocTop = toc.offsetTop;

      function handleScrollFix() {
        if (window.innerWidth <= minLayoutWidth) {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.zIndex = '';
          toc.style.width = '';
          return;
        }

        const scrollTop = window.scrollY || document.documentElement.scrollTop;

        // Fixes pinning behavior in Chrome
        if (scrollTop >= tocTop) {
          toc.classList.add('fixed');
          toc.style.position = 'fixed';
          toc.style.top = '0';
          toc.style.zIndex = '9999';
          // toc.style.width = toc.offsetWidth + 'px';
        } else {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.width = '';
        }

        // // Automatically closes the TOC if it is open and scrolled to it.
        // const rect = toc.getBoundingClientRect();
        // if (rect.top <= 0 && toggle.getAttribute('aria-expanded') === 'true') {
        //   wrapper.style.display = 'none';
        //   toggle.setAttribute('aria-expanded', 'false');
        //   toggle.textContent = '{ { include.btn_show } }';
        // }
      }

      window.addEventListener('scroll', handleScrollFix, { passive: true });
      window.addEventListener('resize', handleScrollFix);
      handleScrollFix();
    });
  });
})();
</script>
