#!/bin/bash


# source ~/.bashrc


prompt1="Enter your option: "

# Function check if an element exist in a string
function _contains_element() {
    for e in "${@:2}"; do [[ $e == $1 ]] && break; done;
}

# Function to capture Jekyll's build folder.
function _get_destination(){
  if [[ -f "$1" ]]; then
   destination_build="$(cat "$1" | grep destination | cut -d':' -f2 | cut -d' ' -f2)"
  fi
}

# Enter a specific folder
function _enter_foloder(){
  if [[ -d "$1" ]]; then
    cd $1
  fi
}

# Enter a specific branch
function _enter_branch(){
  git checkout $1
}

function _verify_remote(){
  get_remote=$(git remote -v)
  if [[ -z $get_remote ]]; then
    printf "[Error] Remote address not add. Set it!\n"
    exit 1
  fi
}

function _get_origin_name(){
  origin_name=$(git remote -v | awk '{ print $1 }' | sed '2d')
}

function _verify_bundle_and_jekyll(){
  if [[ ! -f $(echo "$GEM_BIN/bundle") ]] || [[ ! -f $(echo "$BUNDLE_BIN/jekyll") ]]; then
    echo \$BUNDLE_BIN
   printf "[Error] To perform the deploy of the compiled project. You need to have the Bundler installed and Jekyll installed through the Bundler. \n\n"
   exit 1
  fi
   bundle exec jekyll b
}

function _select_type_deploy(){
  printf "Select the type for deploy. \n\n"
  type_branch_list=( "Source" "Compiled" )

  PS3="$prompt1"
  printf "Options:\n\n"
  select list in "${type_branch_list[@]}"; do
    if _contains_element "${list}" "${type_branch_list[@]}"; then
      break
    else
      printf "Invalid option\n"
    fi
  done
  type_branch="$list"

  if [[ "$type_branch" == "Compiled" ]]; then
    _verify_bundle_and_jekyll
    _get_destination "_config.yml"
    printf "\nYou are inside the folder: ${destination_build} \n"
    printf "This folder is the compiled project folder.\n"
    _enter_foloder $destination_build
  else
    printf "\n[Ok! You have chosen to deploy your source code.] \n\n"
  fi
}

function _start_commit(){
  git add .
  git commit -m "Update - $(date)"
}

function _start_push(){
   git push $1 $2
}

# Function select branch deploy
function _select_branch(){

  branch_current="$(git branch | grep \* | cut -d'*' -f2)"

  printf "Branch current this directory: ${branch_current} \n\n"
  printf "Select the branch for deploy. \n\n"
  branch_list=( $(git branch --list | cut -d'*' -f2) )
# branch_list=( $(git branch --list | sed 's/ /-/g') )
# branch_list=( $(git branch --list | sed 's/*/[default]/g' | sed 's/ /-/g') )

  if [[ -z $branch_list ]]; then
    _start_commit
  fi

  PS3="$prompt1"
  printf "Options:\n\n"
  select list in "${branch_list[@]}"; do
    if _contains_element "${list}" "${branch_list[@]}"; then
      break
    else
      printf "Invalid option\n"
    fi
  done
  branch_deploy="$list"
  _enter_branch "$branch_deploy"
}

function _start_deploy(){
  _verify_remote
  _select_type_deploy
  _select_branch
  _get_origin_name

  _start_commit
  _start_push "$origin_name" "$branch_deploy"
}

_start_deploy



