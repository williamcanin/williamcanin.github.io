#!/bin/bash
# Type: Shell Script
# Description: Simple script to push (deploy) a Jekyll project.
#              Its function is to facilitate the deploy of Jekyll projects,
#              with source code and the compiled project.
# Release Status: 0.0.1

# Author: William C. Canin
#   E-Mail: william.costa.canin@gmail.com
#   WebSite: http://williamcanin.github.io
#   GitHub: https://github.com/williamcanin

# Copyright Â© 2017 William C. Canin

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Required:

# In the '_config.yml' file, it should contain:
# destination: <folder_build>

# Usage:

# 1) Start git in the project directory. Example:
#   git init
# 2) Add the remote address to it. Example:
#   git remote add origin "git@github.com:you_user/myproject.git"
# 3) Make the first commit. Example:
#   git commit -m "First commit"
# 4) Repeat these three steps for the compiled project folder. Assigned in the variable "destination" of the file '_config.yml'.


# Variables global
prompt1="Enter your option: "


# Function check if an element exist in a string
function _contains_element() {
    for e in "${@:2}"; do [[ $e == $1 ]] && break; done;
}

# Function to capture Jekyll's build folder.
function _get_destination(){
  if [[ -f "$1" ]]; then
   destination_build="$(cat "$1" | grep destination | cut -d':' -f2 | cut -d' ' -f2)"
  fi
}

# Enter a specific folder
function _enter_folder(){
  if [[ -d "$1" ]]; then
    cd $1
  fi
}

# Enter a specific branch
function _enter_branch(){
  git checkout $1
}

# Function that checks whether the remote address exists.
function _verify_remote(){
  get_remote=$(git remote -v)
  if [[ -z $get_remote ]]; then
    printf "[Error] Remote address not add. Set it!\n"
    exit 1
  fi
}

# Function that captures the origin of the remote.
function _get_origin_name(){
  origin_name=$(git remote -v | awk '{ print $1 }' | sed '2d')
}

# Function to compile the project.
function _build_project(){
  printf "Compiling the project ...\n"
  bundle exec jekyll b
  printf "Done\n"
}

# Function to select the type of deploy. Whether to deploy only the source code or the compiled project.
function _select_type_deploy(){
  printf "Select the type for deploy. \n\n"
  type_branch_list=( "Source" "Compiled" )

  PS3="$prompt1"
  printf "Options:\n\n"
  select list in "${type_branch_list[@]}"; do
    if _contains_element "${list}" "${type_branch_list[@]}"; then
      break
    else
      printf "Invalid option\n"
    fi
  done
  type_branch="$list"

  if [[ "$type_branch" == "Compiled" ]]; then
    _build_project
    _get_destination "_config.yml"
    printf "\nYou are inside the folder: ${destination_build} \n"
    printf "This folder is the compiled project folder.\n"
    _enter_folder $destination_build
  else
    printf "\n[Ok! You have chosen to deploy your source code.] \n\n"
  fi
}

# Function to start a commit.
function _start_commit(){
  git add .
  git commit -m "Update - $(date)"
  start_commit_status="$1"
}

# Function to perform the now push with the captured source and the selected branch.
function _start_push(){
   git push $1 $2
   printf "Done! Deploy completed.\n"
}

# Function select branch deploy
function _select_branch(){

  branch_current="$(git branch | grep \* | cut -d'*' -f2)"

  printf "Branch current this directory: ${branch_current} \n\n"
  printf "Select the branch for deploy. \n\n"
  branch_list=( $(git branch --list | cut -d'*' -f2) )

  if [[ -z $branch_list ]]; then
    _start_commit "true"
  fi

  PS3="$prompt1"
  printf "Options:\n\n"
  select list in "${branch_list[@]}"; do
    if _contains_element "${list}" "${branch_list[@]}"; then
      break
    else
      printf "Invalid option\n"
    fi
  done
  branch_deploy="$list"
  _enter_branch "$branch_deploy"
}

# Function where everything starts.
function _start_deploy(){
  _verify_remote
  _select_type_deploy
  _select_branch
  _get_origin_name
  if [[ start_commit_status != "true" ]]; then
     _start_commit "true"
  fi
  _start_push "$origin_name" "$branch_deploy"
}

# Go!
_start_deploy
