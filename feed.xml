<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="pt"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://williamcanin.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://williamcanin.github.io/" rel="alternate" type="text/html" hreflang="pt" /><updated>2025-10-22T21:38:52+00:00</updated><id>https://williamcanin.github.io/feed.xml</id><title type="html">Hey, I’m William Canin</title><subtitle>thoughts on programming, digital wellbeing, linux</subtitle><entry><title type="html">Content styles and Codeblocks - Demonstration in the post</title><link href="https://williamcanin.github.io/blog/content-styles-and-codeblocks/" rel="alternate" type="text/html" title="Content styles and Codeblocks - Demonstration in the post" /><published>2025-10-04T20:09:18+00:00</published><updated>2025-10-04T20:09:18+00:00</updated><id>https://williamcanin.github.io/blog/content-styles-and-codeblocks</id><content type="html" xml:base="https://williamcanin.github.io/blog/content-styles-and-codeblocks/"><![CDATA[<nav class="toc" id="toc" data-toc-selector=".post-content" data-toc-max-level="3" data-toc-scroll-offset="20">
  <div class="toc-head">
    <h2>TOC</h2>
    <button class="toc-toggle" aria-expanded="true" type="button">Hidden</button>
  </div>
  <div class="toc-list-wrapper">
    <ul class="toc-list" role="list"></ul>
    <p class="toc-empty" style="display:none">No titles found. Remove TOC!</p>
  </div>
</nav>

<script>
(function () {
  const minLayoutWidth = 1830;

  const toc = document.getElementById('toc');
  if (toc) {
    const sentinel = document.createElement('div');
    toc.parentNode.insertBefore(sentinel, toc);

    function shouldApplyFixed() {
      return window.innerWidth > minLayoutWidth;
    }

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (shouldApplyFixed()) {
          if (!entry.isIntersecting) {
            toc.classList.add('toc-fixed');
          } else {
            toc.classList.remove('toc-fixed');
          }
        } else {
          toc.classList.remove('toc-fixed');
        }
      },
      { threshold: 0 }
    );
    observer.observe(sentinel);

    window.addEventListener('resize', () => {
        if (!shouldApplyFixed()) {
            toc.classList.remove('toc-fixed');
        }
    });
  }

  function slugify(text) {
    if (!text) return '';
    return text.toString().toLowerCase().trim()
      .normalize('NFKD').replace(/[\u0300-\u036f]/g, '')
      .replace(/[^\w\s-]/g, '').replace(/\s+/g, '-').replace(/--+/g, '-');
  }

  function buildTOC(tocEl) {
    const selector = tocEl.dataset.tocSelector || '.post-content' || '.page-content';
    const maxLevel = parseInt(tocEl.dataset.tocMaxLevel || '3', 10);
    const offset = parseInt(tocEl.dataset.tocScrollOffset || '20', 10);
    const root = document.querySelector(selector);

    if (!root) {
      tocEl.querySelector('.toc-empty').textContent = `Content not found (${selector})`;
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const headings = Array.from(root.querySelectorAll(Array(maxLevel).fill(0).map((_, i) => `h${i + 1}`).join(',')))
      .filter(h => !tocEl.contains(h))
      .filter(h => parseInt(h.tagName.substring(1)) <= maxLevel);

    if (headings.length === 0) {
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const tocRoot = tocEl.querySelector('.toc-list');
    tocRoot.innerHTML = '';

    const idCounts = {};
    headings.forEach(h => {
      if (!h.id) {
        let id = slugify(h.textContent);
        if (!id) id = 'section';
        if (idCounts[id]) { idCounts[id] += 1; id = id + '-' + idCounts[id]; }
        else idCounts[id] = 1;
        h.id = id;
      }
    });

    // Build hierarchical tree
    const stack = [{ level: 0, ul: tocRoot }];
    headings.forEach((h, i) => {
      const level = parseInt(h.tagName.substring(1));
      const li = document.createElement('li');
      const a = document.createElement('a');
      a.href = '#' + h.id;
      a.textContent = h.textContent.trim();
      a.addEventListener('click', e => {
        e.preventDefault();
        window.scrollTo({ top: h.getBoundingClientRect().top + window.scrollY - offset, behavior: 'smooth' });
        history.replaceState(null, '', '#' + h.id);

        // // Clicking on the TOC menu closes the TOC
        // const wrapper = tocEl.querySelector('.toc-list-wrapper');
        // const toggle = tocEl.querySelector('.toc-toggle');
        // wrapper.style.display = 'none';
        // toggle.setAttribute('aria-expanded', 'false');
        // toggle.textContent = '{ { include.btn_show } }';
      });
      li.appendChild(a);

      while (stack.length > 1 && level <= stack[stack.length - 1].level) stack.pop();
      const parent = stack[stack.length - 1].ul;
      parent.appendChild(li);

      const next = headings[i + 1];
      if (next) {
        const nextLevel = parseInt(next.tagName.substring(1));
        if (nextLevel > level) {
          const newUl = document.createElement('ul');
          li.appendChild(newUl);
          stack.push({ level, ul: newUl });
        }
      }
    });

    // Active Highlight
    const links = tocRoot.querySelectorAll('a');
    function onScroll() {
      const fromTop = window.scrollY + offset + 1;
      let current = headings[0];
      for (let i = 0; i < headings.length; i++) {
        if (headings[i].offsetTop <= fromTop) current = headings[i];
      }
      links.forEach(l => l.classList.toggle('active', l.getAttribute('href') === '#' + current.id));
    }
    window.addEventListener('scroll', onScroll, { passive: true });
    onScroll();
  }

  document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.toc').forEach(toc => {
      buildTOC(toc);
      const toggle = toc.querySelector('.toc-toggle');
      const wrapper = toc.querySelector('.toc-list-wrapper');

      wrapper.style.display = 'none';
      toggle.setAttribute('aria-expanded', 'false');
      toggle.textContent = 'Show';

      toggle.addEventListener('click', () => {
        const expanded = toggle.getAttribute('aria-expanded') === 'true';
        wrapper.style.display = expanded ? 'none' : 'block';
        toggle.setAttribute('aria-expanded', (!expanded).toString());
        toggle.textContent = expanded ? 'Show' : 'Hidden';
      });

      const tocTop = toc.offsetTop;

      function handleScrollFix() {
        if (window.innerWidth <= minLayoutWidth) {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.zIndex = '';
          toc.style.width = '';
          return;
        }

        const scrollTop = window.scrollY || document.documentElement.scrollTop;

        // Fixes pinning behavior in Chrome
        if (scrollTop >= tocTop) {
          toc.classList.add('fixed');
          toc.style.position = 'fixed';
          toc.style.top = '0';
          toc.style.zIndex = '9999';
          // toc.style.width = toc.offsetWidth + 'px';
        } else {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.width = '';
        }

        // // Automatically closes the TOC if it is open and scrolled to it.
        // const rect = toc.getBoundingClientRect();
        // if (rect.top <= 0 && toggle.getAttribute('aria-expanded') === 'true') {
        //   wrapper.style.display = 'none';
        //   toggle.setAttribute('aria-expanded', 'false');
        //   toggle.textContent = '{ { include.btn_show } }';
        // }
      }

      window.addEventListener('scroll', handleScrollFix, { passive: true });
      window.addEventListener('resize', handleScrollFix);
      handleScrollFix();
    });
  });
})();
</script>

<h1 id="theology-h1">Theology (h1)</h1>

<p>Lorem ipsum dolor sit amet, <code class="language-plaintext highlighter-rouge">consectetur</code> adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit.</p>

<h2 id="eschatology">Eschatology</h2>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit.</p>

<blockquote>
  <p>Curabitur dignissim accumsan rutrum.</p>
</blockquote>

<h1 id="animals-h1">Animals (h1)</h1>

<p>Proin convallis mi ac felis pharetra aliquam. Curabitur <a href="/" target="\_blank">dignissim accumsan</a> rutrum. In arcu magna, aliquet vel pretium et, molestie et arcu.</p>

<p><em>Mauris lobortis nulla et felis ullamcorper bibendum.</em> Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc. Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.</p>

<h2 id="feline-h2">Feline (h2)</h2>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. <strong>Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt.</strong> Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit.</p>

<h3 id="cat-h3">Cat (h3)</h3>

<p>Proin convallis mi ac felis pharetra aliquam. Curabitur dignissim accumsan rutrum. In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum.</p>

<p>Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc.</p>

<h3 id="tiger-h3">Tiger (h3)</h3>

<p>Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.</p>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt.</p>

<h1 id="lists">Lists</h1>

<h2 id="ordered-list">Ordered list</h2>

<ol>
  <li>First item, yo</li>
  <li>Second item, dawg</li>
  <li>Third item, what what?!</li>
  <li>Fourth item, fo sheezy my neezy</li>
  <li>Fifth item, nested!</li>
</ol>

<h2 id="list-with-subtitles">List with subtitles</h2>

<ul>
  <li>First item, yo</li>
  <li>Second item, dawg</li>
  <li>Third item, what what?!</li>
  <li>Fourth item, fo sheezy my neezy</li>
  <li>Fifth item, nested!
    <ul>
      <li>So la ti do</li>
      <li>Ba-da-bing!</li>
      <li>Ba-da-boom!</li>
    </ul>
  </li>
</ul>

<h2 id="whaaat-a-checklist">Whaaat, a checklist??</h2>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Milk</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Cookies
    <ul class="task-list">
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Classic Choco-chip</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Sourdough Choco-chip</li>
    </ul>
  </li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Chee-ee-eeee-zzze!!!!</li>
</ul>

<h1 id="quotes">Quotes</h1>

<blockquote>
  <p>normal citation</p>
</blockquote>

<blockquote>
  <blockquote>
    <p>double quote</p>
  </blockquote>
</blockquote>

<h1 id="line-separators">Line separators</h1>

<hr />
<hr />
<hr />

<h1 id="escaping-special-characters">Escaping special characters</h1>

<p>*not in italics*</p>

<h1 id="table">Table</h1>

<table>
  <thead>
    <tr>
      <th>Title 1</th>
      <th>Title 2</th>
      <th>Title 3</th>
      <th>Title 4</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>lorem</td>
      <td>lorem ipsum</td>
      <td>lorem ipsum dolor</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
    <tr>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
    <tr>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
    <tr>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
  </tbody>
</table>

<h1 id="images-or-gifs-example">Images or Gifs example</h1>

<figure class="img-include-wrapper img-include-align-left" style="float: left; margin-right: 10px; width: 300px;">
    <img src="https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExMXNqM21hNWtxeWtkMTh0ajIwc3prYmt3dmV0a3ptY2RyMDJrejlrYiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/xT9IgG50Fb7Mi0prBC/giphy.gif" alt="Hello!" style="display:block; width:100%; height: auto; border-radius: 2px; border: 2px solid #000;" /><figcaption class="img-include-caption">Example animated GIF — © Giphy</figcaption></figure>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt.
<em>Mauris lobortis nulla et felis ullamcorper bibendum.</em> Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc. Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.</p>

<figure class="img-include-wrapper img-include-align-right" style="float: right; margin-left: 10px; width: 300px;">
    <img src="https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExMXNqM21hNWtxeWtkMTh0ajIwc3prYmt3dmV0a3ptY2RyMDJrejlrYiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/xT9IgG50Fb7Mi0prBC/giphy.gif" alt="Hello!" style="display:block; width:100%; height: auto; border-radius: 2px; border: 2px solid #000;" /><figcaption class="img-include-caption">Example animated GIF — © Giphy</figcaption></figure>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt.
<em>Mauris lobortis nulla et felis ullamcorper bibendum.</em> Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc. Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.</p>

<figure class="img-include-wrapper img-include-align-center" style="width: 100%;">
    <img src="https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExMXNqM21hNWtxeWtkMTh0ajIwc3prYmt3dmV0a3ptY2RyMDJrejlrYiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/xT9IgG50Fb7Mi0prBC/giphy.gif" alt="Hello!" style="display:block; width:100%; height: auto; border-radius: 2px; border: 2px solid #000;" /><figcaption class="img-include-caption">Example animated GIF — © Giphy</figcaption></figure>

<p>Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.</p>

<h1 id="video-youtube">Video YouTube</h1>

<blockquote>
  <p>Note: You must copy the embed link</p>
</blockquote>

<div class="video-wrapper">
  <iframe src="https://www.youtube.com/embed/xHusjrb_34A?si=th-S_gaVdKqtrJjj" title="Video" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
  </iframe>
  <noscript>
    <p>The video is not available for embedding. Watch it on <a href="https://www.youtube.com/embed/xHusjrb_34A?si=th-S_gaVdKqtrJjj" target="_blank">YouTube</a>.
    </p>
  </noscript>
</div>

<h1 id="tabs-example">Tabs example</h1>

<div class="tabs-start" aria-hidden="true"></div>

<script>
  (function () {
    if (window.__simple_tabs_installed) return;
    window.__simple_tabs_installed = true;

    function processTabs() {
      var starts = Array.from(document.querySelectorAll('.tabs-start'));
      starts.forEach(function (start) {
        var end = start.nextSibling;
        while (end && !(end.nodeType === 1 && end.classList && end.classList.contains('tabs-end'))) {
          end = end.nextSibling;
        }
        if (!end) return;

        var node = start.nextSibling;
        var tabs = [];
        var currentTab = null;
        while (node && node !== end) {
          var next = node.nextSibling;
          if (node.nodeType === Node.TEXT_NODE && !node.textContent.trim()) {
            node = next; continue;
          }
          var text = (node.textContent || '').trim();
          var m = text.match(/^\s*tab\d*\s*:\s*(.+)$/i);
          if (m) {
            currentTab = { title: m[1].trim(), nodes: [] };
            tabs.push(currentTab);
            if (node.parentNode) node.parentNode.removeChild(node);
          } else if (currentTab) {
            currentTab.nodes.push(node);
          } else {
          }
          node = next;
        }

        if (tabs.length === 0) {
          return;
        }

        var wrap = document.createElement('div');
        wrap.className = 'tabs-wrap';

        var nav = document.createElement('div');
        nav.className = 'tabs-nav';

        var panels = document.createElement('div');
        panels.className = 'tabs-panels';

        tabs.forEach(function (tab, i) {
          var btn = document.createElement('button');
          btn.type = 'button';
          btn.className = 'tab-btn' + (i === 0 ? ' active' : '');
          btn.setAttribute('data-idx', i);
          btn.textContent = tab.title;
          btn.addEventListener('click', function () {
            var idx = +this.getAttribute('data-idx');
            wrap.querySelectorAll('.tab-btn').forEach(function (b) {
              b.classList.toggle('active', +b.getAttribute('data-idx') === idx);
            });
            wrap.querySelectorAll('.tab-panel').forEach(function (p, pi) {
              p.classList.toggle('active', pi === idx);
            });
          });
          nav.appendChild(btn);

          var panel = document.createElement('div');
          panel.className = 'tab-panel' + (i === 0 ? ' active' : '');
          tab.nodes.forEach(function (n) {
            panel.appendChild(n.cloneNode(true));
          });
          panels.appendChild(panel);
        });

        wrap.appendChild(nav);
        wrap.appendChild(panels);

        start.parentNode.insertBefore(wrap, start);

        var cur = start;
        while (cur) {
          var nx = cur.nextSibling;
          if (cur.parentNode) cur.parentNode.removeChild(cur);
          if (cur === end) break;
          cur = nx;
        }
      });
    }

    if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', processTabs);
    else processTabs();
  })();
</script>

<p>tab1: Installation</p>

<p>Tab 1 content — can contain <strong>markdown</strong>, images, code, etc.</p>

<p>tab2: Settings</p>

<p>Tab 2 content — everything is set up normally.</p>

<!-- endtabs -->
<div class="tabs-end" aria-hidden="true"></div>

<h1 id="details-example">Details example</h1>

<div class="details-start" data-summary="How install"></div>

<script>
(function(){
  if (window.__jekyll_details_setup) return;
  window.__jekyll_details_setup = true;

  function initDetails(){
    const starts = document.querySelectorAll('.details-start');
    starts.forEach(start => {
      const summary = start.getAttribute('data-summary') || 'Detalhes';

      let end = start.nextSibling;
      while(end && !(end.nodeType === 1 && end.classList.contains('details-end'))){
        end = end.nextSibling;
      }
      if(!end) return;

      let node = start.nextSibling;
      const content = [];
      while(node && node !== end){
        const next = node.nextSibling;
        if(node.nodeType === Node.ELEMENT_NODE || (node.nodeType === Node.TEXT_NODE && node.textContent.trim())){
          content.push(node.cloneNode(true));
        }
        node = next;
      }

      const details = document.createElement('details');
      const sum = document.createElement('summary');
      sum.textContent = summary;
      details.appendChild(sum);

      const wrapper = document.createElement('div');
      wrapper.className = 'details-content-wrapper';

      content.forEach(el => wrapper.appendChild(el));

      details.appendChild(wrapper);

      start.parentNode.insertBefore(details, start);
      let cur = start;
      while(cur){
        const next = cur.nextSibling;
        cur.remove();
        if(cur === end) break;
        cur = next;
      }
    });
  }

  if(document.readyState === 'loading')
    document.addEventListener('DOMContentLoaded', initDetails);
  else
    initDetails();
})();
</script>

<p>Here’s the <strong>expanded</strong> content — it may have Markdown, code, lists, etc.</p>

<!-- enddetails -->
<div class="details-end"></div>

<h1 id="alerts">Alerts</h1>

<h2 id="success">Success</h2>

<div class="alert alert-success">
  
<p>Congratulations! Your theme is working.</p>

</div>

<h2 id="danger">Danger</h2>

<div class="alert alert-danger">
  
<p>Danger! Do not remove this example</p>

</div>

<h2 id="warning">Warning</h2>

<div class="alert alert-warning">
  
<p>Warning! This is just an example</p>

</div>

<h1 id="charts-example">Charts example</h1>

<canvas class="chart" id="chart-sales"> </canvas>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const ctx = document.getElementById("chart-sales");
    if (!ctx) return;
    new Chart(ctx, {
      type: "bar",
      data: {
        labels: "January,February,March,April,May".split(","),
        datasets: [{
          label: "Sales",
          data: "10,13,20,25,50".split(",").map(Number),
          borderColor: "#00bfffff",
          backgroundColor: "#00bfffff33",
          fill: true,
          tension: 0.3,
          borderWidth: 2,
          pointRadius: 4,
          pointHoverRadius: 6
        }]
      },
      options: {
        responsive: true,
        plugins: { legend: { display: true, labels: { color: '#444444' } } },
        scales: {
          x: { ticks: { color: '#131313' }, grid: { color: '#111111' } },
          y: { ticks: { color: '#131313' }, grid: { color: '#111111' } }
        }
      }
    });
  });
</script>

<h1 id="socials-networks-links">Socials networks links</h1>

<div class="container socials">
  <div class="row"><div class="col-sm d-flex justify-content-center"><strong>.&nbsp;</strong>
      
      
        <a class="socials-link" title="youtube" href="https://www.youtube.com/@WilliamCanin" target="_blank">
          youtube
        </a><strong>&nbsp;.&nbsp;</strong>
      
        <a class="socials-link" title="github" href="https://github.com/williamcanin" target="_blank">
          github
        </a><strong>&nbsp;.&nbsp;</strong>
      
        <a class="socials-link" title="gitlab" href="https://gitlab.com/williamcanin" target="_blank">
          gitlab
        </a><strong>&nbsp;.&nbsp;</strong>
      
        <a class="socials-link" title="rubygems" href="https://rubygems.org/profiles/williamcanin" target="_blank">
          rubygems
        </a><strong>&nbsp;.&nbsp;</strong>
      
        <a class="socials-link" title="pypi" href="https://pypi.org/user/williamcanin" target="_blank">
          pypi
        </a><strong>&nbsp;.&nbsp;</strong>
      
        <a class="socials-link" title="spotify" href="https://open.spotify.com/user/williamcanin" target="_blank">
          spotify
        </a><strong>&nbsp;.&nbsp;</strong>
      
    </div>

  </div>
</div>

<h1 id="blockcodes">Blockcodes</h1>

<p>An article with various blocks of highlighted code snippets.</p>

<h2 id="html-code-using-crase---">HTML code using crase ` ` `</h2>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span> <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;p&gt;</span>Hello, World!<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h2 id="ruby-code-using-crase---">Ruby code using crase ` ` `</h2>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kp">include</span> <span class="no">Enumerable</span>

<span class="k">module</span> <span class="nn">Foo</span>
  <span class="k">class</span> <span class="nc">Bar</span>
    <span class="no">LIPSUM</span> <span class="o">=</span> <span class="s2">"lorem ipsum dolor sit"</span>

    <span class="nb">attr_reader</span> <span class="ss">:layout</span>

    <span class="k">def</span> <span class="nf">initialize</span>
      <span class="vi">@layout</span> <span class="o">=</span> <span class="no">Layout</span><span class="p">.</span><span class="nf">new</span>
    <span class="k">end</span>

    <span class="c1"># instance method</span>
    <span class="k">def</span> <span class="nf">profile</span>
      <span class="n">measure_time</span> <span class="k">do</span>
        <span class="n">compile</span> <span class="n">layout</span>
        <span class="n">layout</span><span class="p">.</span><span class="nf">render_with</span> <span class="no">Bar</span><span class="o">::</span><span class="no">LIPSUM</span>
      <span class="k">end</span>
    <span class="k">rescue</span> <span class="no">ArgumentError</span>
      <span class="kp">false</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># Execute code</span>
<span class="no">Foo</span><span class="o">::</span><span class="no">Bar</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">profile</span>
</code></pre></div></div>

<h2 id="sass-code-using-crase---">Sass code using crase ` ` `</h2>

<div class="language-sass highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@import</span> <span class="s">"base"</span>

<span class="nc">.card</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">inline-block</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span>

  <span class="k">&amp;</span><span class="nd">:hover</span>
    <span class="nl">color</span><span class="p">:</span> <span class="mh">#ab45ef</span><span class="err">;</span>
</code></pre></div></div>

<h2 id="block-raw">Block raw</h2>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">foo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">foo</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">bar</span><span class="p">:</span><span class="w"> </span><span class="s1">'baz'</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{{</span><span class="w"> </span><span class="nv">foo</span><span class="w"> </span><span class="cp">}}</span>
</code></pre></div></div>

<h2 id="html-using---highlight---with-numbers">HTML using { % highlight % } with numbers</h2>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>Hello World<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;p&gt;</span>Hello, World!<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="rust-using---highlight---with-numbers-and-marking-lines">Rust using { % highlight % } with numbers and marking lines</h2>

<figure class="highlight"><pre><code class="language-rust" data-lang="rust"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre><span class="hll"><span class="c1">// main.rs</span>
</span>
<span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">collections</span><span class="p">::</span><span class="n">HashMap</span><span class="p">;</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>

<span class="hll">  <span class="k">let</span> <span class="n">workflow</span><span class="p">:</span> <span class="n">HashMap</span><span class="o">&lt;&amp;</span><span class="nb">str</span><span class="p">,</span> <span class="n">HashMap</span><span class="o">&lt;&amp;</span><span class="nb">str</span><span class="p">,</span> <span class="nb">Vec</span><span class="o">&lt;&amp;</span><span class="nb">str</span><span class="o">&gt;&gt;&gt;</span> <span class="o">=</span> <span class="nn">HashMap</span><span class="p">::</span><span class="nf">from</span><span class="p">([</span>
</span>    <span class="p">(</span>
      <span class="s">"My Main Tech Stack"</span><span class="p">,</span>
      <span class="nn">HashMap</span><span class="p">::</span><span class="nf">from</span><span class="p">([</span>
        <span class="p">(</span><span class="s">"Languages"</span><span class="p">,</span> <span class="nd">vec!</span><span class="p">[</span><span class="s">"Rust"</span><span class="p">,</span> <span class="s">"Python"</span><span class="p">,</span> <span class="s">"Shell Script"</span><span class="p">]),</span>
        <span class="p">(</span><span class="s">"Frontend"</span><span class="p">,</span> <span class="nd">vec!</span><span class="p">[</span><span class="s">"HTML"</span><span class="p">,</span> <span class="s">"CSS"</span><span class="p">,</span> <span class="s">"SASS"</span><span class="p">,</span> <span class="s">"Bootstrap"</span><span class="p">,</span> <span class="s">"Jekyll"</span><span class="p">]),</span>
        <span class="p">(</span><span class="s">"Database"</span><span class="p">,</span> <span class="nd">vec!</span><span class="p">[</span><span class="s">"PostGreSQL"</span><span class="p">,</span> <span class="s">"MySQL"</span><span class="p">]),</span>
        <span class="p">(</span><span class="s">"Tools"</span><span class="p">,</span> <span class="nd">vec!</span><span class="p">[</span><span class="s">"VSCode"</span><span class="p">,</span> <span class="s">"Vim"</span><span class="p">,</span> <span class="s">"JetBrains IDEs"</span><span class="p">,</span> <span class="s">"Git"</span><span class="p">]),</span>
<span class="hll">        <span class="p">(</span><span class="s">"OS"</span><span class="p">,</span> <span class="nd">vec!</span><span class="p">[</span><span class="s">"Linux"</span><span class="p">,</span> <span class="s">"Windows"</span><span class="p">]),</span>
</span>      <span class="p">]),</span>
    <span class="p">),</span>
  <span class="p">]);</span>

  <span class="k">let</span> <span class="n">yt_link</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span> <span class="o">=</span> <span class="s">"https://www.youtube.com/c/williamcanin"</span><span class="p">;</span>

  <span class="nd">println!</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
  <span class="nd">println!</span><span class="p">(</span><span class="s">"My name is William, and I am a programming and hacking enthusiast."</span><span class="p">);</span>

  <span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="o">&amp;</span><span class="n">workflow</span> <span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"{}:"</span><span class="p">,</span> <span class="n">key</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">inner_key</span><span class="p">,</span> <span class="n">inner_value</span><span class="p">)</span> <span class="k">in</span> <span class="n">value</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"  {}: {:?}"</span><span class="p">,</span> <span class="n">inner_key</span><span class="p">,</span> <span class="n">inner_value</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

<span class="hll">  <span class="nd">println!</span><span class="p">(</span><span class="s">"YouTube::&gt; {}"</span><span class="p">,</span> <span class="n">yt_link</span><span class="p">);</span>
</span>
<span class="p">}</span>

</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name>William C. Canin</name></author><category term="tools" /><category term="starter" /><category term="example" /><category term="codeblocks" /><category term="style" /><category term="include" /><category term="chart" /><category term="ruby" /><category term="html" /><category term="rust" /><category term="raw" /><summary type="html"><![CDATA[An example post for: Code Block and Styles]]></summary></entry><entry><title type="html">Codeblocks - Demonstration in the post</title><link href="https://williamcanin.github.io/blog/this-post-demonstrates-post-codeblocks/" rel="alternate" type="text/html" title="Codeblocks - Demonstration in the post" /><published>2025-09-25T13:36:34+00:00</published><updated>2025-09-25T13:36:34+00:00</updated><id>https://williamcanin.github.io/blog/this-post-demonstrates-post-codeblocks</id><content type="html" xml:base="https://williamcanin.github.io/blog/this-post-demonstrates-post-codeblocks/"><![CDATA[<nav class="toc" id="toc" data-toc-selector=".post-content" data-toc-max-level="3" data-toc-scroll-offset="20">
  <div class="toc-head">
    <h2>TOC</h2>
    <button class="toc-toggle" aria-expanded="true" type="button">Hidden</button>
  </div>
  <div class="toc-list-wrapper">
    <ul class="toc-list" role="list"></ul>
    <p class="toc-empty" style="display:none">No titles found. Remove TOC!</p>
  </div>
</nav>

<script>
(function () {
  const minLayoutWidth = 1830;

  const toc = document.getElementById('toc');
  if (toc) {
    const sentinel = document.createElement('div');
    toc.parentNode.insertBefore(sentinel, toc);

    function shouldApplyFixed() {
      return window.innerWidth > minLayoutWidth;
    }

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (shouldApplyFixed()) {
          if (!entry.isIntersecting) {
            toc.classList.add('toc-fixed');
          } else {
            toc.classList.remove('toc-fixed');
          }
        } else {
          toc.classList.remove('toc-fixed');
        }
      },
      { threshold: 0 }
    );
    observer.observe(sentinel);

    window.addEventListener('resize', () => {
        if (!shouldApplyFixed()) {
            toc.classList.remove('toc-fixed');
        }
    });
  }

  function slugify(text) {
    if (!text) return '';
    return text.toString().toLowerCase().trim()
      .normalize('NFKD').replace(/[\u0300-\u036f]/g, '')
      .replace(/[^\w\s-]/g, '').replace(/\s+/g, '-').replace(/--+/g, '-');
  }

  function buildTOC(tocEl) {
    const selector = tocEl.dataset.tocSelector || '.post-content' || '.page-content';
    const maxLevel = parseInt(tocEl.dataset.tocMaxLevel || '3', 10);
    const offset = parseInt(tocEl.dataset.tocScrollOffset || '20', 10);
    const root = document.querySelector(selector);

    if (!root) {
      tocEl.querySelector('.toc-empty').textContent = `Content not found (${selector})`;
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const headings = Array.from(root.querySelectorAll(Array(maxLevel).fill(0).map((_, i) => `h${i + 1}`).join(',')))
      .filter(h => !tocEl.contains(h))
      .filter(h => parseInt(h.tagName.substring(1)) <= maxLevel);

    if (headings.length === 0) {
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const tocRoot = tocEl.querySelector('.toc-list');
    tocRoot.innerHTML = '';

    const idCounts = {};
    headings.forEach(h => {
      if (!h.id) {
        let id = slugify(h.textContent);
        if (!id) id = 'section';
        if (idCounts[id]) { idCounts[id] += 1; id = id + '-' + idCounts[id]; }
        else idCounts[id] = 1;
        h.id = id;
      }
    });

    // Build hierarchical tree
    const stack = [{ level: 0, ul: tocRoot }];
    headings.forEach((h, i) => {
      const level = parseInt(h.tagName.substring(1));
      const li = document.createElement('li');
      const a = document.createElement('a');
      a.href = '#' + h.id;
      a.textContent = h.textContent.trim();
      a.addEventListener('click', e => {
        e.preventDefault();
        window.scrollTo({ top: h.getBoundingClientRect().top + window.scrollY - offset, behavior: 'smooth' });
        history.replaceState(null, '', '#' + h.id);

        // // Clicking on the TOC menu closes the TOC
        // const wrapper = tocEl.querySelector('.toc-list-wrapper');
        // const toggle = tocEl.querySelector('.toc-toggle');
        // wrapper.style.display = 'none';
        // toggle.setAttribute('aria-expanded', 'false');
        // toggle.textContent = '{ { include.btn_show } }';
      });
      li.appendChild(a);

      while (stack.length > 1 && level <= stack[stack.length - 1].level) stack.pop();
      const parent = stack[stack.length - 1].ul;
      parent.appendChild(li);

      const next = headings[i + 1];
      if (next) {
        const nextLevel = parseInt(next.tagName.substring(1));
        if (nextLevel > level) {
          const newUl = document.createElement('ul');
          li.appendChild(newUl);
          stack.push({ level, ul: newUl });
        }
      }
    });

    // Active Highlight
    const links = tocRoot.querySelectorAll('a');
    function onScroll() {
      const fromTop = window.scrollY + offset + 1;
      let current = headings[0];
      for (let i = 0; i < headings.length; i++) {
        if (headings[i].offsetTop <= fromTop) current = headings[i];
      }
      links.forEach(l => l.classList.toggle('active', l.getAttribute('href') === '#' + current.id));
    }
    window.addEventListener('scroll', onScroll, { passive: true });
    onScroll();
  }

  document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.toc').forEach(toc => {
      buildTOC(toc);
      const toggle = toc.querySelector('.toc-toggle');
      const wrapper = toc.querySelector('.toc-list-wrapper');

      wrapper.style.display = 'none';
      toggle.setAttribute('aria-expanded', 'false');
      toggle.textContent = 'Show';

      toggle.addEventListener('click', () => {
        const expanded = toggle.getAttribute('aria-expanded') === 'true';
        wrapper.style.display = expanded ? 'none' : 'block';
        toggle.setAttribute('aria-expanded', (!expanded).toString());
        toggle.textContent = expanded ? 'Show' : 'Hidden';
      });

      const tocTop = toc.offsetTop;

      function handleScrollFix() {
        if (window.innerWidth <= minLayoutWidth) {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.zIndex = '';
          toc.style.width = '';
          return;
        }

        const scrollTop = window.scrollY || document.documentElement.scrollTop;

        // Fixes pinning behavior in Chrome
        if (scrollTop >= tocTop) {
          toc.classList.add('fixed');
          toc.style.position = 'fixed';
          toc.style.top = '0';
          toc.style.zIndex = '9999';
          // toc.style.width = toc.offsetWidth + 'px';
        } else {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.width = '';
        }

        // // Automatically closes the TOC if it is open and scrolled to it.
        // const rect = toc.getBoundingClientRect();
        // if (rect.top <= 0 && toggle.getAttribute('aria-expanded') === 'true') {
        //   wrapper.style.display = 'none';
        //   toggle.setAttribute('aria-expanded', 'false');
        //   toggle.textContent = '{ { include.btn_show } }';
        // }
      }

      window.addEventListener('scroll', handleScrollFix, { passive: true });
      window.addEventListener('resize', handleScrollFix);
      handleScrollFix();
    });
  });
})();
</script>

<h1 id="blockcodes">Blockcodes</h1>

<p>An article with various blocks of highlighted code snippets.</p>

<h2 id="html-code-using-crase---">HTML code using crase ` ` `</h2>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span> <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;p&gt;</span>Hello, World!<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h2 id="ruby-code-using-crase---">Ruby code using crase ` ` `</h2>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kp">include</span> <span class="no">Enumerable</span>

<span class="k">module</span> <span class="nn">Foo</span>
  <span class="k">class</span> <span class="nc">Bar</span>
    <span class="no">LIPSUM</span> <span class="o">=</span> <span class="s2">"lorem ipsum dolor sit"</span>

    <span class="nb">attr_reader</span> <span class="ss">:layout</span>

    <span class="k">def</span> <span class="nf">initialize</span>
      <span class="vi">@layout</span> <span class="o">=</span> <span class="no">Layout</span><span class="p">.</span><span class="nf">new</span>
    <span class="k">end</span>

    <span class="c1"># instance method</span>
    <span class="k">def</span> <span class="nf">profile</span>
      <span class="n">measure_time</span> <span class="k">do</span>
        <span class="n">compile</span> <span class="n">layout</span>
        <span class="n">layout</span><span class="p">.</span><span class="nf">render_with</span> <span class="no">Bar</span><span class="o">::</span><span class="no">LIPSUM</span>
      <span class="k">end</span>
    <span class="k">rescue</span> <span class="no">ArgumentError</span>
      <span class="kp">false</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># Execute code</span>
<span class="no">Foo</span><span class="o">::</span><span class="no">Bar</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">profile</span>
</code></pre></div></div>

<h2 id="sass-code-using-crase---">Sass code using crase ` ` `</h2>

<div class="language-sass highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@import</span> <span class="s">"base"</span>

<span class="nc">.card</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">inline-block</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span>

  <span class="k">&amp;</span><span class="nd">:hover</span>
    <span class="nl">color</span><span class="p">:</span> <span class="mh">#ab45ef</span><span class="err">;</span>
</code></pre></div></div>

<h2 id="block-raw">Block raw</h2>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">foo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">foo</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">bar</span><span class="p">:</span><span class="w"> </span><span class="s1">'baz'</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{{</span><span class="w"> </span><span class="nv">foo</span><span class="w"> </span><span class="cp">}}</span>
</code></pre></div></div>

<h2 id="html-using---highlight---with-numbers">HTML using { % highlight % } with numbers</h2>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>Hello World<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;p&gt;</span>Hello, World!<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="rust-using---highlight---with-numbers-and-marking-lines">Rust using { % highlight % } with numbers and marking lines</h2>

<figure class="highlight"><pre><code class="language-rust" data-lang="rust"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre><span class="hll"><span class="c1">// main.rs</span>
</span>
<span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">collections</span><span class="p">::</span><span class="n">HashMap</span><span class="p">;</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>

<span class="hll">  <span class="k">let</span> <span class="n">workflow</span><span class="p">:</span> <span class="n">HashMap</span><span class="o">&lt;&amp;</span><span class="nb">str</span><span class="p">,</span> <span class="n">HashMap</span><span class="o">&lt;&amp;</span><span class="nb">str</span><span class="p">,</span> <span class="nb">Vec</span><span class="o">&lt;&amp;</span><span class="nb">str</span><span class="o">&gt;&gt;&gt;</span> <span class="o">=</span> <span class="nn">HashMap</span><span class="p">::</span><span class="nf">from</span><span class="p">([</span>
</span>    <span class="p">(</span>
      <span class="s">"My Main Tech Stack"</span><span class="p">,</span>
      <span class="nn">HashMap</span><span class="p">::</span><span class="nf">from</span><span class="p">([</span>
        <span class="p">(</span><span class="s">"Languages"</span><span class="p">,</span> <span class="nd">vec!</span><span class="p">[</span><span class="s">"Rust"</span><span class="p">,</span> <span class="s">"Python"</span><span class="p">,</span> <span class="s">"Shell Script"</span><span class="p">]),</span>
        <span class="p">(</span><span class="s">"Frontend"</span><span class="p">,</span> <span class="nd">vec!</span><span class="p">[</span><span class="s">"HTML"</span><span class="p">,</span> <span class="s">"CSS"</span><span class="p">,</span> <span class="s">"SASS"</span><span class="p">,</span> <span class="s">"Bootstrap"</span><span class="p">,</span> <span class="s">"Jekyll"</span><span class="p">]),</span>
        <span class="p">(</span><span class="s">"Database"</span><span class="p">,</span> <span class="nd">vec!</span><span class="p">[</span><span class="s">"PostGreSQL"</span><span class="p">,</span> <span class="s">"MySQL"</span><span class="p">]),</span>
        <span class="p">(</span><span class="s">"Tools"</span><span class="p">,</span> <span class="nd">vec!</span><span class="p">[</span><span class="s">"VSCode"</span><span class="p">,</span> <span class="s">"Vim"</span><span class="p">,</span> <span class="s">"JetBrains IDEs"</span><span class="p">,</span> <span class="s">"Git"</span><span class="p">]),</span>
<span class="hll">        <span class="p">(</span><span class="s">"OS"</span><span class="p">,</span> <span class="nd">vec!</span><span class="p">[</span><span class="s">"Linux"</span><span class="p">,</span> <span class="s">"Windows"</span><span class="p">]),</span>
</span>      <span class="p">]),</span>
    <span class="p">),</span>
  <span class="p">]);</span>

  <span class="k">let</span> <span class="n">yt_link</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span> <span class="o">=</span> <span class="s">"https://www.youtube.com/c/williamcanin"</span><span class="p">;</span>

  <span class="nd">println!</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
  <span class="nd">println!</span><span class="p">(</span><span class="s">"My name is William, and I am a programming and hacking enthusiast."</span><span class="p">);</span>

  <span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="o">&amp;</span><span class="n">workflow</span> <span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"{}:"</span><span class="p">,</span> <span class="n">key</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">inner_key</span><span class="p">,</span> <span class="n">inner_value</span><span class="p">)</span> <span class="k">in</span> <span class="n">value</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"  {}: {:?}"</span><span class="p">,</span> <span class="n">inner_key</span><span class="p">,</span> <span class="n">inner_value</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

<span class="hll">  <span class="nd">println!</span><span class="p">(</span><span class="s">"YouTube::&gt; {}"</span><span class="p">,</span> <span class="n">yt_link</span><span class="p">);</span>
</span>
<span class="p">}</span>

</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name>William Canin</name></author><category term="tools" /><category term="starter" /><category term="example" /><category term="codeblocks" /><category term="ruby" /><category term="html" /><category term="rust" /><category term="raw" /><summary type="html"><![CDATA[This post demonstrates post codeblock]]></summary></entry><entry><title type="html">Content styles - Demonstration in the post</title><link href="https://williamcanin.github.io/blog/this-post-demonstrates-post-content-styles/" rel="alternate" type="text/html" title="Content styles - Demonstration in the post" /><published>2025-09-22T20:24:04+00:00</published><updated>2025-09-22T20:24:04+00:00</updated><id>https://williamcanin.github.io/blog/this-post-demonstrates-post-content-styles</id><content type="html" xml:base="https://williamcanin.github.io/blog/this-post-demonstrates-post-content-styles/"><![CDATA[<nav class="toc" id="toc" data-toc-selector=".post-content" data-toc-max-level="3" data-toc-scroll-offset="20">
  <div class="toc-head">
    <h2>TOC</h2>
    <button class="toc-toggle" aria-expanded="true" type="button">Hidden</button>
  </div>
  <div class="toc-list-wrapper">
    <ul class="toc-list" role="list"></ul>
    <p class="toc-empty" style="display:none">No titles found. Remove TOC!</p>
  </div>
</nav>

<script>
(function () {
  const minLayoutWidth = 1830;

  const toc = document.getElementById('toc');
  if (toc) {
    const sentinel = document.createElement('div');
    toc.parentNode.insertBefore(sentinel, toc);

    function shouldApplyFixed() {
      return window.innerWidth > minLayoutWidth;
    }

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (shouldApplyFixed()) {
          if (!entry.isIntersecting) {
            toc.classList.add('toc-fixed');
          } else {
            toc.classList.remove('toc-fixed');
          }
        } else {
          toc.classList.remove('toc-fixed');
        }
      },
      { threshold: 0 }
    );
    observer.observe(sentinel);

    window.addEventListener('resize', () => {
        if (!shouldApplyFixed()) {
            toc.classList.remove('toc-fixed');
        }
    });
  }

  function slugify(text) {
    if (!text) return '';
    return text.toString().toLowerCase().trim()
      .normalize('NFKD').replace(/[\u0300-\u036f]/g, '')
      .replace(/[^\w\s-]/g, '').replace(/\s+/g, '-').replace(/--+/g, '-');
  }

  function buildTOC(tocEl) {
    const selector = tocEl.dataset.tocSelector || '.post-content' || '.page-content';
    const maxLevel = parseInt(tocEl.dataset.tocMaxLevel || '3', 10);
    const offset = parseInt(tocEl.dataset.tocScrollOffset || '20', 10);
    const root = document.querySelector(selector);

    if (!root) {
      tocEl.querySelector('.toc-empty').textContent = `Content not found (${selector})`;
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const headings = Array.from(root.querySelectorAll(Array(maxLevel).fill(0).map((_, i) => `h${i + 1}`).join(',')))
      .filter(h => !tocEl.contains(h))
      .filter(h => parseInt(h.tagName.substring(1)) <= maxLevel);

    if (headings.length === 0) {
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const tocRoot = tocEl.querySelector('.toc-list');
    tocRoot.innerHTML = '';

    const idCounts = {};
    headings.forEach(h => {
      if (!h.id) {
        let id = slugify(h.textContent);
        if (!id) id = 'section';
        if (idCounts[id]) { idCounts[id] += 1; id = id + '-' + idCounts[id]; }
        else idCounts[id] = 1;
        h.id = id;
      }
    });

    // Build hierarchical tree
    const stack = [{ level: 0, ul: tocRoot }];
    headings.forEach((h, i) => {
      const level = parseInt(h.tagName.substring(1));
      const li = document.createElement('li');
      const a = document.createElement('a');
      a.href = '#' + h.id;
      a.textContent = h.textContent.trim();
      a.addEventListener('click', e => {
        e.preventDefault();
        window.scrollTo({ top: h.getBoundingClientRect().top + window.scrollY - offset, behavior: 'smooth' });
        history.replaceState(null, '', '#' + h.id);

        // // Clicking on the TOC menu closes the TOC
        // const wrapper = tocEl.querySelector('.toc-list-wrapper');
        // const toggle = tocEl.querySelector('.toc-toggle');
        // wrapper.style.display = 'none';
        // toggle.setAttribute('aria-expanded', 'false');
        // toggle.textContent = '{ { include.btn_show } }';
      });
      li.appendChild(a);

      while (stack.length > 1 && level <= stack[stack.length - 1].level) stack.pop();
      const parent = stack[stack.length - 1].ul;
      parent.appendChild(li);

      const next = headings[i + 1];
      if (next) {
        const nextLevel = parseInt(next.tagName.substring(1));
        if (nextLevel > level) {
          const newUl = document.createElement('ul');
          li.appendChild(newUl);
          stack.push({ level, ul: newUl });
        }
      }
    });

    // Active Highlight
    const links = tocRoot.querySelectorAll('a');
    function onScroll() {
      const fromTop = window.scrollY + offset + 1;
      let current = headings[0];
      for (let i = 0; i < headings.length; i++) {
        if (headings[i].offsetTop <= fromTop) current = headings[i];
      }
      links.forEach(l => l.classList.toggle('active', l.getAttribute('href') === '#' + current.id));
    }
    window.addEventListener('scroll', onScroll, { passive: true });
    onScroll();
  }

  document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.toc').forEach(toc => {
      buildTOC(toc);
      const toggle = toc.querySelector('.toc-toggle');
      const wrapper = toc.querySelector('.toc-list-wrapper');

      wrapper.style.display = 'none';
      toggle.setAttribute('aria-expanded', 'false');
      toggle.textContent = 'Show';

      toggle.addEventListener('click', () => {
        const expanded = toggle.getAttribute('aria-expanded') === 'true';
        wrapper.style.display = expanded ? 'none' : 'block';
        toggle.setAttribute('aria-expanded', (!expanded).toString());
        toggle.textContent = expanded ? 'Show' : 'Hidden';
      });

      const tocTop = toc.offsetTop;

      function handleScrollFix() {
        if (window.innerWidth <= minLayoutWidth) {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.zIndex = '';
          toc.style.width = '';
          return;
        }

        const scrollTop = window.scrollY || document.documentElement.scrollTop;

        // Fixes pinning behavior in Chrome
        if (scrollTop >= tocTop) {
          toc.classList.add('fixed');
          toc.style.position = 'fixed';
          toc.style.top = '0';
          toc.style.zIndex = '9999';
          // toc.style.width = toc.offsetWidth + 'px';
        } else {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.width = '';
        }

        // // Automatically closes the TOC if it is open and scrolled to it.
        // const rect = toc.getBoundingClientRect();
        // if (rect.top <= 0 && toggle.getAttribute('aria-expanded') === 'true') {
        //   wrapper.style.display = 'none';
        //   toggle.setAttribute('aria-expanded', 'false');
        //   toggle.textContent = '{ { include.btn_show } }';
        // }
      }

      window.addEventListener('scroll', handleScrollFix, { passive: true });
      window.addEventListener('resize', handleScrollFix);
      handleScrollFix();
    });
  });
})();
</script>

<h1 id="theology-h1">Theology (h1)</h1>

<p>Lorem ipsum dolor sit amet, <code class="language-plaintext highlighter-rouge">consectetur</code> adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit.</p>

<h2 id="eschatology">Eschatology</h2>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit.</p>

<blockquote>
  <p>Curabitur dignissim accumsan rutrum.</p>
</blockquote>

<h1 id="animals-h1">Animals (h1)</h1>

<p>Proin convallis mi ac felis pharetra aliquam. Curabitur <a href="/" target="\_blank">dignissim accumsan</a> rutrum. In arcu magna, aliquet vel pretium et, molestie et arcu.</p>

<p><em>Mauris lobortis nulla et felis ullamcorper bibendum.</em> Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc. Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.</p>

<h2 id="feline-h2">Feline (h2)</h2>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. <strong>Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt.</strong> Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit.</p>

<h3 id="cat-h3">Cat (h3)</h3>

<p>Proin convallis mi ac felis pharetra aliquam. Curabitur dignissim accumsan rutrum. In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum.</p>

<p>Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc.</p>

<h3 id="tiger-h3">Tiger (h3)</h3>

<p>Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.</p>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt.</p>

<h1 id="lists">Lists</h1>

<h2 id="ordered-list">Ordered list</h2>

<ol>
  <li>First item, yo</li>
  <li>Second item, dawg</li>
  <li>Third item, what what?!</li>
  <li>Fourth item, fo sheezy my neezy</li>
  <li>Fifth item, nested!</li>
</ol>

<h2 id="list-with-subtitles">List with subtitles</h2>

<ul>
  <li>First item, yo</li>
  <li>Second item, dawg</li>
  <li>Third item, what what?!</li>
  <li>Fourth item, fo sheezy my neezy</li>
  <li>Fifth item, nested!
    <ul>
      <li>So la ti do</li>
      <li>Ba-da-bing!</li>
      <li>Ba-da-boom!</li>
    </ul>
  </li>
</ul>

<h2 id="whaaat-a-checklist">Whaaat, a checklist??</h2>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Milk</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Cookies
    <ul class="task-list">
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Classic Choco-chip</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Sourdough Choco-chip</li>
    </ul>
  </li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Chee-ee-eeee-zzze!!!!</li>
</ul>

<h1 id="table">Table</h1>

<table>
  <thead>
    <tr>
      <th>Title 1</th>
      <th>Title 2</th>
      <th>Title 3</th>
      <th>Title 4</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>lorem</td>
      <td>lorem ipsum</td>
      <td>lorem ipsum dolor</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
    <tr>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
    <tr>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
    <tr>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
  </tbody>
</table>

<h1 id="tabs-example">Tabs example</h1>

<div class="tabs-start" aria-hidden="true"></div>

<script>
  (function () {
    if (window.__simple_tabs_installed) return;
    window.__simple_tabs_installed = true;

    function processTabs() {
      var starts = Array.from(document.querySelectorAll('.tabs-start'));
      starts.forEach(function (start) {
        var end = start.nextSibling;
        while (end && !(end.nodeType === 1 && end.classList && end.classList.contains('tabs-end'))) {
          end = end.nextSibling;
        }
        if (!end) return;

        var node = start.nextSibling;
        var tabs = [];
        var currentTab = null;
        while (node && node !== end) {
          var next = node.nextSibling;
          if (node.nodeType === Node.TEXT_NODE && !node.textContent.trim()) {
            node = next; continue;
          }
          var text = (node.textContent || '').trim();
          var m = text.match(/^\s*tab\d*\s*:\s*(.+)$/i);
          if (m) {
            currentTab = { title: m[1].trim(), nodes: [] };
            tabs.push(currentTab);
            if (node.parentNode) node.parentNode.removeChild(node);
          } else if (currentTab) {
            currentTab.nodes.push(node);
          } else {
          }
          node = next;
        }

        if (tabs.length === 0) {
          return;
        }

        var wrap = document.createElement('div');
        wrap.className = 'tabs-wrap';

        var nav = document.createElement('div');
        nav.className = 'tabs-nav';

        var panels = document.createElement('div');
        panels.className = 'tabs-panels';

        tabs.forEach(function (tab, i) {
          var btn = document.createElement('button');
          btn.type = 'button';
          btn.className = 'tab-btn' + (i === 0 ? ' active' : '');
          btn.setAttribute('data-idx', i);
          btn.textContent = tab.title;
          btn.addEventListener('click', function () {
            var idx = +this.getAttribute('data-idx');
            wrap.querySelectorAll('.tab-btn').forEach(function (b) {
              b.classList.toggle('active', +b.getAttribute('data-idx') === idx);
            });
            wrap.querySelectorAll('.tab-panel').forEach(function (p, pi) {
              p.classList.toggle('active', pi === idx);
            });
          });
          nav.appendChild(btn);

          var panel = document.createElement('div');
          panel.className = 'tab-panel' + (i === 0 ? ' active' : '');
          tab.nodes.forEach(function (n) {
            panel.appendChild(n.cloneNode(true));
          });
          panels.appendChild(panel);
        });

        wrap.appendChild(nav);
        wrap.appendChild(panels);

        start.parentNode.insertBefore(wrap, start);

        var cur = start;
        while (cur) {
          var nx = cur.nextSibling;
          if (cur.parentNode) cur.parentNode.removeChild(cur);
          if (cur === end) break;
          cur = nx;
        }
      });
    }

    if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', processTabs);
    else processTabs();
  })();
</script>

<p>tab1: Installation</p>

<p>Tab 1 content — can contain <strong>markdown</strong>, images, code, etc.</p>

<p>tab2: Settings</p>

<p>Tab 2 content — everything is set up normally.</p>

<!-- endtabs -->
<div class="tabs-end" aria-hidden="true"></div>

<h1 id="alerts">Alerts</h1>

<h2 id="success">Success</h2>

<div class="alert alert-success">
  
<p>Congratulations! Your theme is working.</p>

</div>

<h2 id="danger">Danger</h2>

<div class="alert alert-danger">
  
<p>Danger! Do not remove this example</p>

</div>

<h2 id="warning">Warning</h2>

<div class="alert alert-warning">
  
<p>Warning! This is just an example</p>

</div>

<h1 id="charts-example">Charts example</h1>

<canvas class="chart" id="chart-sales"> </canvas>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const ctx = document.getElementById("chart-sales");
    if (!ctx) return;
    new Chart(ctx, {
      type: "bar",
      data: {
        labels: "January,February,March,April,May".split(","),
        datasets: [{
          label: "Sales",
          data: "10,13,20,25,50".split(",").map(Number),
          borderColor: "#3c7052ff",
          backgroundColor: "#3c7052ff33",
          fill: true,
          tension: 0.3,
          borderWidth: 2,
          pointRadius: 4,
          pointHoverRadius: 6
        }]
      },
      options: {
        responsive: true,
        plugins: { legend: { display: true, labels: { color: '#444444' } } },
        scales: {
          x: { ticks: { color: '#131313' }, grid: { color: '#111111' } },
          y: { ticks: { color: '#131313' }, grid: { color: '#111111' } }
        }
      }
    });
  });
</script>

<h1 id="socials-networks-links">Socials networks links</h1>

<div class="container socials">
  <div class="row"><div class="col-sm d-flex justify-content-center"><strong>.&nbsp;</strong>
      
      
        <a class="socials-link" title="youtube" href="https://www.youtube.com/@WilliamCanin" target="_blank">
          youtube
        </a><strong>&nbsp;.&nbsp;</strong>
      
        <a class="socials-link" title="github" href="https://github.com/williamcanin" target="_blank">
          github
        </a><strong>&nbsp;.&nbsp;</strong>
      
        <a class="socials-link" title="gitlab" href="https://gitlab.com/williamcanin" target="_blank">
          gitlab
        </a><strong>&nbsp;.&nbsp;</strong>
      
        <a class="socials-link" title="rubygems" href="https://rubygems.org/profiles/williamcanin" target="_blank">
          rubygems
        </a><strong>&nbsp;.&nbsp;</strong>
      
        <a class="socials-link" title="pypi" href="https://pypi.org/user/williamcanin" target="_blank">
          pypi
        </a><strong>&nbsp;.&nbsp;</strong>
      
        <a class="socials-link" title="spotify" href="https://open.spotify.com/user/williamcanin" target="_blank">
          spotify
        </a><strong>&nbsp;.&nbsp;</strong>
      
    </div>

  </div>
</div>]]></content><author><name>William Canin</name></author><category term="tools" /><category term="starter" /><category term="example" /><category term="style" /><category term="include" /><category term="chart" /><summary type="html"><![CDATA[This post demonstrates post content styles]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="https://williamcanin.github.io/blog/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2025-09-20T19:36:34+00:00</published><updated>2025-09-20T19:36:34+00:00</updated><id>https://williamcanin.github.io/blog/welcome-to-jekyll</id><content type="html" xml:base="https://williamcanin.github.io/blog/welcome-to-jekyll/"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
<span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>William Canin</name></author><category term="tools" /><category term="starter" /><category term="welcome" /><category term="jekyll" /><category term="example" /><summary type="html"><![CDATA[Welcome page]]></summary></entry><entry><title type="html">Implementando uma classe em Python para criar logs</title><link href="https://williamcanin.github.io/blog/implementando-uma-classe-em-python-para-criar-logs/" rel="alternate" type="text/html" title="Implementando uma classe em Python para criar logs" /><published>2021-06-26T23:37:43+00:00</published><updated>2021-06-26T23:37:43+00:00</updated><id>https://williamcanin.github.io/blog/implementando-uma-classe-em-python-para-criar-logs</id><content type="html" xml:base="https://williamcanin.github.io/blog/implementando-uma-classe-em-python-para-criar-logs/"><![CDATA[<nav class="toc" id="toc" data-toc-selector=".post-content" data-toc-max-level="3" data-toc-scroll-offset="20">
  <div class="toc-head">
    <h2>Índice</h2>
    <button class="toc-toggle" aria-expanded="true" type="button">Fechar</button>
  </div>
  <div class="toc-list-wrapper">
    <ul class="toc-list" role="list"></ul>
    <p class="toc-empty" style="display:none">No titles found. Remove TOC!</p>
  </div>
</nav>

<script>
(function () {
  const minLayoutWidth = 1830;

  const toc = document.getElementById('toc');
  if (toc) {
    const sentinel = document.createElement('div');
    toc.parentNode.insertBefore(sentinel, toc);

    function shouldApplyFixed() {
      return window.innerWidth > minLayoutWidth;
    }

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (shouldApplyFixed()) {
          if (!entry.isIntersecting) {
            toc.classList.add('toc-fixed');
          } else {
            toc.classList.remove('toc-fixed');
          }
        } else {
          toc.classList.remove('toc-fixed');
        }
      },
      { threshold: 0 }
    );
    observer.observe(sentinel);

    window.addEventListener('resize', () => {
        if (!shouldApplyFixed()) {
            toc.classList.remove('toc-fixed');
        }
    });
  }

  function slugify(text) {
    if (!text) return '';
    return text.toString().toLowerCase().trim()
      .normalize('NFKD').replace(/[\u0300-\u036f]/g, '')
      .replace(/[^\w\s-]/g, '').replace(/\s+/g, '-').replace(/--+/g, '-');
  }

  function buildTOC(tocEl) {
    const selector = tocEl.dataset.tocSelector || '.post-content' || '.page-content';
    const maxLevel = parseInt(tocEl.dataset.tocMaxLevel || '3', 10);
    const offset = parseInt(tocEl.dataset.tocScrollOffset || '20', 10);
    const root = document.querySelector(selector);

    if (!root) {
      tocEl.querySelector('.toc-empty').textContent = `Content not found (${selector})`;
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const headings = Array.from(root.querySelectorAll(Array(maxLevel).fill(0).map((_, i) => `h${i + 1}`).join(',')))
      .filter(h => !tocEl.contains(h))
      .filter(h => parseInt(h.tagName.substring(1)) <= maxLevel);

    if (headings.length === 0) {
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const tocRoot = tocEl.querySelector('.toc-list');
    tocRoot.innerHTML = '';

    const idCounts = {};
    headings.forEach(h => {
      if (!h.id) {
        let id = slugify(h.textContent);
        if (!id) id = 'section';
        if (idCounts[id]) { idCounts[id] += 1; id = id + '-' + idCounts[id]; }
        else idCounts[id] = 1;
        h.id = id;
      }
    });

    // Build hierarchical tree
    const stack = [{ level: 0, ul: tocRoot }];
    headings.forEach((h, i) => {
      const level = parseInt(h.tagName.substring(1));
      const li = document.createElement('li');
      const a = document.createElement('a');
      a.href = '#' + h.id;
      a.textContent = h.textContent.trim();
      a.addEventListener('click', e => {
        e.preventDefault();
        window.scrollTo({ top: h.getBoundingClientRect().top + window.scrollY - offset, behavior: 'smooth' });
        history.replaceState(null, '', '#' + h.id);

        // // Clicking on the TOC menu closes the TOC
        // const wrapper = tocEl.querySelector('.toc-list-wrapper');
        // const toggle = tocEl.querySelector('.toc-toggle');
        // wrapper.style.display = 'none';
        // toggle.setAttribute('aria-expanded', 'false');
        // toggle.textContent = '{ { include.btn_show } }';
      });
      li.appendChild(a);

      while (stack.length > 1 && level <= stack[stack.length - 1].level) stack.pop();
      const parent = stack[stack.length - 1].ul;
      parent.appendChild(li);

      const next = headings[i + 1];
      if (next) {
        const nextLevel = parseInt(next.tagName.substring(1));
        if (nextLevel > level) {
          const newUl = document.createElement('ul');
          li.appendChild(newUl);
          stack.push({ level, ul: newUl });
        }
      }
    });

    // Active Highlight
    const links = tocRoot.querySelectorAll('a');
    function onScroll() {
      const fromTop = window.scrollY + offset + 1;
      let current = headings[0];
      for (let i = 0; i < headings.length; i++) {
        if (headings[i].offsetTop <= fromTop) current = headings[i];
      }
      links.forEach(l => l.classList.toggle('active', l.getAttribute('href') === '#' + current.id));
    }
    window.addEventListener('scroll', onScroll, { passive: true });
    onScroll();
  }

  document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.toc').forEach(toc => {
      buildTOC(toc);
      const toggle = toc.querySelector('.toc-toggle');
      const wrapper = toc.querySelector('.toc-list-wrapper');

      wrapper.style.display = 'none';
      toggle.setAttribute('aria-expanded', 'false');
      toggle.textContent = 'Abrir';

      toggle.addEventListener('click', () => {
        const expanded = toggle.getAttribute('aria-expanded') === 'true';
        wrapper.style.display = expanded ? 'none' : 'block';
        toggle.setAttribute('aria-expanded', (!expanded).toString());
        toggle.textContent = expanded ? 'Abrir' : 'Fechar';
      });

      const tocTop = toc.offsetTop;

      function handleScrollFix() {
        if (window.innerWidth <= minLayoutWidth) {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.zIndex = '';
          toc.style.width = '';
          return;
        }

        const scrollTop = window.scrollY || document.documentElement.scrollTop;

        // Fixes pinning behavior in Chrome
        if (scrollTop >= tocTop) {
          toc.classList.add('fixed');
          toc.style.position = 'fixed';
          toc.style.top = '0';
          toc.style.zIndex = '9999';
          // toc.style.width = toc.offsetWidth + 'px';
        } else {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.width = '';
        }

        // // Automatically closes the TOC if it is open and scrolled to it.
        // const rect = toc.getBoundingClientRect();
        // if (rect.top <= 0 && toggle.getAttribute('aria-expanded') === 'true') {
        //   wrapper.style.display = 'none';
        //   toggle.setAttribute('aria-expanded', 'false');
        //   toggle.textContent = '{ { include.btn_show } }';
        // }
      }

      window.addEventListener('scroll', handleScrollFix, { passive: true });
      window.addEventListener('resize', handleScrollFix);
      handleScrollFix();
    });
  });
})();
</script>

<p>Olá <img src="https://media.giphy.com/media/hvRJCLFzcasrR4ia7z/giphy.gif" width="25px" />, bem vindo a mais um post no meu weblog. Vamos começar a leitura?!</p>

<h1 id="introdução">Introdução</h1>

<p>Conforme você vai avançando na programação, você vai se desafiando, e como isso criando aplicações mais complexas e com necessidade de armazenar logs. Pensando nisso, resolvi criar esse post não só pra quem vai fazer um software mais avançado, mas também serve para todos tipos de níveis de aplicação dependendo o que a mesma irá exigir.</p>

<p>Neste post você vai aprender de forma básica como criar seus logs e ainda vamos implementar de uma forma que você possa usar como módulo para outros recursos, e um extra de colorir<code class="language-plaintext highlighter-rouge">*</code> as mensagens de logs.</p>

<p><strong>E por quê eu digo aprender de forma simples?</strong></p>

<p>R:- Porque dependendo do que você tem em mente, criar um registro de log e onde irá armazenar esses logs, pode exigir que você tenha que lhe dar com permissões de usuário no diretório a ser gravado os logs (o que não é no caso que iremos abordar neste post). No Linux por exemplo, muitas aplicações registram seus logs no diretório <code class="language-plaintext highlighter-rouge">/var/logs</code>, porem, isso é uma convenção e não necessariamente você precisa registra-los nesse diretório, ou seja, vai de programador para programador.</p>

<p>Agora vamos de fato “codar” e sair dos avisos. Voilá!</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">*</code> O modo de colorir os logs deste post, só será possível se você estiver em um sistema Unix, ou seja, não é compatível com sistema Windows.</p>
</blockquote>

<h1 id="requisitos">Requisitos</h1>

<table>
  <thead>
    <tr>
      <th>Softwares</th>
      <th>Versão</th>
      <th>Onde obter?</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Python</td>
      <td>&gt;= 3.5</td>
      <td><a href="https://www.python.org/downloads/" target="_blank">Python Downloads</a></td>
    </tr>
  </tbody>
</table>

<p>E o mais importante, toda sua mega master atenção de leitura. Que eu sei que você. :D</p>

<h1 id="criando-o-módulo">Criando o módulo</h1>

<p>Bom, um módulo em Python nada mais é que um arquivo contendo seu código então vamos criar um arquivo chamado <strong>logger.py</strong>:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nb">touch </span>logger.py</code></pre></figure>

<h1 id="implementando-o-código">Implementando o código</h1>

<h2 id="imports">Imports</h2>

<p>Com o arquivo <strong>logger.py</strong> criado; tudo começa com os <code class="language-plaintext highlighter-rouge">imports</code>, então vamos fazer os imports que são 2 (dois) apenas que iremos trabalhar:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="n">logging</span>
<span class="kn">from</span> <span class="n">sys</span> <span class="kn">import</span> <span class="n">platform</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>O primeiro <em>import</em> é o de fato o mais importante que é o módulo <strong>logging</strong>, um módulo de logs nativo do Python.
O segundo, o <a href="https://docs.python.org/pt-br/3.9/library/sys.html?highlight=platform#sys.platform" target="_blank"><strong>platform</strong></a> também é um módulo nativo do Python, mas que tem uma função chamada <strong>startswith</strong>, que retorna um valor booleano através do parâmetro passado nela para verificar o tipo de plataforma do S.O.</p>

<h2 id="função-para-verificar-sistema-operacional">Função para verificar Sistema Operacional</h2>

<p>Como dito antes, iremos trabalhar com cor ANSI nos logs, mas precisamos verificar se estamos de fato em um sistema operacional que suporte isso, então vamos criar uma função “verificadora”.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">unix_color</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">platform</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">win</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">return</span> <span class="n">value</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Uma função simples, que retorna uma string vazia caso o sistema operacional seja Windows, caso contrário, me retorna o próprio valor passado no parâmetro. Este valor passado por parâmetro será nosso código ANSI de cores, que iremos implementar mais adiante.</p>

<h2 id="criando-classe-colors-para-armazenar-cores-ansi">Criando classe <code class="language-plaintext highlighter-rouge">Colors</code> para armazenar cores ANSI</h2>

<p>Agora chegou a hora de criarmos uma classe que irá armazenar nossas cores ANSI, essa classe terá apenas variáveis de classe:</p>

<blockquote>
  <p>Criei um vídeo no <strong>YouTube</strong>, explicando como podemos criar um módulo para imprimir mensagens coloridas com Python. Se você não visualizou vale a pena olhar, pois este código é um pequeno trecho que tirei deste vídeo. Você pode acessa-ló <a href="https://www.youtube.com/watch?v=VW-UphhjJ3E&amp;feature=emb_imp_woyt" target="_blank">clicando aqui</a></p>
</blockquote>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="k">class</span> <span class="nc">Colors</span><span class="p">:</span>
    <span class="n">NONE</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[0m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">BLACK</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[30m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">MAGENTA</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[95m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">BLUE</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[94m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">GREEN</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[92m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">RED</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[91m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">YELLOW</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[93m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">CYAN</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[96m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">WHITE</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[97m</span><span class="sh">"</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Repare que criei variáveis de classe, e os valores que elas estão recebendo está sendo atribuindo pela função <strong>unix_color</strong> que criamos assim, ou seja, se o sistema operacional for UNIX, irá retornar o parâmetro passado na função, nas variáveis de classe.</p>

<p>Criei apenas alguns opções de cores e estilos ANSI, mas você pode implementar mais acessando este <a href="https://en.wikipedia.org/wiki/ANSI_escape_code" target="_blank">documento</a> que contem explicações mais detalhas sobre cores ANSI.</p>

<blockquote>
  <p>NOTA: Tem como utilizar cores para Windows como a biblioteca <a href="https://pypi.org/project/colorama" target="_blank"><strong>colorama</strong></a> por exemplo, porem, está forma é reconhecida apenas por sistemas baseado em UNIX (Linux e OS X).</p>
</blockquote>

<h2 id="criando-classe-de-logs">Criando classe de logs</h2>

<p>Vamos começar de fato a criar nossa classe de <strong>logs</strong>, onde será uma classe que irá herdar da classe <strong>Colors</strong>:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="k">class</span> <span class="nc">Logs</span><span class="p">(</span><span class="n">Colors</span><span class="p">):</span>

    <span class="n">FILENAME</span> <span class="o">=</span> <span class="sh">"</span><span class="s">app.log</span><span class="sh">"</span>
    <span class="n">DATE_FORMAT</span> <span class="o">=</span> <span class="sh">"</span><span class="s">%m/%d/%Y %I:%M:%S %p</span><span class="sh">"</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Repare que temos 2 (duas) variáveis de classe, a <strong>FILENAME</strong>, que recebe o nome com path (neste caso sem nenhum path) do arquivo de log que irá ser criado, e o <strong>DATE_FORMAT</strong>, que será o formato da data a ser gravada nos logs. Você irá entender mais dessas duas variáveis de classe a seguir no método <strong>dander init</strong> (<code class="language-plaintext highlighter-rouge">__init__</code>).</p>

<h2 id="método-inicializador-construtor">Método inicializador (“construtor”)</h2>

<p>No método <strong>dander init</strong> (<code class="language-plaintext highlighter-rouge">__init__</code>), vamos implementar a base do formato do nosso registrador de logs. Então, o método será assim:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">filename</span><span class="o">=</span><span class="n">FILENAME</span><span class="p">,</span> <span class="n">datefmt</span><span class="o">=</span><span class="n">DATE_FORMAT</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">filename</span> <span class="o">=</span> <span class="n">filename</span>
        <span class="n">self</span><span class="p">.</span><span class="n">date_format</span> <span class="o">=</span> <span class="n">datefmt</span>
        <span class="n">self</span><span class="p">.</span><span class="n">formated</span> <span class="o">=</span> <span class="sh">"</span><span class="s">%(levelname)s:[%(asctime)s]: %(message)s</span><span class="sh">"</span>

        <span class="n">self</span><span class="p">.</span><span class="n">levels</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">exception</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">exception</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">info</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">info</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">warning</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">warning</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">error</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">debug</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">debug</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">critical</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">critical</span>
        <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Analisando nosso <code class="language-plaintext highlighter-rouge">__init__</code>, temos 2 (dois) parâmetros no mesmo, o <code class="language-plaintext highlighter-rouge">filename</code> e <code class="language-plaintext highlighter-rouge">datefmt</code>. O <code class="language-plaintext highlighter-rouge">filaname</code> está recebendo por padrão, o valor da  variável de classe <strong>FILENAME</strong>, assim como o <code class="language-plaintext highlighter-rouge">datefmt</code> também. Implementamos essas parâmetros justamente para o programador mudar o local de onde o registro de logs será salvo e caso queira mudar o formato da data conforme a localidade em que está.</p>

<p>O <code class="language-plaintext highlighter-rouge">self.formated</code>, está recebendo um <a href="https://docs.python.org/pt-br/3.9/library/logging.html?highlight=logging#formatter-objects" target="_blank">formato</a> em que o módulo <code class="language-plaintext highlighter-rouge">logging</code> do Python suporta. Ele pode ter outras opções, mas neste nosso caso implementamos 3, que são:</p>

<ul>
  <li>levelname - Registra o level do log.</li>
  <li>asctime - Registra a data e hora do log.</li>
  <li>message - Registra uma mensagem que será passada por parâmetro.</li>
</ul>

<p>O <code class="language-plaintext highlighter-rouge">self.levels</code> é um dicionário que está carregando os levels de log do módulo <code class="language-plaintext highlighter-rouge">logging</code>, é muito importante observar que estamos carregando os levels sem ser <strong>Callable</strong>.</p>

<h2 id="método-de-registrar-os-logs">Método de registrar os logs</h2>

<p>Agora começa a nossa brincadeira, esté método que será responsável por armazenar toda nossa lógica para registrar os logs.</p>

<p>Vou implementar ele, e abaixo dele vou explicar o que cada condição e lógica faz:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">record</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">exc_info</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="sh">"</span><span class="s">exception</span><span class="sh">"</span><span class="p">,</span> <span class="n">colorize</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
          <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">levels</span><span class="p">.</span><span class="nf">keys</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">item</span> <span class="o">==</span> <span class="nb">type</span><span class="p">:</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">colorize</span><span class="p">:</span>
                    <span class="n">formated</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">formated</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">item</span> <span class="o">==</span> <span class="sh">"</span><span class="s">warning</span><span class="sh">"</span><span class="p">:</span>
                        <span class="n">formated</span> <span class="o">=</span> <span class="p">(</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">YELLOW</span><span class="si">}</span><span class="s">%(levelname)s:</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">GREEN</span><span class="si">}</span><span class="s">[%(asctime)s]</span><span class="sh">"</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">NONE</span><span class="si">}</span><span class="s">: %(message)s</span><span class="sh">"</span>
                        <span class="p">)</span>
                    <span class="k">elif</span> <span class="n">item</span> <span class="o">==</span> <span class="sh">"</span><span class="s">error</span><span class="sh">"</span> <span class="ow">or</span> <span class="n">item</span> <span class="o">==</span> <span class="sh">"</span><span class="s">exception</span><span class="sh">"</span><span class="p">:</span>
                        <span class="n">formated</span> <span class="o">=</span> <span class="p">(</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">RED</span><span class="si">}</span><span class="s">%(levelname)s:</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">GREEN</span><span class="si">}</span><span class="s">[%(asctime)s]</span><span class="sh">"</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">NONE</span><span class="si">}</span><span class="s">: %(message)s</span><span class="sh">"</span>
                        <span class="p">)</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">formated</span> <span class="o">=</span> <span class="p">(</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">CYAN</span><span class="si">}</span><span class="s">%(levelname)s:</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">GREEN</span><span class="si">}</span><span class="s">[%(asctime)s]</span><span class="sh">"</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">NONE</span><span class="si">}</span><span class="s">: %(message)s</span><span class="sh">"</span>
                        <span class="p">)</span>
                <span class="n">logging</span><span class="p">.</span><span class="nf">basicConfig</span><span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">filename</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="n">formated</span><span class="p">,</span>
                                    <span class="n">datefmt</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">date_format</span><span class="p">,</span> <span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="p">.</span><span class="n">INFO</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">item</span> <span class="o">==</span> <span class="sh">"</span><span class="s">exception</span><span class="sh">"</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">levels</span><span class="p">[</span><span class="n">item</span><span class="p">](</span><span class="n">msg</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">exc_info</span><span class="o">=</span><span class="n">exc_info</span><span class="p">,</span>
                                             <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">levels</span><span class="p">[</span><span class="n">item</span><span class="p">](</span><span class="n">msg</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span>
            <span class="sa">f</span><span class="sh">'</span><span class="s">Error implementing the method </span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">record</span><span class="p">.</span><span class="n">__name__</span><span class="si">}</span><span class="sh">"</span><span class="s"> in class Logs.</span><span class="sh">'</span>
            <span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="na-linha-1-à-2">Na linha <code class="language-plaintext highlighter-rouge">1</code> à <code class="language-plaintext highlighter-rouge">2</code></h3>

<p>Podemos observar que temos alguns parâmetros no método <code class="language-plaintext highlighter-rouge">record</code>, eles são:</p>

<ul>
  <li>message - Este parâmetro é obrigatório, é nele que iremos colocar nossa mensagem de log.</li>
  <li>type - Este parâmetro nomeado está como padrão o valor de uma string <strong>exception</strong>, isso significa que quando formos criar um log, se não especificarmos o level que queremos de acordo com nosso dicionário <code class="language-plaintext highlighter-rouge">self.levels</code>, irá ser registrado no level <code class="language-plaintext highlighter-rouge">exception</code>.</li>
  <li>colorize - Parâmetro booleano que se estiver <code class="language-plaintext highlighter-rouge">True</code>, nossos logs serão coloridos.</li>
</ul>

<blockquote>
  <p>NOTA: O log só será mostrado colorido se carregarmos o arquivo de log pelo terminal, então, tenha em mente que se usar cores, será chato ler esse arquivo em um editor de texto, por exemplo.</p>
</blockquote>

<p>Os parâmetros <strong>exc_info</strong>, <strong>*args</strong> e <strong>**kwargs</strong>, estão sendo implementados porque as funções de level do módulo <code class="language-plaintext highlighter-rouge">logging</code>, <strong>exception</strong> e <strong>error</strong>, contem esses parâmetro também, e como nosso método <code class="language-plaintext highlighter-rouge">record</code> está sendo implementado em cima dessas funções de level, é necessário atribuir os mesmos argumentos.</p>

<h3 id="na-linha-3-à-4">Na linha <code class="language-plaintext highlighter-rouge">3</code> à <code class="language-plaintext highlighter-rouge">4</code></h3>

<p>Fazemos um <code class="language-plaintext highlighter-rouge">for</code> e nele contendo nossa primeira condição de <code class="language-plaintext highlighter-rouge">if</code>, que faz uma atribuição de igualdade do tipo de level que irá ser usado através do parâmetro <code class="language-plaintext highlighter-rouge">type</code>.</p>

<h3 id="na-linha-5-à-22">Na linha <code class="language-plaintext highlighter-rouge">5</code> à <code class="language-plaintext highlighter-rouge">22</code></h3>

<p>Fazemos outra condição <code class="language-plaintext highlighter-rouge">if</code>, porem booleana. Se o parâmetro <code class="language-plaintext highlighter-rouge">colorize</code> for <strong>False</strong>, então carregamos o formado padrão do nosso log especificado no método <code class="language-plaintext highlighter-rouge">__init__</code>, ou seja, carregamos o <code class="language-plaintext highlighter-rouge">self.formated</code>. Caso a condição seja <code class="language-plaintext highlighter-rouge">else</code>, carregamos outra condição de igualdade para verificar os levels e atribuir cores diferentes para cada um deles. Por exemplo, o level de <strong>Warning</strong> receberá a cor <em>amarela</em>, o de <strong>Error</strong> e <strong>Exception</strong>, a cor <em>vermelha</em>, já o de <strong>Debug</strong>, <strong>Info</strong> e demais, receberão a cor <em>cyan</em>.</p>

<h3 id="na-linha-23-à-24">Na linha <code class="language-plaintext highlighter-rouge">23</code> à <code class="language-plaintext highlighter-rouge">24</code></h3>

<p>Aqui estamos aplicando as configuração básicas para nosso registro de logs através da função <code class="language-plaintext highlighter-rouge">basicConfig</code> do módulo <code class="language-plaintext highlighter-rouge">logging</code>. Repara que temos o parâmetro <code class="language-plaintext highlighter-rouge">level</code> e estamos passando o level <code class="language-plaintext highlighter-rouge">INFO</code>. Precisamos passando algum level para este parâmetro, senão não conseguimos criar nossos registros de log.</p>

<h3 id="na-linha-25-à-29">Na linha <code class="language-plaintext highlighter-rouge">25</code> à <code class="language-plaintext highlighter-rouge">29</code></h3>

<p>Nessas linhas estamos pegando os levels do meu dicionário e aplicando um <em>Callable</em> com os parâmetros necessários. Estamos atribuindo uma condição e, se for do level <strong>exception</strong>, irá carregar um parâmetro a mais, o <code class="language-plaintext highlighter-rouge">exc_info</code>.</p>

<h3 id="na-linha-30-à-32">Na linha <code class="language-plaintext highlighter-rouge">30</code> à <code class="language-plaintext highlighter-rouge">32</code></h3>

<p>Caso aconteça de não cair em nenhum retorno (<code class="language-plaintext highlighter-rouge">return</code>) irá disparar uma <strong>raise</strong> que imprimirá uma mensagem ao usuário de erro de implementação do método.</p>

<h2 id="código-completo">Código completo</h2>

<p>Depois de destrinchar nosso código por partes, obtemos o seguinte resultado do mesmo completo:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="n">logging</span>
<span class="kn">from</span> <span class="n">sys</span> <span class="kn">import</span> <span class="n">platform</span>


<span class="k">def</span> <span class="nf">unix_color</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">platform</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">win</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">return</span> <span class="n">value</span>


<span class="k">class</span> <span class="nc">Colors</span><span class="p">:</span>
    <span class="n">NONE</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[0m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">BLACK</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[30m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">MAGENTA</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[95m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">BLUE</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[94m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">GREEN</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[92m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">RED</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[91m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">YELLOW</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[93m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">CYAN</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[96m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">WHITE</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[97m</span><span class="sh">"</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">Logs</span><span class="p">(</span><span class="n">Colors</span><span class="p">):</span>

    <span class="n">FILENAME</span> <span class="o">=</span> <span class="sh">"</span><span class="s">mylogs.log</span><span class="sh">"</span>
    <span class="n">DATE_FORMAT</span> <span class="o">=</span> <span class="sh">"</span><span class="s">%m/%d/%Y %I:%M:%S %p</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">filename</span><span class="o">=</span><span class="n">FILENAME</span><span class="p">,</span> <span class="n">datefmt</span><span class="o">=</span><span class="n">DATE_FORMAT</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">filename</span> <span class="o">=</span> <span class="n">filename</span>
        <span class="n">self</span><span class="p">.</span><span class="n">date_format</span> <span class="o">=</span> <span class="n">datefmt</span>
        <span class="n">self</span><span class="p">.</span><span class="n">formated</span> <span class="o">=</span> <span class="sh">"</span><span class="s">%(levelname)s:[%(asctime)s]: %(message)s</span><span class="sh">"</span>

        <span class="n">self</span><span class="p">.</span><span class="n">levels</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">exception</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">exception</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">info</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">info</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">warning</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">warning</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">error</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">debug</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">debug</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">critical</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">critical</span>
        <span class="p">}</span>

    <span class="k">def</span> <span class="nf">record</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">exc_info</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="sh">"</span><span class="s">exception</span><span class="sh">"</span><span class="p">,</span> <span class="n">colorize</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
               <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">levels</span><span class="p">.</span><span class="nf">keys</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">item</span> <span class="o">==</span> <span class="nb">type</span><span class="p">:</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">colorize</span><span class="p">:</span>
                    <span class="n">formated</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">formated</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">item</span> <span class="o">==</span> <span class="sh">"</span><span class="s">warning</span><span class="sh">"</span><span class="p">:</span>
                        <span class="n">formated</span> <span class="o">=</span> <span class="p">(</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">YELLOW</span><span class="si">}</span><span class="s">%(levelname)s:</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">GREEN</span><span class="si">}</span><span class="s">[%(asctime)s]</span><span class="sh">"</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">NONE</span><span class="si">}</span><span class="s">: %(message)s</span><span class="sh">"</span>
                        <span class="p">)</span>
                    <span class="k">elif</span> <span class="n">item</span> <span class="o">==</span> <span class="sh">"</span><span class="s">error</span><span class="sh">"</span> <span class="ow">or</span> <span class="n">item</span> <span class="o">==</span> <span class="sh">"</span><span class="s">exception</span><span class="sh">"</span><span class="p">:</span>
                        <span class="n">formated</span> <span class="o">=</span> <span class="p">(</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">RED</span><span class="si">}</span><span class="s">%(levelname)s:</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">GREEN</span><span class="si">}</span><span class="s">[%(asctime)s]</span><span class="sh">"</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">NONE</span><span class="si">}</span><span class="s">: %(message)s</span><span class="sh">"</span>
                        <span class="p">)</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">formated</span> <span class="o">=</span> <span class="p">(</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">CYAN</span><span class="si">}</span><span class="s">%(levelname)s:</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">GREEN</span><span class="si">}</span><span class="s">[%(asctime)s]</span><span class="sh">"</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">NONE</span><span class="si">}</span><span class="s">: %(message)s</span><span class="sh">"</span>
                        <span class="p">)</span>
                <span class="n">logging</span><span class="p">.</span><span class="nf">basicConfig</span><span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">filename</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="n">formated</span><span class="p">,</span>
                                    <span class="n">datefmt</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">date_format</span><span class="p">,</span> <span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="p">.</span><span class="n">INFO</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">item</span> <span class="o">==</span> <span class="sh">"</span><span class="s">exception</span><span class="sh">"</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">levels</span><span class="p">[</span><span class="n">item</span><span class="p">](</span><span class="n">msg</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">exc_info</span><span class="o">=</span><span class="n">exc_info</span><span class="p">,</span>
                                             <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">levels</span><span class="p">[</span><span class="n">item</span><span class="p">](</span><span class="n">msg</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span>
            <span class="sa">f</span><span class="sh">'</span><span class="s">Error implementing the method </span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">record</span><span class="p">.</span><span class="n">__name__</span><span class="si">}</span><span class="sh">"</span><span class="s"> in class Logs.</span><span class="sh">'</span>
        <span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="como-usar">Como usar?</h2>

<p>Para fazer o uso é muito fácil, apenas instancie a classe e passe os parâmetros necessários, e chamando a criação de logs através de <strong>try/except</strong>.</p>

<p>Vamos fazer isso em um arquivo externo, criando com o nome de <strong>setup.py</strong> no mesmo diretório do <strong>logger.py</strong>:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nb">touch </span>setup.py</code></pre></figure>

<p>Agora vamos popular esse arquivo com o seguinte código:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="kn">from</span> <span class="n">logger</span> <span class="kn">import</span> <span class="n">Logs</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">logs</span> <span class="o">=</span> <span class="nc">Logs</span><span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="sh">"</span><span class="s">calcs.log</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">n1</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Digite o dividendo: </span><span class="sh">"</span><span class="p">))</span>
        <span class="n">n2</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Digite o divisor: </span><span class="sh">"</span><span class="p">))</span>
        <span class="n">result</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">O quociente é: </span><span class="si">{</span><span class="n">n1</span> <span class="o">/</span> <span class="n">n2</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">logs</span><span class="p">.</span><span class="nf">record</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="sh">"</span><span class="s">info</span><span class="sh">"</span><span class="p">,</span> <span class="n">colorize</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">ZeroDivisionError</span> <span class="k">as</span> <span class="n">text</span><span class="p">:</span>
        <span class="n">logs</span><span class="p">.</span><span class="nf">record</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">colorize</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">raise</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Observe que está sendo atribuindo o registro de logs no <strong>try</strong> e no <strong>except</strong> porem, cada um deles com suas características.</p>

<p>No <strong>try</strong>, está sendo registrado um log apenas de informação, passando o valor <strong>info</strong> para parâmetro <code class="language-plaintext highlighter-rouge">type</code>, onde a mensagem gravada é o resultado da divisão.</p>

<p>No <strong>exception</strong>, não temos o parâmetro <code class="language-plaintext highlighter-rouge">type</code> porque será registrado uma exceção de erro, e o valor de <code class="language-plaintext highlighter-rouge">type</code> por padrão é uma <em>exception</em>. Esta sendo gravado o texto de erro por divisão por zero (que não existe). Também usamos a palavrão <code class="language-plaintext highlighter-rouge">raise</code>, para estourar o erro na tela também. Se tirarmos, apenas registrará o log.</p>

<h2 id="conclusão">Conclusão</h2>

<p>Esse foi um simples post com intuito de te dar um base de orientação sobre gravar registros de logs com Python. Lembre-se que isso não é tudo, você pode ver mais detalhes na documentação. Você pode acessar nos links abaixo que vou deixar. Espero que tenha gostado e até a próxima. :)</p>

<blockquote>
  <p>Nota: Sempre veja a versão da documentação antes de estudar.</p>
</blockquote>

<p><strong>Documentação:</strong></p>

<ul>
  <li><a href="https://docs.python.org/pt-br/3/library/logging.html">https://docs.python.org/pt-br/3/library/logging.html</a></li>
</ul>]]></content><author><name>William C. Canin</name></author><category term="python" /><category term="logs" /><summary type="html"><![CDATA[Como criar logs utilizando Python? Talvez foi isso que você procurou na internet, e se está lendo, talvez você possa ter encontrado o que pesquisou]]></summary></entry><entry><title type="html">Video - Criando módulo para colorir print e input no Python</title><link href="https://williamcanin.github.io/blog/criando-modulo-para-colorir-print-e-input-no-python/" rel="alternate" type="text/html" title="Video - Criando módulo para colorir print e input no Python" /><published>2019-12-11T02:32:01+00:00</published><updated>2019-12-11T02:32:01+00:00</updated><id>https://williamcanin.github.io/blog/criando-modulo-para-colorir-print-e-input-no-python</id><content type="html" xml:base="https://williamcanin.github.io/blog/criando-modulo-para-colorir-print-e-input-no-python/"><![CDATA[<p>Olá, este post você irá entender um pouco do conceito de sequências de escape (ANSI Code) e aprender a criar um módulo em <a href="https://python.org" target="_blank"><strong>Python</strong></a> deixando as cores do terminal (sistemas baseado em <strong>UNIX</strong>) coloridas. É claro que você pode implementar mais coisas para este módulo, porém esse é apenas um conceito básico de como o poder de sua criação pode criar coisas bacanas com Python ;)</p>

<p>Acesse a playlist abaixo. Voilá!</p>

<div class="video-wrapper">
  <iframe src="https://www.youtube.com/embed/VW-UphhjJ3E?si=PPdXSrMvJHmu00S_" title="Criando módulo para colorir" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
  </iframe>
  <noscript>
    <p>The video is not available for embedding. Watch it on <a href="https://www.youtube.com/embed/VW-UphhjJ3E?si=PPdXSrMvJHmu00S_" target="_blank">YouTube</a>.
    </p>
  </noscript>
</div>]]></content><author><name>William C. Canin</name></author><category term="python" /><category term="video" /><summary type="html"><![CDATA[Aprenda a criar um módulo para color as funções print e input no Python de forma nativa utilizando Ansi Code.]]></summary></entry><entry><title type="html">Como encurtar URL Raw do Github e ter uma url personalizada</title><link href="https://williamcanin.github.io/blog/como-encurtar-url-raw-do-github-e-ter-uma-url-personalizada/" rel="alternate" type="text/html" title="Como encurtar URL Raw do Github e ter uma url personalizada" /><published>2019-10-20T16:49:01+00:00</published><updated>2019-10-20T16:49:01+00:00</updated><id>https://williamcanin.github.io/blog/como-encurtar-url-raw-do-github-e-ter-uma-url-personalizada</id><content type="html" xml:base="https://williamcanin.github.io/blog/como-encurtar-url-raw-do-github-e-ter-uma-url-personalizada/"><![CDATA[<p>Olá, tudo joinha? nesse post vou demonstrar como você pode deixar as urls RAW no <a href="https://github.com" target="_blank"><strong>Github</strong></a> bem mais encurtadas e eficientes. Vamos lá.</p>

<p>Primeiro você precisa do <a href="https://curl.haxx.se/" target="_blank"><strong>curl</strong></a> na sua máquina, pois vamos precisar dele para realizar uma façanha. _</p>

<blockquote>
  <p>Nota: _O <a href="https://curl.haxx.se/" target="_blank"><strong>curl</strong></a> está disponível praticamente em todos sistemas operacionais. Sinta-se a vontade para instalar o mesmo da maneira que mais lhe convém.</p>
</blockquote>

<p>Agora precisamos usar o serviço de encurtamento de url que a própria <a href="https://github.com" target="_blank"><strong>Github</strong></a> fornece, que é o <a href="https://git.io" target="_blank"><strong>Git.io</strong></a>. Se você encurtar suas URL’s através do site, a URL encurtada terá um <strong>code</strong> de “<em>sopa de letrinhas</em>” automaticamente escolhida pelo serviço. Por exemplo:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git.io/abcdef123456
</code></pre></div></div>

<p><strong>Como faço para ter uma url personalizada com o git.io?</strong></p>

<p><em>Essa é uma pergunta muito fácil, mande outra mais difícil</em>.</p>

<p>Ta bem, eu respondo… a resposta é: <strong>curl</strong>! No qual foi requisitado acima. Ele quem faz esse trabalho.</p>

<p>A sintaxe para o encurtamento de URL com nome personalizável é:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>curl <span class="nt">-i</span> https://git.io <span class="nt">-F</span> <span class="s2">"url=**URL_ORIGINAL_RAW**"</span> <span class="nt">-F</span> <span class="s2">"code=**NOME_DESEJADO**"</span></code></pre></figure>

<ul>
  <li>
    <p>Onde em <strong>URL_ORIGINAL_RAW</strong> você deve colocar a URL original Raw completa, incluindo o http ou https.</p>
  </li>
  <li>
    <p>Onde em <strong>NOME_DESEJADO</strong> você deve escolher um nome/código para sua URL.</p>
  </li>
</ul>

<blockquote>
  <p>Nota: Em <strong>NOME_DESEJADO</strong>, o mesmo deve ser único, ou seja, você tem que escolher um nome/código que ninguem escolheu ainda. Para saber disso, simplesmente execute o comando, e veja se na saída obteve sucesso, ou não.</p>
</blockquote>

<p>Vamos a um exemplo:</p>

<p><strong>Exemplo de encurtamento:</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>curl <span class="nt">-i</span> https://git.io <span class="nt">-F</span> <span class="s2">"url=https://raw.githubusercontent.com/my_user/my_project/master/scriptizinho.py"</span> <span class="nt">-F</span> <span class="s2">"code=**scriptizinho**"</span></code></pre></figure>

<p><strong>Exemplo de saída do encurtamento:</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre>HTTP/1.1 201 Created
Server: Cowboy
Connection: keep-alive
Date: Sun, 20 Oct 2019 14:20:01 GMT
Status: 201 Created
Content-Type: text/html<span class="p">;</span><span class="nv">charset</span><span class="o">=</span>utf-8
Location: https://git.io/scriptizinho
Content-Length: 94
X-Xss-Protection: 1<span class="p">;</span> <span class="nv">mode</span><span class="o">=</span>block
X-Content-Type-Options: nosniff
X-Frame-Options: SAMEORIGIN
X-Runtime: 0.009777
X-Node: 836916c6-b665-4105-9926-2f6f6c1d3cc4
X-Revision: 392798d237fc1aa5cd55cada10d2945773e741a8
Strict-Transport-Security: max-age<span class="o">=</span>31536000<span class="p">;</span> includeSubDomains
Via: 1.1 vegur

https://raw.githubusercontent.com/my_user/my_project/master/scriptizinho.py
</pre></td></tr></tbody></table></code></pre></figure>

<p>Caso de tudo certo, você terá uma saída parecida com essa acima, onde já na primeira linha o resultado é <strong>Created</strong>. Em <strong>Location</strong>, você pode ver sua <strong>nova</strong> URL personalizada.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://git.io/scriptizinho
</code></pre></div></div>

<p>Você também pode ignorar a url personalizada e deixar que o serviço escolha um <strong>code</strong> automaticamente para você, para isso remova a opção <strong>-F “code=”</strong> do comando.</p>

<p>Exemplo:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>curl <span class="nt">-i</span> https://git.io <span class="nt">-F</span> <span class="s2">"url=https://raw.githubusercontent.com/my_user/my_project/master/scriptizinho.py"</span></code></pre></figure>

<p>Saida do comando:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 201 Created
...
Location: https://git.io/dfsds4r
...
</code></pre></div></div>

<p>Eu fico por aqui, espero que eu tenha te ajudado. Abraços</p>]]></content><author><name>William C. Canin</name></author><category term="github" /><category term="git" /><category term="url" /><category term="shortener" /><summary type="html"><![CDATA[Cansado de compartilhar URL Raw do Github compridas? Lendo essa postagem você vai contornar isso.]]></summary></entry><entry><title type="html">Video - Manipulando arquivo JSON com Python.</title><link href="https://williamcanin.github.io/blog/manipulando-arquivo-json-com-python/" rel="alternate" type="text/html" title="Video - Manipulando arquivo JSON com Python." /><published>2019-09-02T21:31:46+00:00</published><updated>2019-09-02T21:31:46+00:00</updated><id>https://williamcanin.github.io/blog/manipulando-arquivo-json-com-python</id><content type="html" xml:base="https://williamcanin.github.io/blog/manipulando-arquivo-json-com-python/"><![CDATA[<p>Olá pessoa, este será um post para compartilhar uma minissérie de vídeo sobre a manipulação de
arquivo JSON com Python.</p>

<p>Abaixo você terá acesso a playlist que criei sobre esse feito, dê uma olhada. Abraços.</p>

<div class="video-wrapper">
  <iframe src="https://www.youtube.com/embed/videoseries?list=PLZ6kIzk4n3uRmlJUAIwTLqMIIcgaR3uPa" title="Manipulando arquivo JSON com Python" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
  </iframe>
  <noscript>
    <p>The video is not available for embedding. Watch it on <a href="https://www.youtube.com/embed/videoseries?list=PLZ6kIzk4n3uRmlJUAIwTLqMIIcgaR3uPa" target="_blank">YouTube</a>.
    </p>
  </noscript>
</div>]]></content><author><name>William C. Canin</name></author><category term="python" /><category term="json" /><category term="video" /><summary type="html"><![CDATA[Esse post incluíra uma série de vídeos falando como manipular arquivo JSON com Python.]]></summary></entry><entry><title type="html">Corrigindo erro de chaves no Arch Linux</title><link href="https://williamcanin.github.io/blog/corrigindo-erro-de-chaves-no-archlinux/" rel="alternate" type="text/html" title="Corrigindo erro de chaves no Arch Linux" /><published>2019-03-07T12:13:17+00:00</published><updated>2019-03-07T12:13:17+00:00</updated><id>https://williamcanin.github.io/blog/corrigindo-erro-de-chaves-no-archlinux</id><content type="html" xml:base="https://williamcanin.github.io/blog/corrigindo-erro-de-chaves-no-archlinux/"><![CDATA[<p>Se alguma vez você se deparou com erro de chaves públicas ao instalar um pacote no Arch Linux e não soube como resolver,então talvez essa dica abaixo pode te ajudar.</p>

<p>Abaixo você pode perceber que tentei instalar o pacote <a href="https://aur.archlinux.org/packages/spotify" target="_blank">spotify</a> no meu <a href="https://archlinux.org" target="_blank">Arch Linux</a> através do repositório AUR com o <a href="https://aur.archlinux.org/packages/yay/" target="_blank">yay</a>, e me retornou um erro de chave pública.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="code"><pre>  william at archlinux <span class="k">in </span>folder ~ <span class="o">(</span>python-3.7.4<span class="o">)</span> ○
 ⇨ yay <span class="nt">-S</span> spotify <span class="nt">--nodiffmenu</span> <span class="nt">--noeditmenu</span> <span class="nt">--noupgrademenu</span>
:: There are 5 providers available <span class="k">for </span>spotify:
:: Repository AUR
    1<span class="o">)</span> spotify 2<span class="o">)</span> spotify-dev 3<span class="o">)</span> spotify-legacy 4<span class="o">)</span> spotify094 5<span class="o">)</span> spotio

Enter a number <span class="o">(</span><span class="nv">default</span><span class="o">=</span>1<span class="o">)</span>: 1
:: Checking <span class="k">for </span>conflicts...
:: Checking <span class="k">for </span>inner conflicts...
<span class="o">[</span>Aur: 1]  spotify-1:1.1.10.546-1

  1 spotify                                  <span class="o">(</span>Build Files Exist<span class="o">)</span>
<span class="o">==&gt;</span> Packages to cleanBuild?
<span class="o">==&gt;</span> <span class="o">[</span>N]one <span class="o">[</span>A]ll <span class="o">[</span>Ab]ort <span class="o">[</span>I]nstalled <span class="o">[</span>No]tInstalled or <span class="o">(</span>1 2 3, 1-3, ^4<span class="o">)</span>
<span class="o">==&gt;</span> N
:: PKGBUILD up to <span class="nb">date</span>, Skipping <span class="o">(</span>1/1<span class="o">)</span>: spotify
:: Parsing SRCINFO <span class="o">(</span>1/1<span class="o">)</span>: spotify
<span class="o">==&gt;</span> Criando o pacote: spotify 1:1.1.10.546-1 <span class="o">(</span>dom 11 ago 2019 11:11:33 <span class="nt">-03</span><span class="o">)</span>
<span class="o">==&gt;</span> Obtendo fontes...
  -&gt; Encontrado spotify.protocol
  -&gt; Encontrado LICENSE
  -&gt; Encontrado spotify-1.1.10.546-Release
  -&gt; Encontrado spotify-1.1.10.546-Release.sig
  -&gt; Encontrado spotify-1.1.10.546-x86_64.deb
  -&gt; Encontrado spotify-1.1.10.546-x86_64-Packages
<span class="o">==&gt;</span> Validando <span class="nb">source </span>arquivos com sha512sums...
    spotify.protocol ... Passou
    LICENSE ... Passou
    spotify-1.1.10.546-Release ... Ignorada
    spotify-1.1.10.546-Release.sig ... Ignorada
<span class="o">==&gt;</span> Validando source_x86_64 arquivos com sha512sums...
    spotify-1.1.10.546-x86_64.deb ... Passou
    spotify-1.1.10.546-x86_64-Packages ... Passou
<span class="o">==&gt;</span> Verificando assinatura de arquivo fonte com gpg...
    spotify-1.1.10.546-Release ... FALHOU <span class="o">(</span>chave pública inválida 2EBF997C15BDA244B6EBF5D84773BD5E130D1D45<span class="o">)</span>
<span class="o">==&gt;</span> ERRO: Uma ou mais assinaturas PGP não puderam ser verificadas!
Error downloading sources: spotify

  william at archlinux <span class="k">in </span>folder ~ <span class="o">(</span>python-3.7.4<span class="o">)</span>
 ⇨
</pre></td></tr></tbody></table></code></pre></figure>

<p>Observe que ao final do comando me retornou a chave que está dando problema, nesse caso é a chave <strong>2EBF997C15BDA244B6EBF5D84773BD5E130D1D45</strong>. É essa chave que vamos adicionar.</p>

<p>Para corrigir erros de chave no Arch Linux, você usará o comando <code class="language-plaintext highlighter-rouge">pacman-key</code>. Veja abaixo como adicionar uma chave no ficheiro do seu Arch Linux.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sudo </span>pacman-key <span class="nt">-r</span> 2EBF997C15BDA244B6EBF5D84773BD5E130D1D45
<span class="nb">sudo </span>pacman-key <span class="nt">--lsign-key</span> 2EBF997C15BDA244B6EBF5D84773BD5E130D1D45
<span class="nb">sudo </span>pacman-key <span class="nt">--refresh-keys</span></code></pre></figure>

<p>Após executar todos comando acima, você deve repetir o processo de instalação do pacote novamente com o seguinte comando no <code class="language-plaintext highlighter-rouge">yay</code>:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">yay <span class="nt">-S</span> spotify <span class="nt">--nodiffmenu</span> <span class="nt">--noeditmenu</span></code></pre></figure>

<p>Caso o erro de chave persista mesmo você fazendo os passos acima, dê uma olhada nos comentários da página do pacote para ver se o erro é do desenvolvedor. Nesse caso, você pode instalar qualquer pacote do AUR com erros de chaves ignorando a assinatura PGP com o comando abaixo:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">yay <span class="nt">-S</span> <span class="nt">--mflags</span> <span class="nt">--skipinteg</span> spotify</code></pre></figure>

<p>Até a próxima ;)</p>]]></content><author><name>William C. Canin</name></author><category term="archlinux" /><category term="keys" /><summary type="html"><![CDATA[Você já deve ter se deparado com problemas de chaves públicas ao instalar um pacote no Arch Linux, certo? Pois esse post de dica rápida pode ajudar a você a resolver isso.]]></summary></entry><entry><title type="html">Transações no banco de dados através do Shell script</title><link href="https://williamcanin.github.io/blog/transacoes-no-banco-de-dados-atraves-do-shellscript/" rel="alternate" type="text/html" title="Transações no banco de dados através do Shell script" /><published>2018-08-28T08:23:33+00:00</published><updated>2018-08-28T08:23:33+00:00</updated><id>https://williamcanin.github.io/blog/transacoes-no-banco-de-dados-atraves-do-shellscript</id><content type="html" xml:base="https://williamcanin.github.io/blog/transacoes-no-banco-de-dados-atraves-do-shellscript/"><![CDATA[<nav class="toc" id="toc" data-toc-selector=".post-content" data-toc-max-level="3" data-toc-scroll-offset="20">
  <div class="toc-head">
    <h2>Índice</h2>
    <button class="toc-toggle" aria-expanded="true" type="button">Fechar</button>
  </div>
  <div class="toc-list-wrapper">
    <ul class="toc-list" role="list"></ul>
    <p class="toc-empty" style="display:none">No titles found. Remove TOC!</p>
  </div>
</nav>

<script>
(function () {
  const minLayoutWidth = 1830;

  const toc = document.getElementById('toc');
  if (toc) {
    const sentinel = document.createElement('div');
    toc.parentNode.insertBefore(sentinel, toc);

    function shouldApplyFixed() {
      return window.innerWidth > minLayoutWidth;
    }

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (shouldApplyFixed()) {
          if (!entry.isIntersecting) {
            toc.classList.add('toc-fixed');
          } else {
            toc.classList.remove('toc-fixed');
          }
        } else {
          toc.classList.remove('toc-fixed');
        }
      },
      { threshold: 0 }
    );
    observer.observe(sentinel);

    window.addEventListener('resize', () => {
        if (!shouldApplyFixed()) {
            toc.classList.remove('toc-fixed');
        }
    });
  }

  function slugify(text) {
    if (!text) return '';
    return text.toString().toLowerCase().trim()
      .normalize('NFKD').replace(/[\u0300-\u036f]/g, '')
      .replace(/[^\w\s-]/g, '').replace(/\s+/g, '-').replace(/--+/g, '-');
  }

  function buildTOC(tocEl) {
    const selector = tocEl.dataset.tocSelector || '.post-content' || '.page-content';
    const maxLevel = parseInt(tocEl.dataset.tocMaxLevel || '3', 10);
    const offset = parseInt(tocEl.dataset.tocScrollOffset || '20', 10);
    const root = document.querySelector(selector);

    if (!root) {
      tocEl.querySelector('.toc-empty').textContent = `Content not found (${selector})`;
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const headings = Array.from(root.querySelectorAll(Array(maxLevel).fill(0).map((_, i) => `h${i + 1}`).join(',')))
      .filter(h => !tocEl.contains(h))
      .filter(h => parseInt(h.tagName.substring(1)) <= maxLevel);

    if (headings.length === 0) {
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const tocRoot = tocEl.querySelector('.toc-list');
    tocRoot.innerHTML = '';

    const idCounts = {};
    headings.forEach(h => {
      if (!h.id) {
        let id = slugify(h.textContent);
        if (!id) id = 'section';
        if (idCounts[id]) { idCounts[id] += 1; id = id + '-' + idCounts[id]; }
        else idCounts[id] = 1;
        h.id = id;
      }
    });

    // Build hierarchical tree
    const stack = [{ level: 0, ul: tocRoot }];
    headings.forEach((h, i) => {
      const level = parseInt(h.tagName.substring(1));
      const li = document.createElement('li');
      const a = document.createElement('a');
      a.href = '#' + h.id;
      a.textContent = h.textContent.trim();
      a.addEventListener('click', e => {
        e.preventDefault();
        window.scrollTo({ top: h.getBoundingClientRect().top + window.scrollY - offset, behavior: 'smooth' });
        history.replaceState(null, '', '#' + h.id);

        // // Clicking on the TOC menu closes the TOC
        // const wrapper = tocEl.querySelector('.toc-list-wrapper');
        // const toggle = tocEl.querySelector('.toc-toggle');
        // wrapper.style.display = 'none';
        // toggle.setAttribute('aria-expanded', 'false');
        // toggle.textContent = '{ { include.btn_show } }';
      });
      li.appendChild(a);

      while (stack.length > 1 && level <= stack[stack.length - 1].level) stack.pop();
      const parent = stack[stack.length - 1].ul;
      parent.appendChild(li);

      const next = headings[i + 1];
      if (next) {
        const nextLevel = parseInt(next.tagName.substring(1));
        if (nextLevel > level) {
          const newUl = document.createElement('ul');
          li.appendChild(newUl);
          stack.push({ level, ul: newUl });
        }
      }
    });

    // Active Highlight
    const links = tocRoot.querySelectorAll('a');
    function onScroll() {
      const fromTop = window.scrollY + offset + 1;
      let current = headings[0];
      for (let i = 0; i < headings.length; i++) {
        if (headings[i].offsetTop <= fromTop) current = headings[i];
      }
      links.forEach(l => l.classList.toggle('active', l.getAttribute('href') === '#' + current.id));
    }
    window.addEventListener('scroll', onScroll, { passive: true });
    onScroll();
  }

  document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.toc').forEach(toc => {
      buildTOC(toc);
      const toggle = toc.querySelector('.toc-toggle');
      const wrapper = toc.querySelector('.toc-list-wrapper');

      wrapper.style.display = 'none';
      toggle.setAttribute('aria-expanded', 'false');
      toggle.textContent = 'Abrir';

      toggle.addEventListener('click', () => {
        const expanded = toggle.getAttribute('aria-expanded') === 'true';
        wrapper.style.display = expanded ? 'none' : 'block';
        toggle.setAttribute('aria-expanded', (!expanded).toString());
        toggle.textContent = expanded ? 'Abrir' : 'Fechar';
      });

      const tocTop = toc.offsetTop;

      function handleScrollFix() {
        if (window.innerWidth <= minLayoutWidth) {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.zIndex = '';
          toc.style.width = '';
          return;
        }

        const scrollTop = window.scrollY || document.documentElement.scrollTop;

        // Fixes pinning behavior in Chrome
        if (scrollTop >= tocTop) {
          toc.classList.add('fixed');
          toc.style.position = 'fixed';
          toc.style.top = '0';
          toc.style.zIndex = '9999';
          // toc.style.width = toc.offsetWidth + 'px';
        } else {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.width = '';
        }

        // // Automatically closes the TOC if it is open and scrolled to it.
        // const rect = toc.getBoundingClientRect();
        // if (rect.top <= 0 && toggle.getAttribute('aria-expanded') === 'true') {
        //   wrapper.style.display = 'none';
        //   toggle.setAttribute('aria-expanded', 'false');
        //   toggle.textContent = '{ { include.btn_show } }';
        // }
      }

      window.addEventListener('scroll', handleScrollFix, { passive: true });
      window.addEventListener('resize', handleScrollFix);
      handleScrollFix();
    });
  });
})();
</script>

<p>Olá pessoas, vamos falar de Shell script, que é algo que gosto muito. :)</p>

<h1 id="introdução">Introdução</h1>

<p>Bom, se você é usuário Linux sabe muito bem o que é <a href="https://pt.wikipedia.org/wiki/Shell_script" target="_blank">Shell Script</a>, uma linguagem usuda em vários sistemas operativos, até aqui tudo bem, mas…o que muitos não sabem é dá para fazer transações no banco de dados através da mesma.</p>

<ul>
  <li>Você: Sério?</li>
  <li>Eu: Sério cara.</li>
</ul>

<p>O que vamos ver neste post é exatamente isso, uma conexão com um banco de dados; criação de um database; e a criação de uma tabela. Não irei abordar um CRUD completo, pois com base na conexão e criação de uma tabela, você já será apto para navegar em sua mente e realizar as demais transações no banco de dados, tendo como requerimento apenas conhecimento de PL/SQL.</p>

<p>Os bancos de dados que irei abordar aqui serão o <a href="https://www.postgresql.org" target="_blank">PostgreSQL</a> e o <a href="https://www.mysql.com" target="_blank">MySQL</a>, então suponho que você já tenha um dos dois instalados em sua máquina; com as configurações de usuário e senha realizadas; e o serviço iniciado.</p>

<h1 id="requerimentos">Requerimentos</h1>

<ul>
  <li>PostgreSQL ou Mysql instalado.</li>
  <li>Conhecimento básico em PL/SQL.</li>
  <li>Força de vontade :D</li>
</ul>

<h1 id="postgresql">PostgreSQL</h1>

<h2 id="preparando-ambiente">Preparando ambiente</h2>

<p>Por padrão, o PostgreSQL já cria um usuário e uma role com o nome <strong>postgres</strong>, você pode fazer um teste de conexão com o seguinte comando:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>psql <span class="nt">-U</span> postgres</code></pre></figure>

<p>ou</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-u</span> postgres psql</code></pre></figure>

<blockquote>
  <p>NOTA: O usuário <strong>postgres</strong> tem permissão de SUPERUSER, então você pode criar outros usuários, databases, tabelas e outros respectivas permissões com ele.</p>
</blockquote>

<h3 id="criando-um-database-no-postgresql">Criando um DATABASE no PostgreSQL</h3>

<p>Uma vez que você já está conectado ao <code class="language-plaintext highlighter-rouge">psql</code> com usuário <strong>postgres</strong>, vamos criar um DATABASE onde vamos trabalhar nossas transações:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">postgres</span><span class="o">=</span><span class="c"># CREATE DATABASE my_db;</span></code></pre></figure>

<blockquote>
  <p>NOTA: Mais adiante, criamos nossa DATABASE através de uma função em nosso projeto, porém, vale lembrar que o <strong>CREATE DATABASE</strong> no PostgreSQL não tem opção <strong>IF NOT EXISTS</strong> e só podemos executar uma única instrução do <strong>CREATE DATABASE</strong>, não conseguimos executa-lo dentro de um bloco de transação. Com essas informações, foi usado outras técnicas com Shell Script para verificar se DATABASE não existe e assim criar o mesmo.</p>
</blockquote>

<h2 id="iniciando-projeto">Iniciando projeto</h2>

<h2 id="criando-pasta-de-ambiente-do-projeto">Criando pasta de ambiente do projeto</h2>

<p>Vamos criar uma pasta para nosso projeto e entrar na mesma com o comando abaixo:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">mkdir</span> ~/sh_postgresql<span class="p">;</span> <span class="nb">cd</span> <span class="nv">$_</span></code></pre></figure>

<h2 id="criando-arquivo-de-configuração">Criando arquivo de configuração</h2>

<p>Para fins de boas normas de projeto, vamos criar o arquivo <strong>config.conf</strong> na base do nosso projeto, e armazenar nossas variáveis global.</p>

<p>Conteúdo do arquivo: <strong>config.conf</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">DB</span><span class="o">=</span><span class="s2">"my_db"</span>
<span class="nv">HOST</span><span class="o">=</span><span class="s2">"localhost"</span>
<span class="nv">PORT</span><span class="o">=</span><span class="s2">"5432"</span>
<span class="nv">USER</span><span class="o">=</span><span class="s2">"postgres"</span>
<span class="nv">TABLE</span><span class="o">=</span><span class="s2">"films"</span></code></pre></figure>

<p>Essas variáveis vão ser responsáveis por qualquer tipo de transação no banco de dados.</p>

<h2 id="criando-bibliotecas-para-nosso-projeto">Criando bibliotecas para nosso projeto</h2>

<p>Sempre que criamos um projeto, é interessante dividir partes do nosso código e fazer essas partes virarem bibliotecas, ou seja, pequenos trechos de código onde podemos importar a qualquer momento. Vamos criar nossas bibliotecas na pasta <strong>libs</strong>.</p>

<h3 id="biblioteca-create_databasebash">Biblioteca <strong>create_database.bash</strong></h3>

<p>A primeira <strong>lib</strong> (biblioteca) que vamos criar é a <strong>create_database.bash</strong>. Essa biblioteca irá conter uma função para criar nossa DATABASE caso ela não exista.</p>

<p>Conteúdo do arquivo: <strong>libs/create_database.bash</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">function </span>_create_database<span class="o">()</span> <span class="o">{</span>
  psql <span class="nt">-h</span> <span class="nv">$HOST</span> <span class="nt">-p</span> <span class="nv">$PORT</span> <span class="nt">-U</span> <span class="nv">$USER</span> <span class="nt">-tc</span> <span class="s2">"SELECT 1 FROM pg_database WHERE datname = '</span><span class="nv">$DB</span><span class="s2">'"</span> | <span class="nb">grep</span> <span class="nt">-q</span> 1 <span class="o">||</span> psql <span class="nt">-h</span> <span class="nv">$HOST</span> <span class="nt">-p</span> <span class="nv">$PORT</span> <span class="nt">-U</span> <span class="nv">$USER</span> <span class="nt">-c</span> <span class="s2">"CREATE DATABASE </span><span class="nv">$DB</span><span class="s2">"</span>
<span class="o">}</span></code></pre></figure>

<p>Em <a href="#criando-um-database-no-postgresql">Criando um DATABASE no PostgreSQL</a>, criamos nosso DATABASE manualmente através do <strong>psql</strong>, mas caso não criassemos, essa função já seria responsável por criar.</p>

<h3 id="biblioteca-create_tablebash">Biblioteca <strong>create_table.bash</strong></h3>

<p>Outra <strong>lib</strong> (biblioteca) que vamos criar é a <strong>create_table.bash</strong>. Essa bibliotea irá conter uma função para criar nossa TABLE. Você pode ser bem mais dinâmico ao criar suas “<em>libs</em>”, como esse é um post para apenas lhe dar uma ideia, vou ser bem direto nessa biblioteca de criação de TABLE.</p>

<p>Conteúdo do arquivo: <strong>libs/create_table.bash</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="k">function </span>_create_table<span class="o">()</span> <span class="o">{</span>
  psql <span class="nt">-h</span> <span class="nv">$HOST</span> <span class="nt">-p</span> <span class="nv">$PORT</span> <span class="nt">-U</span> <span class="nv">$USER</span> <span class="nt">-d</span> <span class="nv">$DB</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">

  </span><span class="se">\c</span><span class="sh"> DB

  CREATE TABLE IF NOT EXISTS </span><span class="nv">$TABLE</span><span class="sh"> (
    id          char(5) CONSTRAINT firstkey PRIMARY KEY,
    title       varchar(40) NOT NULL,
    did         integer NOT NULL,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute
  );
</span><span class="no">EOF
</span><span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="criando-o-programa-principal">Criando o programa principal</h2>

<p>Vamos agora criar um arquivo chamando <strong>setup.bash</strong>, nesse arquivo iremos carregar nosso arquivo de configuração (<strong>config.conf</strong>) e nossas <em>libs</em>. Ele também terá um menu de interação com o usuário.</p>

<p>Conteúdo do arquivo: <strong>setup.bash</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="c">#!/usr/bin/env bash</span>

<span class="nb">source </span>config.conf

<span class="nv">libs</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">ls</span> ./libs/<span class="k">*</span>.bash<span class="si">)</span><span class="s2">"</span>
<span class="k">for </span>lib <span class="k">in</span> <span class="nv">$libs</span><span class="p">;</span> <span class="k">do
  </span><span class="nb">source</span> <span class="nv">$lib</span>
<span class="k">done

case</span> <span class="nv">$1</span> <span class="k">in
  </span>createtb<span class="p">)</span>
    _create_database
    _create_table
  <span class="p">;;</span>
  <span class="k">*</span><span class="p">)</span>
    <span class="nb">printf</span> <span class="s2">"Using: </span><span class="nv">$0</span><span class="s2"> { createtb }"</span>
  <span class="p">;;</span>
<span class="k">esac</span>
<span class="nb">exit </span>0
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="estrutura-do-projeto-para-postgresql">Estrutura do projeto para PostgreSQL</h2>

<p>A árvore do nosso projeto ficou assim:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">.</span>
├── config.conf
├── libs
│   ├── create_database.bash
│   └── create_table.bash
└── setup.bash</code></pre></figure>

<h2 id="executando-nosso-programa">Executando nosso programa</h2>

<p>Depois de ter criado todos arquivos, chegou a hora de fazer nosso programa ser executado. Para isso faça:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">chmod</span> +x setup.bash
bash setup.bash createtb</code></pre></figure>

<p>Se tudo ocorreu bem, a tabela ($DB) já foi criada no banco de dados. Você pode executar os comandos abaixo e verificar:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">source </span>config.conf <span class="o">&amp;&amp;</span> psql <span class="nt">-h</span> <span class="nv">$HOST</span> <span class="nt">-p</span> <span class="nv">$PORT</span> <span class="nt">-U</span> <span class="nv">$USER</span> <span class="nt">-d</span> <span class="nv">$DB</span></code></pre></figure>

<p>Dentro do psql, execute o comando <strong>\dt</strong> para listar as TABLES desse DATABASE:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">my_db</span><span class="o">=</span><span class="c"># \dt</span>
            Lista de relações
 Esquema | Nome  |  Tipo  |   Dono
<span class="nt">---------</span>+-------+--------+----------
 public  | films | tabela | postgres
<span class="o">(</span>1 registro<span class="o">)</span></code></pre></figure>

<h1 id="mysql">MySQL</h1>

<h2 id="preparando-ambiente-1">Preparando ambiente</h2>

<p>Antes de começar, precisamos verificar se temos acesso a conexão com o MySQL. Se você instalou e configurou normalmente, você pode executar o comando abaixo para logar informando a senha do MySQL configurada:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mysql <span class="nt">-u</span> root <span class="nt">-p</span></code></pre></figure>

<p>Se você se conectou, já podemos prosseguir com os passos seguintes.</p>

<h2 id="iniciando-projeto-1">Iniciando projeto</h2>

<h2 id="criando-pasta-de-ambiente-do-projeto-1">Criando pasta de ambiente do projeto</h2>

<p>Vamos criar uma pasta para nosso projeto de <strong>MySQL</strong> e entrar na mesma com o comando abaixo:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">mkdir</span> ~/sh_mysql<span class="p">;</span> <span class="nb">cd</span> <span class="nv">$_</span></code></pre></figure>

<h2 id="criando-arquivo-de-configuração-1">Criando arquivo de configuração</h2>

<p>Como fizemos no projeto para o <strong>PostgreSQL</strong>, vamos criar p arquivo  <strong>config.conf</strong> na base do nosso projeto.</p>

<p>Conteúdo do arquivo: <strong>config.conf</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">DB</span><span class="o">=</span><span class="s2">"my_db"</span>
<span class="nv">HOST</span><span class="o">=</span><span class="s2">"localhost"</span>
<span class="nv">PORT</span><span class="o">=</span><span class="s2">"3306"</span>
<span class="nv">USER</span><span class="o">=</span><span class="s2">"root"</span>
<span class="nv">PASSWORD</span><span class="o">=</span><span class="s2">""</span>
<span class="nv">TABLE</span><span class="o">=</span><span class="s2">"cartoons"</span></code></pre></figure>

<h2 id="criando-bibliotecas-para-nosso-projeto-1">Criando bibliotecas para nosso projeto</h2>

<p>Vamos repetir o mesmo conceito que fizemos para o PostgreSQL, criando nossas bibliotecas na pasta <strong>libs</strong> do projeto.</p>

<h3 id="biblioteca-create_databasebash-1">Biblioteca <strong>create_database.bash</strong></h3>

<p>Diferente do PostgreSQL, o <strong>MySQL</strong> contem uma opção de <strong>IF NOT EXISTS</strong> para criação de DATABASES, com isso não precisamos fazer a verificação via Shell Script como fizemos com o projeto do PostgreSQL. Com a própria instrução SQL do MySQL, podemos fazer essa checagem.</p>

<p>Conteúdo do arquivo: <strong>libs/create_database.bash</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">function </span>_create_database<span class="o">()</span> <span class="o">{</span>
  mysql <span class="nt">--host</span><span class="o">=</span><span class="nv">$HOST</span> <span class="nt">--port</span><span class="o">=</span><span class="nv">$PORT</span> <span class="nt">--user</span><span class="o">=</span><span class="nv">$USER</span> <span class="nt">--password</span><span class="o">=</span><span class="nv">$PASSWORD</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
  CREATE DATABASE IF NOT EXISTS </span><span class="se">\`</span><span class="nv">$DB</span><span class="se">\`</span><span class="sh">;
</span><span class="no">EOF
</span><span class="o">}</span></code></pre></figure>

<h3 id="biblioteca-create_tablebash-1">Biblioteca <strong>create_table.bash</strong></h3>

<p>Diferentemente do PostgreSQL também, com o MySQL você deve criar delimitadores para executar várias instruções SQL. Você define um delimitador com a palavra reservada <strong>DELIMITER</strong> e logo em seguida o delimitador que você quer. Aqui estou usando o <strong>$$</strong>.</p>

<p>Conteúdo do arquivo: <strong>libs/create_table.bash</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">function </span>_create_table<span class="o">()</span> <span class="o">{</span>
  mysql <span class="nt">--host</span><span class="o">=</span><span class="nv">$HOST</span> <span class="nt">--port</span><span class="o">=</span><span class="nv">$PORT</span> <span class="nt">--user</span><span class="o">=</span><span class="nv">$USER</span> <span class="nt">--password</span><span class="o">=</span><span class="nv">$PASSWORD</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">

  DELIMITER </span><span class="nv">$$</span><span class="sh">

  USE </span><span class="se">\`</span><span class="nv">$DB</span><span class="se">\`</span><span class="sh"> </span><span class="nv">$$</span><span class="sh">

  CREATE TABLE IF NOT EXISTS </span><span class="se">\`</span><span class="nv">$TABLE</span><span class="se">\`</span><span class="sh">  (
    id        INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    title     VARCHAR(40) NOT NULL,
    did       INTEGER NOT NULL,
    date      TIMESTAMP,
    kind      VARCHAR(10),
    designer  VARCHAR(30),

  )</span><span class="nv">$$</span><span class="sh">
</span><span class="no">EOF
</span><span class="o">}</span></code></pre></figure>

<h2 id="criando-o-programa-principal-1">Criando o programa principal</h2>

<p>Vamos carregar todas nossas bibliotecas no <strong>setup.bash</strong> e o arquivo de configuração <strong>config.conf</strong>. Na mesma ideia que fizemos no projeto do PostgreSQLm vamos fazer para o MySQL mais uma vez.</p>

<p>Conteúdo do arquivo: <strong>setup.bash</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="c">#!/usr/bin/env bash</span>

<span class="nb">source </span>config.conf

<span class="nv">libs</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">ls</span> ./libs/<span class="k">*</span>.bash<span class="si">)</span><span class="s2">"</span>
<span class="k">for </span>lib <span class="k">in</span> <span class="nv">$libs</span><span class="p">;</span> <span class="k">do
  </span><span class="nb">source</span> <span class="nv">$lib</span>
<span class="k">done

case</span> <span class="nv">$1</span> <span class="k">in
  </span>createtb<span class="p">)</span>
    _create_database
    _create_table
  <span class="p">;;</span>
  <span class="k">*</span><span class="p">)</span>
    <span class="nb">printf</span> <span class="s2">"Using: </span><span class="nv">$0</span><span class="s2"> { createtb }"</span>
  <span class="p">;;</span>
<span class="k">esac</span>
<span class="nb">exit </span>0
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="estrutura-do-projeto-para-mysql">Estrutura do projeto para MySQL</h2>

<p>A árvore do nosso projeto ficou assim:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">.</span>
├── config.conf
├── libs
│   ├── create_database.bash
│   └── create_table.bash
└── setup.bash</code></pre></figure>

<h2 id="executando-nosso-programa-1">Executando nosso programa</h2>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">chmod</span> +x setup.bash
bash setup.bash createtb</code></pre></figure>

<p>Execute os comandos abaixo e verificar:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">source </span>config.conf <span class="o">&amp;&amp;</span> mysql <span class="nt">--host</span><span class="o">=</span><span class="nv">$HOST</span> <span class="nt">--port</span><span class="o">=</span><span class="nv">$PORT</span> <span class="nt">--user</span><span class="o">=</span><span class="nv">$DB_USER</span> <span class="nt">--password</span><span class="o">=</span><span class="nv">$DB_PASSWD</span></code></pre></figure>

<p>Dentro do console do mysql, execute o comando abaixo para listar o DATABASE criado:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">MySQL <span class="o">[(</span>none<span class="o">)]&gt;</span> show databases<span class="p">;</span>
+--------------------+
| Database           |
+--------------------+
| information_schema |
| my_db              |
| mysql              |
| performance_schema |
+--------------------+
3 rows <span class="k">in </span><span class="nb">set</span> <span class="o">(</span>0.001 sec<span class="o">)</span></code></pre></figure>

<h1 id="conclusão">Conclusão</h1>

<p>Como dito, foi um simples post para você tenha uma noção do que podemos fazer com Shell Script. Tanto os passos para PostgreSQL e para MySQL, existem trechos de código praticamente idênticos, mudando uma coisinha ou outra. Porém, apesar de realizarmos transações no banco de dados com Shell Script, não recomendo você tentar criar um sistema dessa maneira. Existem diversas linguagens de programação onde temos milhares de vantagens para realizar tudo que fizemos aqui.</p>

<p>Espero que você tenha aprendido algo com esse post. Eu fico por aqui, até a próxima.</p>]]></content><author><name>William C. Canin</name></author><category term="shell" /><category term="postgresql" /><category term="mysql" /><summary type="html"><![CDATA[O Shell Script não é só uma linguagem para fazer automatização de tarefas no seu S.O, é muito mais!]]></summary></entry></feed>