<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="pt"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://williamcanin.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://williamcanin.github.io/" rel="alternate" type="text/html" hreflang="pt" /><updated>2025-10-22T17:16:19+00:00</updated><id>https://williamcanin.github.io/feed.xml</id><title type="html">Hey, I’m William Canin</title><subtitle>thoughts on programming, digital wellbeing, linux</subtitle><entry><title type="html">Implementando uma classe em Python para criar logs</title><link href="https://williamcanin.github.io/blog/implementando-uma-classe-em-python-para-criar-logs/" rel="alternate" type="text/html" title="Implementando uma classe em Python para criar logs" /><published>2021-06-26T23:37:43+00:00</published><updated>2021-06-26T23:37:43+00:00</updated><id>https://williamcanin.github.io/blog/implementando-uma-classe-em-python-para-criar-logs</id><content type="html" xml:base="https://williamcanin.github.io/blog/implementando-uma-classe-em-python-para-criar-logs/"><![CDATA[<nav class="toc" id="toc" data-toc-selector=".post-content" data-toc-max-level="3" data-toc-scroll-offset="20">
  <div class="toc-head">
    <h2>Índice</h2>
    <button class="toc-toggle" aria-expanded="true" type="button">Fechar</button>
  </div>
  <div class="toc-list-wrapper">
    <ul class="toc-list" role="list"></ul>
    <p class="toc-empty" style="display:none">No titles found. Remove TOC!</p>
  </div>
</nav>

<script>
(function () {
  const minLayoutWidth = 1830;

  const toc = document.getElementById('toc');
  if (toc) {
    const sentinel = document.createElement('div');
    toc.parentNode.insertBefore(sentinel, toc);

    function shouldApplyFixed() {
      return window.innerWidth > minLayoutWidth;
    }

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (shouldApplyFixed()) {
          if (!entry.isIntersecting) {
            toc.classList.add('toc-fixed');
          } else {
            toc.classList.remove('toc-fixed');
          }
        } else {
          toc.classList.remove('toc-fixed');
        }
      },
      { threshold: 0 }
    );
    observer.observe(sentinel);

    window.addEventListener('resize', () => {
        if (!shouldApplyFixed()) {
            toc.classList.remove('toc-fixed');
        }
    });
  }

  function slugify(text) {
    if (!text) return '';
    return text.toString().toLowerCase().trim()
      .normalize('NFKD').replace(/[\u0300-\u036f]/g, '')
      .replace(/[^\w\s-]/g, '').replace(/\s+/g, '-').replace(/--+/g, '-');
  }

  function buildTOC(tocEl) {
    const selector = tocEl.dataset.tocSelector || '.post-content' || '.page-content';
    const maxLevel = parseInt(tocEl.dataset.tocMaxLevel || '3', 10);
    const offset = parseInt(tocEl.dataset.tocScrollOffset || '20', 10);
    const root = document.querySelector(selector);

    if (!root) {
      tocEl.querySelector('.toc-empty').textContent = `Content not found (${selector})`;
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const headings = Array.from(root.querySelectorAll(Array(maxLevel).fill(0).map((_, i) => `h${i + 1}`).join(',')))
      .filter(h => !tocEl.contains(h))
      .filter(h => parseInt(h.tagName.substring(1)) <= maxLevel);

    if (headings.length === 0) {
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const tocRoot = tocEl.querySelector('.toc-list');
    tocRoot.innerHTML = '';

    const idCounts = {};
    headings.forEach(h => {
      if (!h.id) {
        let id = slugify(h.textContent);
        if (!id) id = 'section';
        if (idCounts[id]) { idCounts[id] += 1; id = id + '-' + idCounts[id]; }
        else idCounts[id] = 1;
        h.id = id;
      }
    });

    // Build hierarchical tree
    const stack = [{ level: 0, ul: tocRoot }];
    headings.forEach((h, i) => {
      const level = parseInt(h.tagName.substring(1));
      const li = document.createElement('li');
      const a = document.createElement('a');
      a.href = '#' + h.id;
      a.textContent = h.textContent.trim();
      a.addEventListener('click', e => {
        e.preventDefault();
        window.scrollTo({ top: h.getBoundingClientRect().top + window.scrollY - offset, behavior: 'smooth' });
        history.replaceState(null, '', '#' + h.id);

        // // Clicking on the TOC menu closes the TOC
        // const wrapper = tocEl.querySelector('.toc-list-wrapper');
        // const toggle = tocEl.querySelector('.toc-toggle');
        // wrapper.style.display = 'none';
        // toggle.setAttribute('aria-expanded', 'false');
        // toggle.textContent = '{ { include.btn_show } }';
      });
      li.appendChild(a);

      while (stack.length > 1 && level <= stack[stack.length - 1].level) stack.pop();
      const parent = stack[stack.length - 1].ul;
      parent.appendChild(li);

      const next = headings[i + 1];
      if (next) {
        const nextLevel = parseInt(next.tagName.substring(1));
        if (nextLevel > level) {
          const newUl = document.createElement('ul');
          li.appendChild(newUl);
          stack.push({ level, ul: newUl });
        }
      }
    });

    // Active Highlight
    const links = tocRoot.querySelectorAll('a');
    function onScroll() {
      const fromTop = window.scrollY + offset + 1;
      let current = headings[0];
      for (let i = 0; i < headings.length; i++) {
        if (headings[i].offsetTop <= fromTop) current = headings[i];
      }
      links.forEach(l => l.classList.toggle('active', l.getAttribute('href') === '#' + current.id));
    }
    window.addEventListener('scroll', onScroll, { passive: true });
    onScroll();
  }

  document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.toc').forEach(toc => {
      buildTOC(toc);
      const toggle = toc.querySelector('.toc-toggle');
      const wrapper = toc.querySelector('.toc-list-wrapper');

      wrapper.style.display = 'none';
      toggle.setAttribute('aria-expanded', 'false');
      toggle.textContent = 'Abrir';

      toggle.addEventListener('click', () => {
        const expanded = toggle.getAttribute('aria-expanded') === 'true';
        wrapper.style.display = expanded ? 'none' : 'block';
        toggle.setAttribute('aria-expanded', (!expanded).toString());
        toggle.textContent = expanded ? 'Abrir' : 'Fechar';
      });

      const tocTop = toc.offsetTop;

      function handleScrollFix() {
        if (window.innerWidth <= minLayoutWidth) {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.zIndex = '';
          toc.style.width = '';
          return;
        }

        const scrollTop = window.scrollY || document.documentElement.scrollTop;

        // Fixes pinning behavior in Chrome
        if (scrollTop >= tocTop) {
          toc.classList.add('fixed');
          toc.style.position = 'fixed';
          toc.style.top = '0';
          toc.style.zIndex = '9999';
          // toc.style.width = toc.offsetWidth + 'px';
        } else {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.width = '';
        }

        // // Automatically closes the TOC if it is open and scrolled to it.
        // const rect = toc.getBoundingClientRect();
        // if (rect.top <= 0 && toggle.getAttribute('aria-expanded') === 'true') {
        //   wrapper.style.display = 'none';
        //   toggle.setAttribute('aria-expanded', 'false');
        //   toggle.textContent = '{ { include.btn_show } }';
        // }
      }

      window.addEventListener('scroll', handleScrollFix, { passive: true });
      window.addEventListener('resize', handleScrollFix);
      handleScrollFix();
    });
  });
})();
</script>

<p>Olá <img src="https://media.giphy.com/media/hvRJCLFzcasrR4ia7z/giphy.gif" width="25px" />, bem vindo a mais um post no meu weblog. Vamos começar a leitura?!</p>

<h1 id="introdução">Introdução</h1>

<p>Conforme você vai avançando na programação, você vai se desafiando, e como isso criando aplicações mais complexas e com necessidade de armazenar logs. Pensando nisso, resolvi criar esse post não só pra quem vai fazer um software mais avançado, mas também serve para todos tipos de níveis de aplicação dependendo o que a mesma irá exigir.</p>

<p>Neste post você vai aprender de forma básica como criar seus logs e ainda vamos implementar de uma forma que você possa usar como módulo para outros recursos, e um extra de colorir<code class="language-plaintext highlighter-rouge">*</code> as mensagens de logs.</p>

<p><strong>E por quê eu digo aprender de forma simples?</strong></p>

<p>R:- Porque dependendo do que você tem em mente, criar um registro de log e onde irá armazenar esses logs, pode exigir que você tenha que lhe dar com permissões de usuário no diretório a ser gravado os logs (o que não é no caso que iremos abordar neste post). No Linux por exemplo, muitas aplicações registram seus logs no diretório <code class="language-plaintext highlighter-rouge">/var/logs</code>, porem, isso é uma convenção e não necessariamente você precisa registra-los nesse diretório, ou seja, vai de programador para programador.</p>

<p>Agora vamos de fato “codar” e sair dos avisos. Voilá!</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">*</code> O modo de colorir os logs deste post, só será possível se você estiver em um sistema Unix, ou seja, não é compatível com sistema Windows.</p>
</blockquote>

<h1 id="requisitos">Requisitos</h1>

<table>
  <thead>
    <tr>
      <th>Softwares</th>
      <th>Versão</th>
      <th>Onde obter?</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Python</td>
      <td>&gt;= 3.5</td>
      <td><a href="https://www.python.org/downloads/" target="_blank">Python Downloads</a></td>
    </tr>
  </tbody>
</table>

<p>E o mais importante, toda sua mega master atenção de leitura. Que eu sei que você. :D</p>

<h1 id="criando-o-módulo">Criando o módulo</h1>

<p>Bom, um módulo em Python nada mais é que um arquivo contendo seu código então vamos criar um arquivo chamado <strong>logger.py</strong>:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nb">touch </span>logger.py</code></pre></figure>

<h1 id="implementando-o-código">Implementando o código</h1>

<h2 id="imports">Imports</h2>

<p>Com o arquivo <strong>logger.py</strong> criado; tudo começa com os <code class="language-plaintext highlighter-rouge">imports</code>, então vamos fazer os imports que são 2 (dois) apenas que iremos trabalhar:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="n">logging</span>
<span class="kn">from</span> <span class="n">sys</span> <span class="kn">import</span> <span class="n">platform</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>O primeiro <em>import</em> é o de fato o mais importante que é o módulo <strong>logging</strong>, um módulo de logs nativo do Python.
O segundo, o <a href="https://docs.python.org/pt-br/3.9/library/sys.html?highlight=platform#sys.platform" target="_blank"><strong>platform</strong></a> também é um módulo nativo do Python, mas que tem uma função chamada <strong>startswith</strong>, que retorna um valor booleano através do parâmetro passado nela para verificar o tipo de plataforma do S.O.</p>

<h2 id="função-para-verificar-sistema-operacional">Função para verificar Sistema Operacional</h2>

<p>Como dito antes, iremos trabalhar com cor ANSI nos logs, mas precisamos verificar se estamos de fato em um sistema operacional que suporte isso, então vamos criar uma função “verificadora”.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">unix_color</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">platform</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">win</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">return</span> <span class="n">value</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Uma função simples, que retorna uma string vazia caso o sistema operacional seja Windows, caso contrário, me retorna o próprio valor passado no parâmetro. Este valor passado por parâmetro será nosso código ANSI de cores, que iremos implementar mais adiante.</p>

<h2 id="criando-classe-colors-para-armazenar-cores-ansi">Criando classe <code class="language-plaintext highlighter-rouge">Colors</code> para armazenar cores ANSI</h2>

<p>Agora chegou a hora de criarmos uma classe que irá armazenar nossas cores ANSI, essa classe terá apenas variáveis de classe:</p>

<blockquote>
  <p>Criei um vídeo no <strong>YouTube</strong>, explicando como podemos criar um módulo para imprimir mensagens coloridas com Python. Se você não visualizou vale a pena olhar, pois este código é um pequeno trecho que tirei deste vídeo. Você pode acessa-ló <a href="https://www.youtube.com/watch?v=VW-UphhjJ3E&amp;feature=emb_imp_woyt" target="_blank">clicando aqui</a></p>
</blockquote>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="k">class</span> <span class="nc">Colors</span><span class="p">:</span>
    <span class="n">NONE</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[0m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">BLACK</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[30m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">MAGENTA</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[95m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">BLUE</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[94m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">GREEN</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[92m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">RED</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[91m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">YELLOW</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[93m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">CYAN</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[96m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">WHITE</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[97m</span><span class="sh">"</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Repare que criei variáveis de classe, e os valores que elas estão recebendo está sendo atribuindo pela função <strong>unix_color</strong> que criamos assim, ou seja, se o sistema operacional for UNIX, irá retornar o parâmetro passado na função, nas variáveis de classe.</p>

<p>Criei apenas alguns opções de cores e estilos ANSI, mas você pode implementar mais acessando este <a href="https://en.wikipedia.org/wiki/ANSI_escape_code" target="_blank">documento</a> que contem explicações mais detalhas sobre cores ANSI.</p>

<blockquote>
  <p>NOTA: Tem como utilizar cores para Windows como a biblioteca <a href="https://pypi.org/project/colorama" target="_blank"><strong>colorama</strong></a> por exemplo, porem, está forma é reconhecida apenas por sistemas baseado em UNIX (Linux e OS X).</p>
</blockquote>

<h2 id="criando-classe-de-logs">Criando classe de logs</h2>

<p>Vamos começar de fato a criar nossa classe de <strong>logs</strong>, onde será uma classe que irá herdar da classe <strong>Colors</strong>:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="k">class</span> <span class="nc">Logs</span><span class="p">(</span><span class="n">Colors</span><span class="p">):</span>

    <span class="n">FILENAME</span> <span class="o">=</span> <span class="sh">"</span><span class="s">app.log</span><span class="sh">"</span>
    <span class="n">DATE_FORMAT</span> <span class="o">=</span> <span class="sh">"</span><span class="s">%m/%d/%Y %I:%M:%S %p</span><span class="sh">"</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Repare que temos 2 (duas) variáveis de classe, a <strong>FILENAME</strong>, que recebe o nome com path (neste caso sem nenhum path) do arquivo de log que irá ser criado, e o <strong>DATE_FORMAT</strong>, que será o formato da data a ser gravada nos logs. Você irá entender mais dessas duas variáveis de classe a seguir no método <strong>dander init</strong> (<code class="language-plaintext highlighter-rouge">__init__</code>).</p>

<h2 id="método-inicializador-construtor">Método inicializador (“construtor”)</h2>

<p>No método <strong>dander init</strong> (<code class="language-plaintext highlighter-rouge">__init__</code>), vamos implementar a base do formato do nosso registrador de logs. Então, o método será assim:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">filename</span><span class="o">=</span><span class="n">FILENAME</span><span class="p">,</span> <span class="n">datefmt</span><span class="o">=</span><span class="n">DATE_FORMAT</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">filename</span> <span class="o">=</span> <span class="n">filename</span>
        <span class="n">self</span><span class="p">.</span><span class="n">date_format</span> <span class="o">=</span> <span class="n">datefmt</span>
        <span class="n">self</span><span class="p">.</span><span class="n">formated</span> <span class="o">=</span> <span class="sh">"</span><span class="s">%(levelname)s:[%(asctime)s]: %(message)s</span><span class="sh">"</span>

        <span class="n">self</span><span class="p">.</span><span class="n">levels</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">exception</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">exception</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">info</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">info</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">warning</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">warning</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">error</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">debug</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">debug</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">critical</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">critical</span>
        <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Analisando nosso <code class="language-plaintext highlighter-rouge">__init__</code>, temos 2 (dois) parâmetros no mesmo, o <code class="language-plaintext highlighter-rouge">filename</code> e <code class="language-plaintext highlighter-rouge">datefmt</code>. O <code class="language-plaintext highlighter-rouge">filaname</code> está recebendo por padrão, o valor da  variável de classe <strong>FILENAME</strong>, assim como o <code class="language-plaintext highlighter-rouge">datefmt</code> também. Implementamos essas parâmetros justamente para o programador mudar o local de onde o registro de logs será salvo e caso queira mudar o formato da data conforme a localidade em que está.</p>

<p>O <code class="language-plaintext highlighter-rouge">self.formated</code>, está recebendo um <a href="https://docs.python.org/pt-br/3.9/library/logging.html?highlight=logging#formatter-objects" target="_blank">formato</a> em que o módulo <code class="language-plaintext highlighter-rouge">logging</code> do Python suporta. Ele pode ter outras opções, mas neste nosso caso implementamos 3, que são:</p>

<ul>
  <li>levelname - Registra o level do log.</li>
  <li>asctime - Registra a data e hora do log.</li>
  <li>message - Registra uma mensagem que será passada por parâmetro.</li>
</ul>

<p>O <code class="language-plaintext highlighter-rouge">self.levels</code> é um dicionário que está carregando os levels de log do módulo <code class="language-plaintext highlighter-rouge">logging</code>, é muito importante observar que estamos carregando os levels sem ser <strong>Callable</strong>.</p>

<h2 id="método-de-registrar-os-logs">Método de registrar os logs</h2>

<p>Agora começa a nossa brincadeira, esté método que será responsável por armazenar toda nossa lógica para registrar os logs.</p>

<p>Vou implementar ele, e abaixo dele vou explicar o que cada condição e lógica faz:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">record</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">exc_info</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="sh">"</span><span class="s">exception</span><span class="sh">"</span><span class="p">,</span> <span class="n">colorize</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
          <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">levels</span><span class="p">.</span><span class="nf">keys</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">item</span> <span class="o">==</span> <span class="nb">type</span><span class="p">:</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">colorize</span><span class="p">:</span>
                    <span class="n">formated</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">formated</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">item</span> <span class="o">==</span> <span class="sh">"</span><span class="s">warning</span><span class="sh">"</span><span class="p">:</span>
                        <span class="n">formated</span> <span class="o">=</span> <span class="p">(</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">YELLOW</span><span class="si">}</span><span class="s">%(levelname)s:</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">GREEN</span><span class="si">}</span><span class="s">[%(asctime)s]</span><span class="sh">"</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">NONE</span><span class="si">}</span><span class="s">: %(message)s</span><span class="sh">"</span>
                        <span class="p">)</span>
                    <span class="k">elif</span> <span class="n">item</span> <span class="o">==</span> <span class="sh">"</span><span class="s">error</span><span class="sh">"</span> <span class="ow">or</span> <span class="n">item</span> <span class="o">==</span> <span class="sh">"</span><span class="s">exception</span><span class="sh">"</span><span class="p">:</span>
                        <span class="n">formated</span> <span class="o">=</span> <span class="p">(</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">RED</span><span class="si">}</span><span class="s">%(levelname)s:</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">GREEN</span><span class="si">}</span><span class="s">[%(asctime)s]</span><span class="sh">"</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">NONE</span><span class="si">}</span><span class="s">: %(message)s</span><span class="sh">"</span>
                        <span class="p">)</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">formated</span> <span class="o">=</span> <span class="p">(</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">CYAN</span><span class="si">}</span><span class="s">%(levelname)s:</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">GREEN</span><span class="si">}</span><span class="s">[%(asctime)s]</span><span class="sh">"</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">NONE</span><span class="si">}</span><span class="s">: %(message)s</span><span class="sh">"</span>
                        <span class="p">)</span>
                <span class="n">logging</span><span class="p">.</span><span class="nf">basicConfig</span><span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">filename</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="n">formated</span><span class="p">,</span>
                                    <span class="n">datefmt</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">date_format</span><span class="p">,</span> <span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="p">.</span><span class="n">INFO</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">item</span> <span class="o">==</span> <span class="sh">"</span><span class="s">exception</span><span class="sh">"</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">levels</span><span class="p">[</span><span class="n">item</span><span class="p">](</span><span class="n">msg</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">exc_info</span><span class="o">=</span><span class="n">exc_info</span><span class="p">,</span>
                                             <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">levels</span><span class="p">[</span><span class="n">item</span><span class="p">](</span><span class="n">msg</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span>
            <span class="sa">f</span><span class="sh">'</span><span class="s">Error implementing the method </span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">record</span><span class="p">.</span><span class="n">__name__</span><span class="si">}</span><span class="sh">"</span><span class="s"> in class Logs.</span><span class="sh">'</span>
            <span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="na-linha-1-à-2">Na linha <code class="language-plaintext highlighter-rouge">1</code> à <code class="language-plaintext highlighter-rouge">2</code></h3>

<p>Podemos observar que temos alguns parâmetros no método <code class="language-plaintext highlighter-rouge">record</code>, eles são:</p>

<ul>
  <li>message - Este parâmetro é obrigatório, é nele que iremos colocar nossa mensagem de log.</li>
  <li>type - Este parâmetro nomeado está como padrão o valor de uma string <strong>exception</strong>, isso significa que quando formos criar um log, se não especificarmos o level que queremos de acordo com nosso dicionário <code class="language-plaintext highlighter-rouge">self.levels</code>, irá ser registrado no level <code class="language-plaintext highlighter-rouge">exception</code>.</li>
  <li>colorize - Parâmetro booleano que se estiver <code class="language-plaintext highlighter-rouge">True</code>, nossos logs serão coloridos.</li>
</ul>

<blockquote>
  <p>NOTA: O log só será mostrado colorido se carregarmos o arquivo de log pelo terminal, então, tenha em mente que se usar cores, será chato ler esse arquivo em um editor de texto, por exemplo.</p>
</blockquote>

<p>Os parâmetros <strong>exc_info</strong>, <strong>*args</strong> e <strong>**kwargs</strong>, estão sendo implementados porque as funções de level do módulo <code class="language-plaintext highlighter-rouge">logging</code>, <strong>exception</strong> e <strong>error</strong>, contem esses parâmetro também, e como nosso método <code class="language-plaintext highlighter-rouge">record</code> está sendo implementado em cima dessas funções de level, é necessário atribuir os mesmos argumentos.</p>

<h3 id="na-linha-3-à-4">Na linha <code class="language-plaintext highlighter-rouge">3</code> à <code class="language-plaintext highlighter-rouge">4</code></h3>

<p>Fazemos um <code class="language-plaintext highlighter-rouge">for</code> e nele contendo nossa primeira condição de <code class="language-plaintext highlighter-rouge">if</code>, que faz uma atribuição de igualdade do tipo de level que irá ser usado através do parâmetro <code class="language-plaintext highlighter-rouge">type</code>.</p>

<h3 id="na-linha-5-à-22">Na linha <code class="language-plaintext highlighter-rouge">5</code> à <code class="language-plaintext highlighter-rouge">22</code></h3>

<p>Fazemos outra condição <code class="language-plaintext highlighter-rouge">if</code>, porem booleana. Se o parâmetro <code class="language-plaintext highlighter-rouge">colorize</code> for <strong>False</strong>, então carregamos o formado padrão do nosso log especificado no método <code class="language-plaintext highlighter-rouge">__init__</code>, ou seja, carregamos o <code class="language-plaintext highlighter-rouge">self.formated</code>. Caso a condição seja <code class="language-plaintext highlighter-rouge">else</code>, carregamos outra condição de igualdade para verificar os levels e atribuir cores diferentes para cada um deles. Por exemplo, o level de <strong>Warning</strong> receberá a cor <em>amarela</em>, o de <strong>Error</strong> e <strong>Exception</strong>, a cor <em>vermelha</em>, já o de <strong>Debug</strong>, <strong>Info</strong> e demais, receberão a cor <em>cyan</em>.</p>

<h3 id="na-linha-23-à-24">Na linha <code class="language-plaintext highlighter-rouge">23</code> à <code class="language-plaintext highlighter-rouge">24</code></h3>

<p>Aqui estamos aplicando as configuração básicas para nosso registro de logs através da função <code class="language-plaintext highlighter-rouge">basicConfig</code> do módulo <code class="language-plaintext highlighter-rouge">logging</code>. Repara que temos o parâmetro <code class="language-plaintext highlighter-rouge">level</code> e estamos passando o level <code class="language-plaintext highlighter-rouge">INFO</code>. Precisamos passando algum level para este parâmetro, senão não conseguimos criar nossos registros de log.</p>

<h3 id="na-linha-25-à-29">Na linha <code class="language-plaintext highlighter-rouge">25</code> à <code class="language-plaintext highlighter-rouge">29</code></h3>

<p>Nessas linhas estamos pegando os levels do meu dicionário e aplicando um <em>Callable</em> com os parâmetros necessários. Estamos atribuindo uma condição e, se for do level <strong>exception</strong>, irá carregar um parâmetro a mais, o <code class="language-plaintext highlighter-rouge">exc_info</code>.</p>

<h3 id="na-linha-30-à-32">Na linha <code class="language-plaintext highlighter-rouge">30</code> à <code class="language-plaintext highlighter-rouge">32</code></h3>

<p>Caso aconteça de não cair em nenhum retorno (<code class="language-plaintext highlighter-rouge">return</code>) irá disparar uma <strong>raise</strong> que imprimirá uma mensagem ao usuário de erro de implementação do método.</p>

<h2 id="código-completo">Código completo</h2>

<p>Depois de destrinchar nosso código por partes, obtemos o seguinte resultado do mesmo completo:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="n">logging</span>
<span class="kn">from</span> <span class="n">sys</span> <span class="kn">import</span> <span class="n">platform</span>


<span class="k">def</span> <span class="nf">unix_color</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">platform</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">win</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">return</span> <span class="n">value</span>


<span class="k">class</span> <span class="nc">Colors</span><span class="p">:</span>
    <span class="n">NONE</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[0m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">BLACK</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[30m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">MAGENTA</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[95m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">BLUE</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[94m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">GREEN</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[92m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">RED</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[91m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">YELLOW</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[93m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">CYAN</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[96m</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">WHITE</span> <span class="o">=</span> <span class="nf">unix_color</span><span class="p">(</span><span class="sh">"</span><span class="se">\x1b</span><span class="s">[97m</span><span class="sh">"</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">Logs</span><span class="p">(</span><span class="n">Colors</span><span class="p">):</span>

    <span class="n">FILENAME</span> <span class="o">=</span> <span class="sh">"</span><span class="s">mylogs.log</span><span class="sh">"</span>
    <span class="n">DATE_FORMAT</span> <span class="o">=</span> <span class="sh">"</span><span class="s">%m/%d/%Y %I:%M:%S %p</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">filename</span><span class="o">=</span><span class="n">FILENAME</span><span class="p">,</span> <span class="n">datefmt</span><span class="o">=</span><span class="n">DATE_FORMAT</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">filename</span> <span class="o">=</span> <span class="n">filename</span>
        <span class="n">self</span><span class="p">.</span><span class="n">date_format</span> <span class="o">=</span> <span class="n">datefmt</span>
        <span class="n">self</span><span class="p">.</span><span class="n">formated</span> <span class="o">=</span> <span class="sh">"</span><span class="s">%(levelname)s:[%(asctime)s]: %(message)s</span><span class="sh">"</span>

        <span class="n">self</span><span class="p">.</span><span class="n">levels</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">exception</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">exception</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">info</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">info</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">warning</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">warning</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">error</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">debug</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">debug</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">critical</span><span class="sh">"</span><span class="p">:</span> <span class="n">logging</span><span class="p">.</span><span class="n">critical</span>
        <span class="p">}</span>

    <span class="k">def</span> <span class="nf">record</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">exc_info</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="sh">"</span><span class="s">exception</span><span class="sh">"</span><span class="p">,</span> <span class="n">colorize</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
               <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">levels</span><span class="p">.</span><span class="nf">keys</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">item</span> <span class="o">==</span> <span class="nb">type</span><span class="p">:</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">colorize</span><span class="p">:</span>
                    <span class="n">formated</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">formated</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">item</span> <span class="o">==</span> <span class="sh">"</span><span class="s">warning</span><span class="sh">"</span><span class="p">:</span>
                        <span class="n">formated</span> <span class="o">=</span> <span class="p">(</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">YELLOW</span><span class="si">}</span><span class="s">%(levelname)s:</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">GREEN</span><span class="si">}</span><span class="s">[%(asctime)s]</span><span class="sh">"</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">NONE</span><span class="si">}</span><span class="s">: %(message)s</span><span class="sh">"</span>
                        <span class="p">)</span>
                    <span class="k">elif</span> <span class="n">item</span> <span class="o">==</span> <span class="sh">"</span><span class="s">error</span><span class="sh">"</span> <span class="ow">or</span> <span class="n">item</span> <span class="o">==</span> <span class="sh">"</span><span class="s">exception</span><span class="sh">"</span><span class="p">:</span>
                        <span class="n">formated</span> <span class="o">=</span> <span class="p">(</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">RED</span><span class="si">}</span><span class="s">%(levelname)s:</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">GREEN</span><span class="si">}</span><span class="s">[%(asctime)s]</span><span class="sh">"</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">NONE</span><span class="si">}</span><span class="s">: %(message)s</span><span class="sh">"</span>
                        <span class="p">)</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">formated</span> <span class="o">=</span> <span class="p">(</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">CYAN</span><span class="si">}</span><span class="s">%(levelname)s:</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">GREEN</span><span class="si">}</span><span class="s">[%(asctime)s]</span><span class="sh">"</span>
                            <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">NONE</span><span class="si">}</span><span class="s">: %(message)s</span><span class="sh">"</span>
                        <span class="p">)</span>
                <span class="n">logging</span><span class="p">.</span><span class="nf">basicConfig</span><span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">filename</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="n">formated</span><span class="p">,</span>
                                    <span class="n">datefmt</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">date_format</span><span class="p">,</span> <span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="p">.</span><span class="n">INFO</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">item</span> <span class="o">==</span> <span class="sh">"</span><span class="s">exception</span><span class="sh">"</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">levels</span><span class="p">[</span><span class="n">item</span><span class="p">](</span><span class="n">msg</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">exc_info</span><span class="o">=</span><span class="n">exc_info</span><span class="p">,</span>
                                             <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">levels</span><span class="p">[</span><span class="n">item</span><span class="p">](</span><span class="n">msg</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span>
            <span class="sa">f</span><span class="sh">'</span><span class="s">Error implementing the method </span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">record</span><span class="p">.</span><span class="n">__name__</span><span class="si">}</span><span class="sh">"</span><span class="s"> in class Logs.</span><span class="sh">'</span>
        <span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="como-usar">Como usar?</h2>

<p>Para fazer o uso é muito fácil, apenas instancie a classe e passe os parâmetros necessários, e chamando a criação de logs através de <strong>try/except</strong>.</p>

<p>Vamos fazer isso em um arquivo externo, criando com o nome de <strong>setup.py</strong> no mesmo diretório do <strong>logger.py</strong>:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nb">touch </span>setup.py</code></pre></figure>

<p>Agora vamos popular esse arquivo com o seguinte código:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="kn">from</span> <span class="n">logger</span> <span class="kn">import</span> <span class="n">Logs</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">logs</span> <span class="o">=</span> <span class="nc">Logs</span><span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="sh">"</span><span class="s">calcs.log</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">n1</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Digite o dividendo: </span><span class="sh">"</span><span class="p">))</span>
        <span class="n">n2</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Digite o divisor: </span><span class="sh">"</span><span class="p">))</span>
        <span class="n">result</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">O quociente é: </span><span class="si">{</span><span class="n">n1</span> <span class="o">/</span> <span class="n">n2</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">logs</span><span class="p">.</span><span class="nf">record</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="sh">"</span><span class="s">info</span><span class="sh">"</span><span class="p">,</span> <span class="n">colorize</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">ZeroDivisionError</span> <span class="k">as</span> <span class="n">text</span><span class="p">:</span>
        <span class="n">logs</span><span class="p">.</span><span class="nf">record</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">colorize</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">raise</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Observe que está sendo atribuindo o registro de logs no <strong>try</strong> e no <strong>except</strong> porem, cada um deles com suas características.</p>

<p>No <strong>try</strong>, está sendo registrado um log apenas de informação, passando o valor <strong>info</strong> para parâmetro <code class="language-plaintext highlighter-rouge">type</code>, onde a mensagem gravada é o resultado da divisão.</p>

<p>No <strong>exception</strong>, não temos o parâmetro <code class="language-plaintext highlighter-rouge">type</code> porque será registrado uma exceção de erro, e o valor de <code class="language-plaintext highlighter-rouge">type</code> por padrão é uma <em>exception</em>. Esta sendo gravado o texto de erro por divisão por zero (que não existe). Também usamos a palavrão <code class="language-plaintext highlighter-rouge">raise</code>, para estourar o erro na tela também. Se tirarmos, apenas registrará o log.</p>

<h2 id="conclusão">Conclusão</h2>

<p>Esse foi um simples post com intuito de te dar um base de orientação sobre gravar registros de logs com Python. Lembre-se que isso não é tudo, você pode ver mais detalhes na documentação. Você pode acessar nos links abaixo que vou deixar. Espero que tenha gostado e até a próxima. :)</p>

<blockquote>
  <p>Nota: Sempre veja a versão da documentação antes de estudar.</p>
</blockquote>

<p><strong>Documentação:</strong></p>

<ul>
  <li><a href="https://docs.python.org/pt-br/3/library/logging.html">https://docs.python.org/pt-br/3/library/logging.html</a></li>
</ul>]]></content><author><name>William C. Canin</name></author><category term="python" /><category term="logs" /><summary type="html"><![CDATA[Como criar logs utilizando Python? Talvez foi isso que você procurou na internet, e se está lendo, talvez você possa ter encontrado o que pesquisou]]></summary></entry><entry><title type="html">Video - Criando módulo para colorir print e input no Python</title><link href="https://williamcanin.github.io/blog/criando-modulo-para-colorir-print-e-input-no-python/" rel="alternate" type="text/html" title="Video - Criando módulo para colorir print e input no Python" /><published>2019-12-11T02:32:01+00:00</published><updated>2019-12-11T02:32:01+00:00</updated><id>https://williamcanin.github.io/blog/criando-modulo-para-colorir-print-e-input-no-python</id><content type="html" xml:base="https://williamcanin.github.io/blog/criando-modulo-para-colorir-print-e-input-no-python/"><![CDATA[<p>Olá, este post você irá entender um pouco do conceito de sequências de escape (ANSI Code) e aprender a criar um módulo em <a href="https://python.org" target="_blank"><strong>Python</strong></a> deixando as cores do terminal (sistemas baseado em <strong>UNIX</strong>) coloridas. É claro que você pode implementar mais coisas para este módulo, porém esse é apenas um conceito básico de como o poder de sua criação pode criar coisas bacanas com Python ;)</p>

<p>Acesse a playlist abaixo. Voilá!</p>

<div class="video-wrapper">
  <iframe src="https://www.youtube.com/embed/VW-UphhjJ3E?si=PPdXSrMvJHmu00S_" title="Criando módulo para colorir" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
  </iframe>
  <noscript>
    <p>The video is not available for embedding. Watch it on <a href="https://www.youtube.com/embed/VW-UphhjJ3E?si=PPdXSrMvJHmu00S_" target="_blank">YouTube</a>.
    </p>
  </noscript>
</div>]]></content><author><name>William C. Canin</name></author><category term="python" /><category term="video" /><summary type="html"><![CDATA[Aprenda a criar um módulo para color as funções print e input no Python de forma nativa utilizando Ansi Code.]]></summary></entry><entry><title type="html">Como encurtar URL Raw do Github e ter uma url personalizada</title><link href="https://williamcanin.github.io/blog/como-encurtar-url-raw-do-github-e-ter-uma-url-personalizada/" rel="alternate" type="text/html" title="Como encurtar URL Raw do Github e ter uma url personalizada" /><published>2019-10-20T16:49:01+00:00</published><updated>2019-10-20T16:49:01+00:00</updated><id>https://williamcanin.github.io/blog/como-encurtar-url-raw-do-github-e-ter-uma-url-personalizada</id><content type="html" xml:base="https://williamcanin.github.io/blog/como-encurtar-url-raw-do-github-e-ter-uma-url-personalizada/"><![CDATA[<p>Olá, tudo joinha? nesse post vou demonstrar como você pode deixar as urls RAW no <a href="https://github.com" target="_blank"><strong>Github</strong></a> bem mais encurtadas e eficientes. Vamos lá.</p>

<p>Primeiro você precisa do <a href="https://curl.haxx.se/" target="_blank"><strong>curl</strong></a> na sua máquina, pois vamos precisar dele para realizar uma façanha. _</p>

<blockquote>
  <p>Nota: _O <a href="https://curl.haxx.se/" target="_blank"><strong>curl</strong></a> está disponível praticamente em todos sistemas operacionais. Sinta-se a vontade para instalar o mesmo da maneira que mais lhe convém.</p>
</blockquote>

<p>Agora precisamos usar o serviço de encurtamento de url que a própria <a href="https://github.com" target="_blank"><strong>Github</strong></a> fornece, que é o <a href="https://git.io" target="_blank"><strong>Git.io</strong></a>. Se você encurtar suas URL’s através do site, a URL encurtada terá um <strong>code</strong> de “<em>sopa de letrinhas</em>” automaticamente escolhida pelo serviço. Por exemplo:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git.io/abcdef123456
</code></pre></div></div>

<p><strong>Como faço para ter uma url personalizada com o git.io?</strong></p>

<p><em>Essa é uma pergunta muito fácil, mande outra mais difícil</em>.</p>

<p>Ta bem, eu respondo… a resposta é: <strong>curl</strong>! No qual foi requisitado acima. Ele quem faz esse trabalho.</p>

<p>A sintaxe para o encurtamento de URL com nome personalizável é:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>curl <span class="nt">-i</span> https://git.io <span class="nt">-F</span> <span class="s2">"url=**URL_ORIGINAL_RAW**"</span> <span class="nt">-F</span> <span class="s2">"code=**NOME_DESEJADO**"</span></code></pre></figure>

<ul>
  <li>
    <p>Onde em <strong>URL_ORIGINAL_RAW</strong> você deve colocar a URL original Raw completa, incluindo o http ou https.</p>
  </li>
  <li>
    <p>Onde em <strong>NOME_DESEJADO</strong> você deve escolher um nome/código para sua URL.</p>
  </li>
</ul>

<blockquote>
  <p>Nota: Em <strong>NOME_DESEJADO</strong>, o mesmo deve ser único, ou seja, você tem que escolher um nome/código que ninguem escolheu ainda. Para saber disso, simplesmente execute o comando, e veja se na saída obteve sucesso, ou não.</p>
</blockquote>

<p>Vamos a um exemplo:</p>

<p><strong>Exemplo de encurtamento:</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>curl <span class="nt">-i</span> https://git.io <span class="nt">-F</span> <span class="s2">"url=https://raw.githubusercontent.com/my_user/my_project/master/scriptizinho.py"</span> <span class="nt">-F</span> <span class="s2">"code=**scriptizinho**"</span></code></pre></figure>

<p><strong>Exemplo de saída do encurtamento:</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre>HTTP/1.1 201 Created
Server: Cowboy
Connection: keep-alive
Date: Sun, 20 Oct 2019 14:20:01 GMT
Status: 201 Created
Content-Type: text/html<span class="p">;</span><span class="nv">charset</span><span class="o">=</span>utf-8
Location: https://git.io/scriptizinho
Content-Length: 94
X-Xss-Protection: 1<span class="p">;</span> <span class="nv">mode</span><span class="o">=</span>block
X-Content-Type-Options: nosniff
X-Frame-Options: SAMEORIGIN
X-Runtime: 0.009777
X-Node: 836916c6-b665-4105-9926-2f6f6c1d3cc4
X-Revision: 392798d237fc1aa5cd55cada10d2945773e741a8
Strict-Transport-Security: max-age<span class="o">=</span>31536000<span class="p">;</span> includeSubDomains
Via: 1.1 vegur

https://raw.githubusercontent.com/my_user/my_project/master/scriptizinho.py
</pre></td></tr></tbody></table></code></pre></figure>

<p>Caso de tudo certo, você terá uma saída parecida com essa acima, onde já na primeira linha o resultado é <strong>Created</strong>. Em <strong>Location</strong>, você pode ver sua <strong>nova</strong> URL personalizada.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://git.io/scriptizinho
</code></pre></div></div>

<p>Você também pode ignorar a url personalizada e deixar que o serviço escolha um <strong>code</strong> automaticamente para você, para isso remova a opção <strong>-F “code=”</strong> do comando.</p>

<p>Exemplo:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>curl <span class="nt">-i</span> https://git.io <span class="nt">-F</span> <span class="s2">"url=https://raw.githubusercontent.com/my_user/my_project/master/scriptizinho.py"</span></code></pre></figure>

<p>Saida do comando:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 201 Created
...
Location: https://git.io/dfsds4r
...
</code></pre></div></div>

<p>Eu fico por aqui, espero que eu tenha te ajudado. Abraços</p>]]></content><author><name>William C. Canin</name></author><category term="github" /><category term="git" /><category term="url" /><category term="shortener" /><summary type="html"><![CDATA[Cansado de compartilhar URL Raw do Github compridas? Lendo essa postagem você vai contornar isso.]]></summary></entry><entry><title type="html">Video - Manipulando arquivo JSON com Python.</title><link href="https://williamcanin.github.io/blog/manipulando-arquivo-json-com-python/" rel="alternate" type="text/html" title="Video - Manipulando arquivo JSON com Python." /><published>2019-09-02T21:31:46+00:00</published><updated>2019-09-02T21:31:46+00:00</updated><id>https://williamcanin.github.io/blog/manipulando-arquivo-json-com-python</id><content type="html" xml:base="https://williamcanin.github.io/blog/manipulando-arquivo-json-com-python/"><![CDATA[<p>Olá pessoa, este será um post para compartilhar uma minissérie de vídeo sobre a manipulação de
arquivo JSON com Python.</p>

<p>Abaixo você terá acesso a playlist que criei sobre esse feito, dê uma olhada. Abraços.</p>

<div class="video-wrapper">
  <iframe src="https://www.youtube.com/embed/videoseries?list=PLZ6kIzk4n3uRmlJUAIwTLqMIIcgaR3uPa" title="Manipulando arquivo JSON com Python" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
  </iframe>
  <noscript>
    <p>The video is not available for embedding. Watch it on <a href="https://www.youtube.com/embed/videoseries?list=PLZ6kIzk4n3uRmlJUAIwTLqMIIcgaR3uPa" target="_blank">YouTube</a>.
    </p>
  </noscript>
</div>]]></content><author><name>William C. Canin</name></author><category term="python" /><category term="json" /><category term="video" /><summary type="html"><![CDATA[Esse post incluíra uma série de vídeos falando como manipular arquivo JSON com Python.]]></summary></entry><entry><title type="html">Corrigindo erro de chaves no Arch Linux</title><link href="https://williamcanin.github.io/blog/corrigindo-erro-de-chaves-no-archlinux/" rel="alternate" type="text/html" title="Corrigindo erro de chaves no Arch Linux" /><published>2019-03-07T12:13:17+00:00</published><updated>2019-03-07T12:13:17+00:00</updated><id>https://williamcanin.github.io/blog/corrigindo-erro-de-chaves-no-archlinux</id><content type="html" xml:base="https://williamcanin.github.io/blog/corrigindo-erro-de-chaves-no-archlinux/"><![CDATA[<p>Se alguma vez você se deparou com erro de chaves públicas ao instalar um pacote no Arch Linux e não soube como resolver,então talvez essa dica abaixo pode te ajudar.</p>

<p>Abaixo você pode perceber que tentei instalar o pacote <a href="https://aur.archlinux.org/packages/spotify" target="_blank">spotify</a> no meu <a href="https://archlinux.org" target="_blank">Arch Linux</a> através do repositório AUR com o <a href="https://aur.archlinux.org/packages/yay/" target="_blank">yay</a>, e me retornou um erro de chave pública.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="code"><pre>  william at archlinux <span class="k">in </span>folder ~ <span class="o">(</span>python-3.7.4<span class="o">)</span> ○
 ⇨ yay <span class="nt">-S</span> spotify <span class="nt">--nodiffmenu</span> <span class="nt">--noeditmenu</span> <span class="nt">--noupgrademenu</span>
:: There are 5 providers available <span class="k">for </span>spotify:
:: Repository AUR
    1<span class="o">)</span> spotify 2<span class="o">)</span> spotify-dev 3<span class="o">)</span> spotify-legacy 4<span class="o">)</span> spotify094 5<span class="o">)</span> spotio

Enter a number <span class="o">(</span><span class="nv">default</span><span class="o">=</span>1<span class="o">)</span>: 1
:: Checking <span class="k">for </span>conflicts...
:: Checking <span class="k">for </span>inner conflicts...
<span class="o">[</span>Aur: 1]  spotify-1:1.1.10.546-1

  1 spotify                                  <span class="o">(</span>Build Files Exist<span class="o">)</span>
<span class="o">==&gt;</span> Packages to cleanBuild?
<span class="o">==&gt;</span> <span class="o">[</span>N]one <span class="o">[</span>A]ll <span class="o">[</span>Ab]ort <span class="o">[</span>I]nstalled <span class="o">[</span>No]tInstalled or <span class="o">(</span>1 2 3, 1-3, ^4<span class="o">)</span>
<span class="o">==&gt;</span> N
:: PKGBUILD up to <span class="nb">date</span>, Skipping <span class="o">(</span>1/1<span class="o">)</span>: spotify
:: Parsing SRCINFO <span class="o">(</span>1/1<span class="o">)</span>: spotify
<span class="o">==&gt;</span> Criando o pacote: spotify 1:1.1.10.546-1 <span class="o">(</span>dom 11 ago 2019 11:11:33 <span class="nt">-03</span><span class="o">)</span>
<span class="o">==&gt;</span> Obtendo fontes...
  -&gt; Encontrado spotify.protocol
  -&gt; Encontrado LICENSE
  -&gt; Encontrado spotify-1.1.10.546-Release
  -&gt; Encontrado spotify-1.1.10.546-Release.sig
  -&gt; Encontrado spotify-1.1.10.546-x86_64.deb
  -&gt; Encontrado spotify-1.1.10.546-x86_64-Packages
<span class="o">==&gt;</span> Validando <span class="nb">source </span>arquivos com sha512sums...
    spotify.protocol ... Passou
    LICENSE ... Passou
    spotify-1.1.10.546-Release ... Ignorada
    spotify-1.1.10.546-Release.sig ... Ignorada
<span class="o">==&gt;</span> Validando source_x86_64 arquivos com sha512sums...
    spotify-1.1.10.546-x86_64.deb ... Passou
    spotify-1.1.10.546-x86_64-Packages ... Passou
<span class="o">==&gt;</span> Verificando assinatura de arquivo fonte com gpg...
    spotify-1.1.10.546-Release ... FALHOU <span class="o">(</span>chave pública inválida 2EBF997C15BDA244B6EBF5D84773BD5E130D1D45<span class="o">)</span>
<span class="o">==&gt;</span> ERRO: Uma ou mais assinaturas PGP não puderam ser verificadas!
Error downloading sources: spotify

  william at archlinux <span class="k">in </span>folder ~ <span class="o">(</span>python-3.7.4<span class="o">)</span>
 ⇨
</pre></td></tr></tbody></table></code></pre></figure>

<p>Observe que ao final do comando me retornou a chave que está dando problema, nesse caso é a chave <strong>2EBF997C15BDA244B6EBF5D84773BD5E130D1D45</strong>. É essa chave que vamos adicionar.</p>

<p>Para corrigir erros de chave no Arch Linux, você usará o comando <code class="language-plaintext highlighter-rouge">pacman-key</code>. Veja abaixo como adicionar uma chave no ficheiro do seu Arch Linux.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sudo </span>pacman-key <span class="nt">-r</span> 2EBF997C15BDA244B6EBF5D84773BD5E130D1D45
<span class="nb">sudo </span>pacman-key <span class="nt">--lsign-key</span> 2EBF997C15BDA244B6EBF5D84773BD5E130D1D45
<span class="nb">sudo </span>pacman-key <span class="nt">--refresh-keys</span></code></pre></figure>

<p>Após executar todos comando acima, você deve repetir o processo de instalação do pacote novamente com o seguinte comando no <code class="language-plaintext highlighter-rouge">yay</code>:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">yay <span class="nt">-S</span> spotify <span class="nt">--nodiffmenu</span> <span class="nt">--noeditmenu</span></code></pre></figure>

<p>Caso o erro de chave persista mesmo você fazendo os passos acima, dê uma olhada nos comentários da página do pacote para ver se o erro é do desenvolvedor. Nesse caso, você pode instalar qualquer pacote do AUR com erros de chaves ignorando a assinatura PGP com o comando abaixo:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">yay <span class="nt">-S</span> <span class="nt">--mflags</span> <span class="nt">--skipinteg</span> spotify</code></pre></figure>

<p>Até a próxima ;)</p>]]></content><author><name>William C. Canin</name></author><category term="archlinux" /><category term="keys" /><summary type="html"><![CDATA[Você já deve ter se deparado com problemas de chaves públicas ao instalar um pacote no Arch Linux, certo? Pois esse post de dica rápida pode ajudar a você a resolver isso.]]></summary></entry><entry><title type="html">Transações no banco de dados através do Shell script</title><link href="https://williamcanin.github.io/blog/transacoes-no-banco-de-dados-atraves-do-shellscript/" rel="alternate" type="text/html" title="Transações no banco de dados através do Shell script" /><published>2018-08-28T08:23:33+00:00</published><updated>2018-08-28T08:23:33+00:00</updated><id>https://williamcanin.github.io/blog/transacoes-no-banco-de-dados-atraves-do-shellscript</id><content type="html" xml:base="https://williamcanin.github.io/blog/transacoes-no-banco-de-dados-atraves-do-shellscript/"><![CDATA[<nav class="toc" id="toc" data-toc-selector=".post-content" data-toc-max-level="3" data-toc-scroll-offset="20">
  <div class="toc-head">
    <h2>Índice</h2>
    <button class="toc-toggle" aria-expanded="true" type="button">Fechar</button>
  </div>
  <div class="toc-list-wrapper">
    <ul class="toc-list" role="list"></ul>
    <p class="toc-empty" style="display:none">No titles found. Remove TOC!</p>
  </div>
</nav>

<script>
(function () {
  const minLayoutWidth = 1830;

  const toc = document.getElementById('toc');
  if (toc) {
    const sentinel = document.createElement('div');
    toc.parentNode.insertBefore(sentinel, toc);

    function shouldApplyFixed() {
      return window.innerWidth > minLayoutWidth;
    }

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (shouldApplyFixed()) {
          if (!entry.isIntersecting) {
            toc.classList.add('toc-fixed');
          } else {
            toc.classList.remove('toc-fixed');
          }
        } else {
          toc.classList.remove('toc-fixed');
        }
      },
      { threshold: 0 }
    );
    observer.observe(sentinel);

    window.addEventListener('resize', () => {
        if (!shouldApplyFixed()) {
            toc.classList.remove('toc-fixed');
        }
    });
  }

  function slugify(text) {
    if (!text) return '';
    return text.toString().toLowerCase().trim()
      .normalize('NFKD').replace(/[\u0300-\u036f]/g, '')
      .replace(/[^\w\s-]/g, '').replace(/\s+/g, '-').replace(/--+/g, '-');
  }

  function buildTOC(tocEl) {
    const selector = tocEl.dataset.tocSelector || '.post-content' || '.page-content';
    const maxLevel = parseInt(tocEl.dataset.tocMaxLevel || '3', 10);
    const offset = parseInt(tocEl.dataset.tocScrollOffset || '20', 10);
    const root = document.querySelector(selector);

    if (!root) {
      tocEl.querySelector('.toc-empty').textContent = `Content not found (${selector})`;
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const headings = Array.from(root.querySelectorAll(Array(maxLevel).fill(0).map((_, i) => `h${i + 1}`).join(',')))
      .filter(h => !tocEl.contains(h))
      .filter(h => parseInt(h.tagName.substring(1)) <= maxLevel);

    if (headings.length === 0) {
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const tocRoot = tocEl.querySelector('.toc-list');
    tocRoot.innerHTML = '';

    const idCounts = {};
    headings.forEach(h => {
      if (!h.id) {
        let id = slugify(h.textContent);
        if (!id) id = 'section';
        if (idCounts[id]) { idCounts[id] += 1; id = id + '-' + idCounts[id]; }
        else idCounts[id] = 1;
        h.id = id;
      }
    });

    // Build hierarchical tree
    const stack = [{ level: 0, ul: tocRoot }];
    headings.forEach((h, i) => {
      const level = parseInt(h.tagName.substring(1));
      const li = document.createElement('li');
      const a = document.createElement('a');
      a.href = '#' + h.id;
      a.textContent = h.textContent.trim();
      a.addEventListener('click', e => {
        e.preventDefault();
        window.scrollTo({ top: h.getBoundingClientRect().top + window.scrollY - offset, behavior: 'smooth' });
        history.replaceState(null, '', '#' + h.id);

        // // Clicking on the TOC menu closes the TOC
        // const wrapper = tocEl.querySelector('.toc-list-wrapper');
        // const toggle = tocEl.querySelector('.toc-toggle');
        // wrapper.style.display = 'none';
        // toggle.setAttribute('aria-expanded', 'false');
        // toggle.textContent = '{ { include.btn_show } }';
      });
      li.appendChild(a);

      while (stack.length > 1 && level <= stack[stack.length - 1].level) stack.pop();
      const parent = stack[stack.length - 1].ul;
      parent.appendChild(li);

      const next = headings[i + 1];
      if (next) {
        const nextLevel = parseInt(next.tagName.substring(1));
        if (nextLevel > level) {
          const newUl = document.createElement('ul');
          li.appendChild(newUl);
          stack.push({ level, ul: newUl });
        }
      }
    });

    // Active Highlight
    const links = tocRoot.querySelectorAll('a');
    function onScroll() {
      const fromTop = window.scrollY + offset + 1;
      let current = headings[0];
      for (let i = 0; i < headings.length; i++) {
        if (headings[i].offsetTop <= fromTop) current = headings[i];
      }
      links.forEach(l => l.classList.toggle('active', l.getAttribute('href') === '#' + current.id));
    }
    window.addEventListener('scroll', onScroll, { passive: true });
    onScroll();
  }

  document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.toc').forEach(toc => {
      buildTOC(toc);
      const toggle = toc.querySelector('.toc-toggle');
      const wrapper = toc.querySelector('.toc-list-wrapper');

      wrapper.style.display = 'none';
      toggle.setAttribute('aria-expanded', 'false');
      toggle.textContent = 'Abrir';

      toggle.addEventListener('click', () => {
        const expanded = toggle.getAttribute('aria-expanded') === 'true';
        wrapper.style.display = expanded ? 'none' : 'block';
        toggle.setAttribute('aria-expanded', (!expanded).toString());
        toggle.textContent = expanded ? 'Abrir' : 'Fechar';
      });

      const tocTop = toc.offsetTop;

      function handleScrollFix() {
        if (window.innerWidth <= minLayoutWidth) {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.zIndex = '';
          toc.style.width = '';
          return;
        }

        const scrollTop = window.scrollY || document.documentElement.scrollTop;

        // Fixes pinning behavior in Chrome
        if (scrollTop >= tocTop) {
          toc.classList.add('fixed');
          toc.style.position = 'fixed';
          toc.style.top = '0';
          toc.style.zIndex = '9999';
          // toc.style.width = toc.offsetWidth + 'px';
        } else {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.width = '';
        }

        // // Automatically closes the TOC if it is open and scrolled to it.
        // const rect = toc.getBoundingClientRect();
        // if (rect.top <= 0 && toggle.getAttribute('aria-expanded') === 'true') {
        //   wrapper.style.display = 'none';
        //   toggle.setAttribute('aria-expanded', 'false');
        //   toggle.textContent = '{ { include.btn_show } }';
        // }
      }

      window.addEventListener('scroll', handleScrollFix, { passive: true });
      window.addEventListener('resize', handleScrollFix);
      handleScrollFix();
    });
  });
})();
</script>

<p>Olá pessoas, vamos falar de Shell script, que é algo que gosto muito. :)</p>

<h1 id="introdução">Introdução</h1>

<p>Bom, se você é usuário Linux sabe muito bem o que é <a href="https://pt.wikipedia.org/wiki/Shell_script" target="_blank">Shell Script</a>, uma linguagem usuda em vários sistemas operativos, até aqui tudo bem, mas…o que muitos não sabem é dá para fazer transações no banco de dados através da mesma.</p>

<ul>
  <li>Você: Sério?</li>
  <li>Eu: Sério cara.</li>
</ul>

<p>O que vamos ver neste post é exatamente isso, uma conexão com um banco de dados; criação de um database; e a criação de uma tabela. Não irei abordar um CRUD completo, pois com base na conexão e criação de uma tabela, você já será apto para navegar em sua mente e realizar as demais transações no banco de dados, tendo como requerimento apenas conhecimento de PL/SQL.</p>

<p>Os bancos de dados que irei abordar aqui serão o <a href="https://www.postgresql.org" target="_blank">PostgreSQL</a> e o <a href="https://www.mysql.com" target="_blank">MySQL</a>, então suponho que você já tenha um dos dois instalados em sua máquina; com as configurações de usuário e senha realizadas; e o serviço iniciado.</p>

<h1 id="requerimentos">Requerimentos</h1>

<ul>
  <li>PostgreSQL ou Mysql instalado.</li>
  <li>Conhecimento básico em PL/SQL.</li>
  <li>Força de vontade :D</li>
</ul>

<h1 id="postgresql">PostgreSQL</h1>

<h2 id="preparando-ambiente">Preparando ambiente</h2>

<p>Por padrão, o PostgreSQL já cria um usuário e uma role com o nome <strong>postgres</strong>, você pode fazer um teste de conexão com o seguinte comando:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>psql <span class="nt">-U</span> postgres</code></pre></figure>

<p>ou</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-u</span> postgres psql</code></pre></figure>

<blockquote>
  <p>NOTA: O usuário <strong>postgres</strong> tem permissão de SUPERUSER, então você pode criar outros usuários, databases, tabelas e outros respectivas permissões com ele.</p>
</blockquote>

<h3 id="criando-um-database-no-postgresql">Criando um DATABASE no PostgreSQL</h3>

<p>Uma vez que você já está conectado ao <code class="language-plaintext highlighter-rouge">psql</code> com usuário <strong>postgres</strong>, vamos criar um DATABASE onde vamos trabalhar nossas transações:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">postgres</span><span class="o">=</span><span class="c"># CREATE DATABASE my_db;</span></code></pre></figure>

<blockquote>
  <p>NOTA: Mais adiante, criamos nossa DATABASE através de uma função em nosso projeto, porém, vale lembrar que o <strong>CREATE DATABASE</strong> no PostgreSQL não tem opção <strong>IF NOT EXISTS</strong> e só podemos executar uma única instrução do <strong>CREATE DATABASE</strong>, não conseguimos executa-lo dentro de um bloco de transação. Com essas informações, foi usado outras técnicas com Shell Script para verificar se DATABASE não existe e assim criar o mesmo.</p>
</blockquote>

<h2 id="iniciando-projeto">Iniciando projeto</h2>

<h2 id="criando-pasta-de-ambiente-do-projeto">Criando pasta de ambiente do projeto</h2>

<p>Vamos criar uma pasta para nosso projeto e entrar na mesma com o comando abaixo:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">mkdir</span> ~/sh_postgresql<span class="p">;</span> <span class="nb">cd</span> <span class="nv">$_</span></code></pre></figure>

<h2 id="criando-arquivo-de-configuração">Criando arquivo de configuração</h2>

<p>Para fins de boas normas de projeto, vamos criar o arquivo <strong>config.conf</strong> na base do nosso projeto, e armazenar nossas variáveis global.</p>

<p>Conteúdo do arquivo: <strong>config.conf</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">DB</span><span class="o">=</span><span class="s2">"my_db"</span>
<span class="nv">HOST</span><span class="o">=</span><span class="s2">"localhost"</span>
<span class="nv">PORT</span><span class="o">=</span><span class="s2">"5432"</span>
<span class="nv">USER</span><span class="o">=</span><span class="s2">"postgres"</span>
<span class="nv">TABLE</span><span class="o">=</span><span class="s2">"films"</span></code></pre></figure>

<p>Essas variáveis vão ser responsáveis por qualquer tipo de transação no banco de dados.</p>

<h2 id="criando-bibliotecas-para-nosso-projeto">Criando bibliotecas para nosso projeto</h2>

<p>Sempre que criamos um projeto, é interessante dividir partes do nosso código e fazer essas partes virarem bibliotecas, ou seja, pequenos trechos de código onde podemos importar a qualquer momento. Vamos criar nossas bibliotecas na pasta <strong>libs</strong>.</p>

<h3 id="biblioteca-create_databasebash">Biblioteca <strong>create_database.bash</strong></h3>

<p>A primeira <strong>lib</strong> (biblioteca) que vamos criar é a <strong>create_database.bash</strong>. Essa biblioteca irá conter uma função para criar nossa DATABASE caso ela não exista.</p>

<p>Conteúdo do arquivo: <strong>libs/create_database.bash</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">function </span>_create_database<span class="o">()</span> <span class="o">{</span>
  psql <span class="nt">-h</span> <span class="nv">$HOST</span> <span class="nt">-p</span> <span class="nv">$PORT</span> <span class="nt">-U</span> <span class="nv">$USER</span> <span class="nt">-tc</span> <span class="s2">"SELECT 1 FROM pg_database WHERE datname = '</span><span class="nv">$DB</span><span class="s2">'"</span> | <span class="nb">grep</span> <span class="nt">-q</span> 1 <span class="o">||</span> psql <span class="nt">-h</span> <span class="nv">$HOST</span> <span class="nt">-p</span> <span class="nv">$PORT</span> <span class="nt">-U</span> <span class="nv">$USER</span> <span class="nt">-c</span> <span class="s2">"CREATE DATABASE </span><span class="nv">$DB</span><span class="s2">"</span>
<span class="o">}</span></code></pre></figure>

<p>Em <a href="#criando-um-database-no-postgresql">Criando um DATABASE no PostgreSQL</a>, criamos nosso DATABASE manualmente através do <strong>psql</strong>, mas caso não criassemos, essa função já seria responsável por criar.</p>

<h3 id="biblioteca-create_tablebash">Biblioteca <strong>create_table.bash</strong></h3>

<p>Outra <strong>lib</strong> (biblioteca) que vamos criar é a <strong>create_table.bash</strong>. Essa bibliotea irá conter uma função para criar nossa TABLE. Você pode ser bem mais dinâmico ao criar suas “<em>libs</em>”, como esse é um post para apenas lhe dar uma ideia, vou ser bem direto nessa biblioteca de criação de TABLE.</p>

<p>Conteúdo do arquivo: <strong>libs/create_table.bash</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="k">function </span>_create_table<span class="o">()</span> <span class="o">{</span>
  psql <span class="nt">-h</span> <span class="nv">$HOST</span> <span class="nt">-p</span> <span class="nv">$PORT</span> <span class="nt">-U</span> <span class="nv">$USER</span> <span class="nt">-d</span> <span class="nv">$DB</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">

  </span><span class="se">\c</span><span class="sh"> DB

  CREATE TABLE IF NOT EXISTS </span><span class="nv">$TABLE</span><span class="sh"> (
    id          char(5) CONSTRAINT firstkey PRIMARY KEY,
    title       varchar(40) NOT NULL,
    did         integer NOT NULL,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute
  );
</span><span class="no">EOF
</span><span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="criando-o-programa-principal">Criando o programa principal</h2>

<p>Vamos agora criar um arquivo chamando <strong>setup.bash</strong>, nesse arquivo iremos carregar nosso arquivo de configuração (<strong>config.conf</strong>) e nossas <em>libs</em>. Ele também terá um menu de interação com o usuário.</p>

<p>Conteúdo do arquivo: <strong>setup.bash</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="c">#!/usr/bin/env bash</span>

<span class="nb">source </span>config.conf

<span class="nv">libs</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">ls</span> ./libs/<span class="k">*</span>.bash<span class="si">)</span><span class="s2">"</span>
<span class="k">for </span>lib <span class="k">in</span> <span class="nv">$libs</span><span class="p">;</span> <span class="k">do
  </span><span class="nb">source</span> <span class="nv">$lib</span>
<span class="k">done

case</span> <span class="nv">$1</span> <span class="k">in
  </span>createtb<span class="p">)</span>
    _create_database
    _create_table
  <span class="p">;;</span>
  <span class="k">*</span><span class="p">)</span>
    <span class="nb">printf</span> <span class="s2">"Using: </span><span class="nv">$0</span><span class="s2"> { createtb }"</span>
  <span class="p">;;</span>
<span class="k">esac</span>
<span class="nb">exit </span>0
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="estrutura-do-projeto-para-postgresql">Estrutura do projeto para PostgreSQL</h2>

<p>A árvore do nosso projeto ficou assim:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">.</span>
├── config.conf
├── libs
│   ├── create_database.bash
│   └── create_table.bash
└── setup.bash</code></pre></figure>

<h2 id="executando-nosso-programa">Executando nosso programa</h2>

<p>Depois de ter criado todos arquivos, chegou a hora de fazer nosso programa ser executado. Para isso faça:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">chmod</span> +x setup.bash
bash setup.bash createtb</code></pre></figure>

<p>Se tudo ocorreu bem, a tabela ($DB) já foi criada no banco de dados. Você pode executar os comandos abaixo e verificar:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">source </span>config.conf <span class="o">&amp;&amp;</span> psql <span class="nt">-h</span> <span class="nv">$HOST</span> <span class="nt">-p</span> <span class="nv">$PORT</span> <span class="nt">-U</span> <span class="nv">$USER</span> <span class="nt">-d</span> <span class="nv">$DB</span></code></pre></figure>

<p>Dentro do psql, execute o comando <strong>\dt</strong> para listar as TABLES desse DATABASE:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">my_db</span><span class="o">=</span><span class="c"># \dt</span>
            Lista de relações
 Esquema | Nome  |  Tipo  |   Dono
<span class="nt">---------</span>+-------+--------+----------
 public  | films | tabela | postgres
<span class="o">(</span>1 registro<span class="o">)</span></code></pre></figure>

<h1 id="mysql">MySQL</h1>

<h2 id="preparando-ambiente-1">Preparando ambiente</h2>

<p>Antes de começar, precisamos verificar se temos acesso a conexão com o MySQL. Se você instalou e configurou normalmente, você pode executar o comando abaixo para logar informando a senha do MySQL configurada:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mysql <span class="nt">-u</span> root <span class="nt">-p</span></code></pre></figure>

<p>Se você se conectou, já podemos prosseguir com os passos seguintes.</p>

<h2 id="iniciando-projeto-1">Iniciando projeto</h2>

<h2 id="criando-pasta-de-ambiente-do-projeto-1">Criando pasta de ambiente do projeto</h2>

<p>Vamos criar uma pasta para nosso projeto de <strong>MySQL</strong> e entrar na mesma com o comando abaixo:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">mkdir</span> ~/sh_mysql<span class="p">;</span> <span class="nb">cd</span> <span class="nv">$_</span></code></pre></figure>

<h2 id="criando-arquivo-de-configuração-1">Criando arquivo de configuração</h2>

<p>Como fizemos no projeto para o <strong>PostgreSQL</strong>, vamos criar p arquivo  <strong>config.conf</strong> na base do nosso projeto.</p>

<p>Conteúdo do arquivo: <strong>config.conf</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">DB</span><span class="o">=</span><span class="s2">"my_db"</span>
<span class="nv">HOST</span><span class="o">=</span><span class="s2">"localhost"</span>
<span class="nv">PORT</span><span class="o">=</span><span class="s2">"3306"</span>
<span class="nv">USER</span><span class="o">=</span><span class="s2">"root"</span>
<span class="nv">PASSWORD</span><span class="o">=</span><span class="s2">""</span>
<span class="nv">TABLE</span><span class="o">=</span><span class="s2">"cartoons"</span></code></pre></figure>

<h2 id="criando-bibliotecas-para-nosso-projeto-1">Criando bibliotecas para nosso projeto</h2>

<p>Vamos repetir o mesmo conceito que fizemos para o PostgreSQL, criando nossas bibliotecas na pasta <strong>libs</strong> do projeto.</p>

<h3 id="biblioteca-create_databasebash-1">Biblioteca <strong>create_database.bash</strong></h3>

<p>Diferente do PostgreSQL, o <strong>MySQL</strong> contem uma opção de <strong>IF NOT EXISTS</strong> para criação de DATABASES, com isso não precisamos fazer a verificação via Shell Script como fizemos com o projeto do PostgreSQL. Com a própria instrução SQL do MySQL, podemos fazer essa checagem.</p>

<p>Conteúdo do arquivo: <strong>libs/create_database.bash</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">function </span>_create_database<span class="o">()</span> <span class="o">{</span>
  mysql <span class="nt">--host</span><span class="o">=</span><span class="nv">$HOST</span> <span class="nt">--port</span><span class="o">=</span><span class="nv">$PORT</span> <span class="nt">--user</span><span class="o">=</span><span class="nv">$USER</span> <span class="nt">--password</span><span class="o">=</span><span class="nv">$PASSWORD</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
  CREATE DATABASE IF NOT EXISTS </span><span class="se">\`</span><span class="nv">$DB</span><span class="se">\`</span><span class="sh">;
</span><span class="no">EOF
</span><span class="o">}</span></code></pre></figure>

<h3 id="biblioteca-create_tablebash-1">Biblioteca <strong>create_table.bash</strong></h3>

<p>Diferentemente do PostgreSQL também, com o MySQL você deve criar delimitadores para executar várias instruções SQL. Você define um delimitador com a palavra reservada <strong>DELIMITER</strong> e logo em seguida o delimitador que você quer. Aqui estou usando o <strong>$$</strong>.</p>

<p>Conteúdo do arquivo: <strong>libs/create_table.bash</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">function </span>_create_table<span class="o">()</span> <span class="o">{</span>
  mysql <span class="nt">--host</span><span class="o">=</span><span class="nv">$HOST</span> <span class="nt">--port</span><span class="o">=</span><span class="nv">$PORT</span> <span class="nt">--user</span><span class="o">=</span><span class="nv">$USER</span> <span class="nt">--password</span><span class="o">=</span><span class="nv">$PASSWORD</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">

  DELIMITER </span><span class="nv">$$</span><span class="sh">

  USE </span><span class="se">\`</span><span class="nv">$DB</span><span class="se">\`</span><span class="sh"> </span><span class="nv">$$</span><span class="sh">

  CREATE TABLE IF NOT EXISTS </span><span class="se">\`</span><span class="nv">$TABLE</span><span class="se">\`</span><span class="sh">  (
    id        INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    title     VARCHAR(40) NOT NULL,
    did       INTEGER NOT NULL,
    date      TIMESTAMP,
    kind      VARCHAR(10),
    designer  VARCHAR(30),

  )</span><span class="nv">$$</span><span class="sh">
</span><span class="no">EOF
</span><span class="o">}</span></code></pre></figure>

<h2 id="criando-o-programa-principal-1">Criando o programa principal</h2>

<p>Vamos carregar todas nossas bibliotecas no <strong>setup.bash</strong> e o arquivo de configuração <strong>config.conf</strong>. Na mesma ideia que fizemos no projeto do PostgreSQLm vamos fazer para o MySQL mais uma vez.</p>

<p>Conteúdo do arquivo: <strong>setup.bash</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="c">#!/usr/bin/env bash</span>

<span class="nb">source </span>config.conf

<span class="nv">libs</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">ls</span> ./libs/<span class="k">*</span>.bash<span class="si">)</span><span class="s2">"</span>
<span class="k">for </span>lib <span class="k">in</span> <span class="nv">$libs</span><span class="p">;</span> <span class="k">do
  </span><span class="nb">source</span> <span class="nv">$lib</span>
<span class="k">done

case</span> <span class="nv">$1</span> <span class="k">in
  </span>createtb<span class="p">)</span>
    _create_database
    _create_table
  <span class="p">;;</span>
  <span class="k">*</span><span class="p">)</span>
    <span class="nb">printf</span> <span class="s2">"Using: </span><span class="nv">$0</span><span class="s2"> { createtb }"</span>
  <span class="p">;;</span>
<span class="k">esac</span>
<span class="nb">exit </span>0
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="estrutura-do-projeto-para-mysql">Estrutura do projeto para MySQL</h2>

<p>A árvore do nosso projeto ficou assim:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">.</span>
├── config.conf
├── libs
│   ├── create_database.bash
│   └── create_table.bash
└── setup.bash</code></pre></figure>

<h2 id="executando-nosso-programa-1">Executando nosso programa</h2>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">chmod</span> +x setup.bash
bash setup.bash createtb</code></pre></figure>

<p>Execute os comandos abaixo e verificar:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">source </span>config.conf <span class="o">&amp;&amp;</span> mysql <span class="nt">--host</span><span class="o">=</span><span class="nv">$HOST</span> <span class="nt">--port</span><span class="o">=</span><span class="nv">$PORT</span> <span class="nt">--user</span><span class="o">=</span><span class="nv">$DB_USER</span> <span class="nt">--password</span><span class="o">=</span><span class="nv">$DB_PASSWD</span></code></pre></figure>

<p>Dentro do console do mysql, execute o comando abaixo para listar o DATABASE criado:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">MySQL <span class="o">[(</span>none<span class="o">)]&gt;</span> show databases<span class="p">;</span>
+--------------------+
| Database           |
+--------------------+
| information_schema |
| my_db              |
| mysql              |
| performance_schema |
+--------------------+
3 rows <span class="k">in </span><span class="nb">set</span> <span class="o">(</span>0.001 sec<span class="o">)</span></code></pre></figure>

<h1 id="conclusão">Conclusão</h1>

<p>Como dito, foi um simples post para você tenha uma noção do que podemos fazer com Shell Script. Tanto os passos para PostgreSQL e para MySQL, existem trechos de código praticamente idênticos, mudando uma coisinha ou outra. Porém, apesar de realizarmos transações no banco de dados com Shell Script, não recomendo você tentar criar um sistema dessa maneira. Existem diversas linguagens de programação onde temos milhares de vantagens para realizar tudo que fizemos aqui.</p>

<p>Espero que você tenha aprendido algo com esse post. Eu fico por aqui, até a próxima.</p>]]></content><author><name>William C. Canin</name></author><category term="shell" /><category term="postgresql" /><category term="mysql" /><summary type="html"><![CDATA[O Shell Script não é só uma linguagem para fazer automatização de tarefas no seu S.O, é muito mais!]]></summary></entry><entry><title type="html">Instalando Python tarball em qualquer sistema Linux.</title><link href="https://williamcanin.github.io/blog/instalando-python-automaticamente-em-qualquer-sistema-linux/" rel="alternate" type="text/html" title="Instalando Python tarball em qualquer sistema Linux." /><published>2018-06-21T21:54:14+00:00</published><updated>2018-06-21T21:54:14+00:00</updated><id>https://williamcanin.github.io/blog/instalando-python-automaticamente-em-qualquer-sistema-linux</id><content type="html" xml:base="https://williamcanin.github.io/blog/instalando-python-automaticamente-em-qualquer-sistema-linux/"><![CDATA[<nav class="toc" id="toc" data-toc-selector=".post-content" data-toc-max-level="3" data-toc-scroll-offset="20">
  <div class="toc-head">
    <h2>Índice</h2>
    <button class="toc-toggle" aria-expanded="true" type="button">Fechar</button>
  </div>
  <div class="toc-list-wrapper">
    <ul class="toc-list" role="list"></ul>
    <p class="toc-empty" style="display:none">No titles found. Remove TOC!</p>
  </div>
</nav>

<script>
(function () {
  const minLayoutWidth = 1830;

  const toc = document.getElementById('toc');
  if (toc) {
    const sentinel = document.createElement('div');
    toc.parentNode.insertBefore(sentinel, toc);

    function shouldApplyFixed() {
      return window.innerWidth > minLayoutWidth;
    }

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (shouldApplyFixed()) {
          if (!entry.isIntersecting) {
            toc.classList.add('toc-fixed');
          } else {
            toc.classList.remove('toc-fixed');
          }
        } else {
          toc.classList.remove('toc-fixed');
        }
      },
      { threshold: 0 }
    );
    observer.observe(sentinel);

    window.addEventListener('resize', () => {
        if (!shouldApplyFixed()) {
            toc.classList.remove('toc-fixed');
        }
    });
  }

  function slugify(text) {
    if (!text) return '';
    return text.toString().toLowerCase().trim()
      .normalize('NFKD').replace(/[\u0300-\u036f]/g, '')
      .replace(/[^\w\s-]/g, '').replace(/\s+/g, '-').replace(/--+/g, '-');
  }

  function buildTOC(tocEl) {
    const selector = tocEl.dataset.tocSelector || '.post-content' || '.page-content';
    const maxLevel = parseInt(tocEl.dataset.tocMaxLevel || '3', 10);
    const offset = parseInt(tocEl.dataset.tocScrollOffset || '20', 10);
    const root = document.querySelector(selector);

    if (!root) {
      tocEl.querySelector('.toc-empty').textContent = `Content not found (${selector})`;
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const headings = Array.from(root.querySelectorAll(Array(maxLevel).fill(0).map((_, i) => `h${i + 1}`).join(',')))
      .filter(h => !tocEl.contains(h))
      .filter(h => parseInt(h.tagName.substring(1)) <= maxLevel);

    if (headings.length === 0) {
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const tocRoot = tocEl.querySelector('.toc-list');
    tocRoot.innerHTML = '';

    const idCounts = {};
    headings.forEach(h => {
      if (!h.id) {
        let id = slugify(h.textContent);
        if (!id) id = 'section';
        if (idCounts[id]) { idCounts[id] += 1; id = id + '-' + idCounts[id]; }
        else idCounts[id] = 1;
        h.id = id;
      }
    });

    // Build hierarchical tree
    const stack = [{ level: 0, ul: tocRoot }];
    headings.forEach((h, i) => {
      const level = parseInt(h.tagName.substring(1));
      const li = document.createElement('li');
      const a = document.createElement('a');
      a.href = '#' + h.id;
      a.textContent = h.textContent.trim();
      a.addEventListener('click', e => {
        e.preventDefault();
        window.scrollTo({ top: h.getBoundingClientRect().top + window.scrollY - offset, behavior: 'smooth' });
        history.replaceState(null, '', '#' + h.id);

        // // Clicking on the TOC menu closes the TOC
        // const wrapper = tocEl.querySelector('.toc-list-wrapper');
        // const toggle = tocEl.querySelector('.toc-toggle');
        // wrapper.style.display = 'none';
        // toggle.setAttribute('aria-expanded', 'false');
        // toggle.textContent = '{ { include.btn_show } }';
      });
      li.appendChild(a);

      while (stack.length > 1 && level <= stack[stack.length - 1].level) stack.pop();
      const parent = stack[stack.length - 1].ul;
      parent.appendChild(li);

      const next = headings[i + 1];
      if (next) {
        const nextLevel = parseInt(next.tagName.substring(1));
        if (nextLevel > level) {
          const newUl = document.createElement('ul');
          li.appendChild(newUl);
          stack.push({ level, ul: newUl });
        }
      }
    });

    // Active Highlight
    const links = tocRoot.querySelectorAll('a');
    function onScroll() {
      const fromTop = window.scrollY + offset + 1;
      let current = headings[0];
      for (let i = 0; i < headings.length; i++) {
        if (headings[i].offsetTop <= fromTop) current = headings[i];
      }
      links.forEach(l => l.classList.toggle('active', l.getAttribute('href') === '#' + current.id));
    }
    window.addEventListener('scroll', onScroll, { passive: true });
    onScroll();
  }

  document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.toc').forEach(toc => {
      buildTOC(toc);
      const toggle = toc.querySelector('.toc-toggle');
      const wrapper = toc.querySelector('.toc-list-wrapper');

      wrapper.style.display = 'none';
      toggle.setAttribute('aria-expanded', 'false');
      toggle.textContent = 'Abrir';

      toggle.addEventListener('click', () => {
        const expanded = toggle.getAttribute('aria-expanded') === 'true';
        wrapper.style.display = expanded ? 'none' : 'block';
        toggle.setAttribute('aria-expanded', (!expanded).toString());
        toggle.textContent = expanded ? 'Abrir' : 'Fechar';
      });

      const tocTop = toc.offsetTop;

      function handleScrollFix() {
        if (window.innerWidth <= minLayoutWidth) {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.zIndex = '';
          toc.style.width = '';
          return;
        }

        const scrollTop = window.scrollY || document.documentElement.scrollTop;

        // Fixes pinning behavior in Chrome
        if (scrollTop >= tocTop) {
          toc.classList.add('fixed');
          toc.style.position = 'fixed';
          toc.style.top = '0';
          toc.style.zIndex = '9999';
          // toc.style.width = toc.offsetWidth + 'px';
        } else {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.width = '';
        }

        // // Automatically closes the TOC if it is open and scrolled to it.
        // const rect = toc.getBoundingClientRect();
        // if (rect.top <= 0 && toggle.getAttribute('aria-expanded') === 'true') {
        //   wrapper.style.display = 'none';
        //   toggle.setAttribute('aria-expanded', 'false');
        //   toggle.textContent = '{ { include.btn_show } }';
        // }
      }

      window.addEventListener('scroll', handleScrollFix, { passive: true });
      window.addEventListener('resize', handleScrollFix);
      handleScrollFix();
    });
  });
})();
</script>

<p>Olá :hand:, essa é uma dica rápida para você que deseja instalar o Python :snake: compilado através do código fonte (tarball). Boa leitura.</p>

<h1 id="introdução">Introdução</h1>

<p>Muitas vezes precisamos instalar um determinado programa para sistemas Linux e não temos o pacote de acordo com nossa distribuição. Como isso, várias empresas de determinados softwares nos disponibiliza os pacotes <code class="language-plaintext highlighter-rouge">tarball</code>, onde podemos compilar o programa e assim instala-lo, ou seja, esses pacotes é o <code class="language-plaintext highlighter-rouge">source code</code> (código fonte) do software genérico que ser a qualquer distribuição Linux.</p>

<p>Existe dois tipos de instalação genérica para Linux, programas com com a extensão .run, onde apenas executamos o mesmo para que a instalação comece e programas de código fonte para compilarmos e instalarmos. A última opção é a que vamos trabalhar nesse post.</p>

<p>Geralmente, o padrão para a instalação de pacotes genéricos (tarball), são apenas 3 comandos:</p>

<ul>
  <li>O de configurar;</li>
  <li>O de compilar;</li>
  <li>O de instalar;</li>
</ul>

<p>Veremos abaixo, como instalar a ultima versão estável do <a href="https://www.python.org/" target="_blank">Python</a> automaticamente com um script shell, usando pacote tarball.</p>

<h1 id="instalação">Instalação</h1>

<h2 id="criando-script-de-instalação-automática">Criando script de instalação automática</h2>

<p>A - Abra seu editor de texto preferido e acrescente esses comando abaixo:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="c">#!/usr/bin/env bash</span>
<span class="c"># Description: Install latest version Python (auto)</span>
<span class="c"># Author: William Canin</span>
<span class="c"># License: MIT</span>

<span class="nv">latest_version</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-sL</span> https://www.python.org | <span class="nb">sed</span> <span class="nt">-nr</span> <span class="s1">'s/^&lt;p&gt;Latest:[^&gt;]+&gt;Python\s+([0-9]+(.[0-9]+)+).+/\1/p'</span><span class="si">)</span><span class="s2">"</span>

<span class="nv">url_download</span><span class="o">=</span><span class="s2">"https://www.python.org/ftp/python/</span><span class="k">${</span><span class="nv">latest_version</span><span class="k">}</span><span class="s2">/Python-</span><span class="k">${</span><span class="nv">latest_version</span><span class="k">}</span><span class="s2">.tar.xz"</span>

<span class="nb">cd</span> <span class="nv">$HOME</span> <span class="o">&amp;&amp;</span> wget <span class="k">${</span><span class="nv">url_download</span><span class="k">}</span>

<span class="nb">sudo rm</span> <span class="nt">-rf</span> /opt/Python-<span class="k">${</span><span class="nv">latest_version</span><span class="k">}</span>

<span class="nb">sudo tar</span> <span class="nt">-xvf</span> Python-<span class="k">${</span><span class="nv">latest_version</span><span class="k">}</span>.tar.xz <span class="nt">-C</span> /opt

<span class="nb">sudo chmod </span>775 <span class="nt">-R</span> /opt/Python-<span class="k">${</span><span class="nv">latest_version</span><span class="k">}</span>

<span class="nb">cd</span> /opt/Python-<span class="k">${</span><span class="nv">latest_version</span><span class="k">}</span>

<span class="nb">sudo</span> ./configure

<span class="nb">sudo </span>make

<span class="nb">sudo </span>make <span class="nb">install</span>

<span class="c"># sudo make -n install # Opcional</span>

<span class="nb">printf</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">Installation complete!</span><span class="se">\n</span><span class="s2">"</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="entendendo-o-que-cada-comando-do-script-faz">Entendendo o que cada comando do script faz</h2>

<blockquote>
  <p>Linha <strong>6</strong>: Responsável por capturar a ultima versão estável do Python no site oficial através de expressões regulares e armazenar em uma variável.</p>
</blockquote>

<blockquote>
  <p>Linha <strong>8</strong>: Uma variável que armazena a url completa do download do pacote tarball.</p>
</blockquote>

<blockquote>
  <p>Linha <strong>10</strong>: Entra no diretório HOME do usuário atual do terminal e realizar o download do pacote <em>tarball</em> no mesmo diretório.</p>
</blockquote>

<blockquote>
  <p>Linha <strong>12</strong>: Remove qualquer pasta que foi utilizada para instalação o Python da mesma versão atual do download.</p>
</blockquote>

<blockquote>
  <p>Linha <strong>14</strong>: Descompacta o pacote <em>tar.xz</em> para o diretório <strong>/opt</strong>.</p>
</blockquote>

<blockquote>
  <p>Linha <strong>16</strong>: Dá permissão 775 para pasta <strong>Python-[VERSION]</strong> e suas subpastas e arquivos.</p>
</blockquote>

<blockquote>
  <p>Linha <strong>18</strong>: Entrando no diretório <strong>/opt/Python-[VERSION]</strong> para realizar a <em>configuração</em>, <em>compilação</em> e <em>instalação</em> do Python.</p>
</blockquote>

<blockquote>
  <p>Linha <strong>20</strong>: Configurando o Python para compilação.</p>
</blockquote>

<blockquote>
  <p>Linha <strong>22</strong>: Compilando o Python</p>
</blockquote>

<blockquote>
  <p>Linha <strong>24</strong>: Instalando o Python em si.</p>
</blockquote>

<blockquote>
  <p>Linha <strong>26</strong>: Essa linha é opcional, por padrão está comentada, porém, esse comando serve para mostrar quais passos foram feitos e onde foi colocado cada arquivo/pasta da instalação.</p>
</blockquote>

<blockquote>
  <p>Linha <strong>28</strong>: Essa linha é um mistério, dou um pirulito a quem descobrir para que serve. :D”</p>
</blockquote>

<h2 id="salvando-o-script-e-executando-o-para-a-instalação-do-python">Salvando o script, e executando-o para a instalação do Python</h2>

<p>B - Salve o arquivo com o nome de “<strong>pyinstaller.sh</strong>”.</p>

<p>C - Dê permissão de execução para o script com o comando abaixo:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">chmod</span> +x pyinstaller.sh</code></pre></figure>

<p>D - Execute o script com o comando abaixo e aguarde a instalação da última versão estável do <a href="https://www.python.org/" target="_blank">Python</a>:</p>

<blockquote>
  <p>Nota 1: Você precisa ter privilégio de superusuário (root) ou sudo.</p>
</blockquote>

<blockquote>
  <p>Nota 2: Por padrão, a instalação do executável do Python é no diretório <em>/usr/local/bin/python[version]</em>, a não ser que seja mudado o PATH na configuração (sudo ./configure).</p>
</blockquote>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">bash pyinstaller.sh</code></pre></figure>

<p>Pronto! Se tudo deu certo, a instalação foi concluída.
Você pode verificar o executável no diretório <strong>/usr/local/bin</strong>.</p>

<h1 id="desinstalação">Desinstalação</h1>

<p>Infelizmente, até o momento o pacote de source code do Python (tarball), não tem uma opção de comando para desinstalar, como por exemplo o comando <strong>make uninstall</strong>, isso porque, você pode ter várias versões do Python instalada através da compilação, e então não tem como um desinstalador saber qual é que você queira remover.</p>

<p>Para resolver isso, o comando <strong>make -n install</strong> que está comentado no script que criamos, é justamente para lhe mostrar onde foi instalado os arquivos e pastas. Com base nessas informações, você deve remover a instalação manualmente apenas excluindo esses arquivos e pastas.</p>

<p>Para facilitar, criei um script que pode lhe poupar tempo de achar esses arquivos e pastas.</p>

<h2 id="criando-script-de-remoção-automática">Criando script de remoção automática.</h2>

<p>A - Abra um editor de sua preferência e coloque as linhas seguintes:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre><span class="c">#!/usr/bin/env bash</span>
<span class="c"># Description: Uninstall determined version Python (auto)</span>
<span class="c"># Author: William Canin</span>
<span class="c"># License: MIT</span>

<span class="nv">prefix</span><span class="o">=</span><span class="s1">'/usr/local/'</span>

<span class="nb">ls</span> <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>/bin

<span class="nb">printf</span> <span class="s2">"[ Based on the list above, please tell us which version you wish to uninstall ]</span><span class="se">\n</span><span class="s2">"</span>
<span class="nb">printf</span> <span class="s2">"&gt; Type the version (E.g: 3.5): "</span>
<span class="nb">read</span> <span class="nt">-p</span> pyver

<span class="nb">sudo rm</span> <span class="nt">-rfv</span> <span class="se">\</span>
    <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>bin/python<span class="k">${</span><span class="nv">pyver</span><span class="k">}</span> <span class="se">\</span>
    <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>bin/pip<span class="k">${</span><span class="nv">pyver</span><span class="k">}</span> <span class="se">\</span>
    <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>bin/pydoc <span class="se">\</span>
    <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>bin/include/python<span class="k">${</span><span class="nv">pyver</span><span class="k">}</span> <span class="se">\</span>
    <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>lib/libpython<span class="k">${</span><span class="nv">pyver</span><span class="k">}</span>.a <span class="se">\</span>
    <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>lib/python<span class="k">${</span><span class="nv">pyver</span><span class="k">}</span> <span class="se">\</span>
    <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>bin/python<span class="k">${</span><span class="nv">pyver</span><span class="k">}</span> <span class="se">\</span>
    <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>bin/pip<span class="k">${</span><span class="nv">pyver</span><span class="k">}</span> <span class="se">\</span>
    <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>bin/include/python<span class="k">${</span><span class="nv">pyver</span><span class="k">}</span> <span class="se">\</span>
    <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>lib/libpython<span class="k">${</span><span class="nv">pyver</span><span class="k">}</span>.a <span class="se">\</span>
    <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>lib/python<span class="k">${</span><span class="nv">pyver</span><span class="k">}</span> <span class="se">\</span>
    <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>lib/pkgconfig/python-<span class="k">${</span><span class="nv">pyver</span><span class="k">}</span>.pc <span class="se">\</span>
    <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>lib/libpython<span class="k">${</span><span class="nv">pyver</span><span class="k">}</span>m.a <span class="se">\</span>
    <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>bin/python<span class="k">${</span><span class="nv">pyver</span><span class="k">}</span>m <span class="se">\</span>
    <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>bin/2to3-<span class="k">${</span><span class="nv">pyver</span><span class="k">}</span> <span class="se">\</span>
    <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>bin/python<span class="k">${</span><span class="nv">pyver</span><span class="k">}</span>m-config <span class="se">\</span>
    <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>bin/idle<span class="k">${</span><span class="nv">pyver</span><span class="k">}</span> <span class="se">\</span>
    <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>bin/pydoc<span class="k">${</span><span class="nv">pyver</span><span class="k">}</span> <span class="se">\</span>
    <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>bin/pyvenv-<span class="k">${</span><span class="nv">pyver</span><span class="k">}</span> <span class="se">\</span>
    <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>share/man/man1/python<span class="k">${</span><span class="nv">pyver</span><span class="k">}</span>.1 <span class="se">\</span>
    <span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>include/python<span class="k">${</span><span class="nv">pyver</span><span class="k">}</span>m
    <span class="c"># ${prefix}bin/pydoc ## WARN: skip if other pythons in local exist.</span>
<span class="nb">printf</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">Removal has been completed!</span><span class="se">\n</span><span class="s2">"</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="salvando-o-script-e-executando-o-para-a-remoção-do-python">Salvando o script, e executando-o para a remoção do Python</h2>

<p>B - Salve o arquivo com o nome de “pyuninstaller.sh”.</p>

<p>C - Dê permissão de execução para o script com o comando abaixo:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">chmod</span> +x pyuninstaller.sh</code></pre></figure>

<p>D - Execute o script com o comando abaixo e aguarde a desinstalação:</p>

<blockquote>
  <p>Nota: Você precisa ter privilégio de superusuário (root) ou sudo.</p>
</blockquote>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">bash pyuninstaller.sh</code></pre></figure>

<h1 id="conclusão">Conclusão</h1>

<p>Esse tutorial pode ficar obsoleto com o tempo, então, lembre-se de ler o arquivo de <strong>README.rst</strong> que vem junto no pacote <strong>tar.xz</strong> no Python, nele contém informações mais detalhadas de como instalar (ou até mesmo remover) o <em>Python</em> de uma maneira bem completa.</p>

<p>Eu fico por aqui, abraço pra você. :smile:</p>]]></content><author><name>William C. Canin</name></author><category term="python" /><category term="tarball" /><category term="linux" /><summary type="html"><![CDATA[Instale a ultima versão estável do Python tarball automaticamente em qualquer Linux com um simples script shell.]]></summary></entry><entry><title type="html">Criptografando a partição HOME no Linux</title><link href="https://williamcanin.github.io/blog/criptografando-a-particao-home-no-linux/" rel="alternate" type="text/html" title="Criptografando a partição HOME no Linux" /><published>2017-10-16T06:51:44+00:00</published><updated>2017-10-16T06:51:44+00:00</updated><id>https://williamcanin.github.io/blog/criptografando-a-particao-home-no-linux</id><content type="html" xml:base="https://williamcanin.github.io/blog/criptografando-a-particao-home-no-linux/"><![CDATA[<nav class="toc" id="toc" data-toc-selector=".post-content" data-toc-max-level="3" data-toc-scroll-offset="20">
  <div class="toc-head">
    <h2>Índice</h2>
    <button class="toc-toggle" aria-expanded="true" type="button">Fechar</button>
  </div>
  <div class="toc-list-wrapper">
    <ul class="toc-list" role="list"></ul>
    <p class="toc-empty" style="display:none">No titles found. Remove TOC!</p>
  </div>
</nav>

<script>
(function () {
  const minLayoutWidth = 1830;

  const toc = document.getElementById('toc');
  if (toc) {
    const sentinel = document.createElement('div');
    toc.parentNode.insertBefore(sentinel, toc);

    function shouldApplyFixed() {
      return window.innerWidth > minLayoutWidth;
    }

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (shouldApplyFixed()) {
          if (!entry.isIntersecting) {
            toc.classList.add('toc-fixed');
          } else {
            toc.classList.remove('toc-fixed');
          }
        } else {
          toc.classList.remove('toc-fixed');
        }
      },
      { threshold: 0 }
    );
    observer.observe(sentinel);

    window.addEventListener('resize', () => {
        if (!shouldApplyFixed()) {
            toc.classList.remove('toc-fixed');
        }
    });
  }

  function slugify(text) {
    if (!text) return '';
    return text.toString().toLowerCase().trim()
      .normalize('NFKD').replace(/[\u0300-\u036f]/g, '')
      .replace(/[^\w\s-]/g, '').replace(/\s+/g, '-').replace(/--+/g, '-');
  }

  function buildTOC(tocEl) {
    const selector = tocEl.dataset.tocSelector || '.post-content' || '.page-content';
    const maxLevel = parseInt(tocEl.dataset.tocMaxLevel || '3', 10);
    const offset = parseInt(tocEl.dataset.tocScrollOffset || '20', 10);
    const root = document.querySelector(selector);

    if (!root) {
      tocEl.querySelector('.toc-empty').textContent = `Content not found (${selector})`;
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const headings = Array.from(root.querySelectorAll(Array(maxLevel).fill(0).map((_, i) => `h${i + 1}`).join(',')))
      .filter(h => !tocEl.contains(h))
      .filter(h => parseInt(h.tagName.substring(1)) <= maxLevel);

    if (headings.length === 0) {
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const tocRoot = tocEl.querySelector('.toc-list');
    tocRoot.innerHTML = '';

    const idCounts = {};
    headings.forEach(h => {
      if (!h.id) {
        let id = slugify(h.textContent);
        if (!id) id = 'section';
        if (idCounts[id]) { idCounts[id] += 1; id = id + '-' + idCounts[id]; }
        else idCounts[id] = 1;
        h.id = id;
      }
    });

    // Build hierarchical tree
    const stack = [{ level: 0, ul: tocRoot }];
    headings.forEach((h, i) => {
      const level = parseInt(h.tagName.substring(1));
      const li = document.createElement('li');
      const a = document.createElement('a');
      a.href = '#' + h.id;
      a.textContent = h.textContent.trim();
      a.addEventListener('click', e => {
        e.preventDefault();
        window.scrollTo({ top: h.getBoundingClientRect().top + window.scrollY - offset, behavior: 'smooth' });
        history.replaceState(null, '', '#' + h.id);

        // // Clicking on the TOC menu closes the TOC
        // const wrapper = tocEl.querySelector('.toc-list-wrapper');
        // const toggle = tocEl.querySelector('.toc-toggle');
        // wrapper.style.display = 'none';
        // toggle.setAttribute('aria-expanded', 'false');
        // toggle.textContent = '{ { include.btn_show } }';
      });
      li.appendChild(a);

      while (stack.length > 1 && level <= stack[stack.length - 1].level) stack.pop();
      const parent = stack[stack.length - 1].ul;
      parent.appendChild(li);

      const next = headings[i + 1];
      if (next) {
        const nextLevel = parseInt(next.tagName.substring(1));
        if (nextLevel > level) {
          const newUl = document.createElement('ul');
          li.appendChild(newUl);
          stack.push({ level, ul: newUl });
        }
      }
    });

    // Active Highlight
    const links = tocRoot.querySelectorAll('a');
    function onScroll() {
      const fromTop = window.scrollY + offset + 1;
      let current = headings[0];
      for (let i = 0; i < headings.length; i++) {
        if (headings[i].offsetTop <= fromTop) current = headings[i];
      }
      links.forEach(l => l.classList.toggle('active', l.getAttribute('href') === '#' + current.id));
    }
    window.addEventListener('scroll', onScroll, { passive: true });
    onScroll();
  }

  document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.toc').forEach(toc => {
      buildTOC(toc);
      const toggle = toc.querySelector('.toc-toggle');
      const wrapper = toc.querySelector('.toc-list-wrapper');

      wrapper.style.display = 'none';
      toggle.setAttribute('aria-expanded', 'false');
      toggle.textContent = 'Abrir';

      toggle.addEventListener('click', () => {
        const expanded = toggle.getAttribute('aria-expanded') === 'true';
        wrapper.style.display = expanded ? 'none' : 'block';
        toggle.setAttribute('aria-expanded', (!expanded).toString());
        toggle.textContent = expanded ? 'Abrir' : 'Fechar';
      });

      const tocTop = toc.offsetTop;

      function handleScrollFix() {
        if (window.innerWidth <= minLayoutWidth) {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.zIndex = '';
          toc.style.width = '';
          return;
        }

        const scrollTop = window.scrollY || document.documentElement.scrollTop;

        // Fixes pinning behavior in Chrome
        if (scrollTop >= tocTop) {
          toc.classList.add('fixed');
          toc.style.position = 'fixed';
          toc.style.top = '0';
          toc.style.zIndex = '9999';
          // toc.style.width = toc.offsetWidth + 'px';
        } else {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.width = '';
        }

        // // Automatically closes the TOC if it is open and scrolled to it.
        // const rect = toc.getBoundingClientRect();
        // if (rect.top <= 0 && toggle.getAttribute('aria-expanded') === 'true') {
        //   wrapper.style.display = 'none';
        //   toggle.setAttribute('aria-expanded', 'false');
        //   toggle.textContent = '{ { include.btn_show } }';
        // }
      }

      window.addEventListener('scroll', handleScrollFix, { passive: true });
      window.addEventListener('resize', handleScrollFix);
      handleScrollFix();
    });
  });
})();
</script>

<p>Olá para você pessoa, como vai? Eu vou bem graças a Deus e obrigado por perguntar mentalmente hehe.
Esse é um post de segurança…é o que todos querem, não é?! hehe Então lá vai…</p>

<h1 id="introdução">Introdução</h1>

<p>Todos usuários Linux sabem que o diretório <strong>/home</strong> é onde fica armazenado toda nossa “bancada” de arquivos importantes, ou seja, é onde tudo é salvo, e tudo acontece. Pensando nisto, pensei um fazer um post como proteger a <strong>/home</strong>, o que é muito legal. Então vamos lá.</p>

<p>Mesmo que você coloque uma senha muito difícil de login, você não está seguro de alguem pegar seus arquivos. Se alguém ligar sua máquina com um sistema bootável pendrive ou DVD, essa pessoa consegue montar a partição Linux e acessar seus arquivos.</p>

<p><em>Como me protejo disso?</em></p>

<p>A resposta é: usar uma partição separada para <strong>/home</strong> e criptografar a mesma.</p>

<p>Então vamos lá manito :)</p>

<h1 id="requisitos">Requisitos</h1>

<p>Os seguintes requisitos baixo precisam existir em sua distribuição Linux:</p>

<ul>
  <li>Pacote: cryptsetup</li>
  <li>A <strong>/home</strong> separada do sistema</li>
  <li>Ter acesso ao usuário root</li>
</ul>

<h1 id="preparando-a-partição">Preparando a partição</h1>

<h2 id="logar-como-root">Logar como Root</h2>

<p>Para dar continuidade a este tutorial, você precisa estar logar no sistema como ROOT. Se você não conseguir logar como ROOT, você pode fazer logout da sessão (caso esteja com usuário comum) e abrir um novo <strong>tty</strong> digitando <code class="language-plaintext highlighter-rouge">Ctrl + Alt + F4</code>, após isso, você faz o login com root. É necessário usar o usuário <em>root</em> para realizar as etapas, porque a home do usuário root não fica no <strong>/home</strong> no qual vamos configurar, e sim em <strong>/root</strong>.</p>

<p>Após logar com root, vamos carregar os módulos de criptografia, qual vamos usar executando no console:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">modprobe <span class="nt">-a</span> dm-mod dm-crypt</code></pre></figure>

<h2 id="fazendo-backup-da-nossa-home-atual">Fazendo backup da nossa /home atual</h2>

<p>A primeira coisa a se fazer é um backup da nossa <strong>/home</strong>. Se a partição raiz do sistema (<strong>/</strong>) tiver espaço suficiente, você pode fazer o backup para a pasta <strong>/opt</strong>, por exemplo, da seguinte maneira:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">mkdir</span> <span class="nt">-p</span> /opt/backup
<span class="nb">cp</span> <span class="nt">-rf</span> /home /opt/backup</code></pre></figure>

<p>Caso não tenha, você pode estar usando um <strong>HD/SSD</strong> ou até mesmo um <strong>pendrive</strong>.</p>

<h2 id="listando-nossas-partições">Listando nossas partições</h2>

<p>Dê o comando abaixo para listar nossas partições e identificar nossa partição <strong>/home</strong> atual:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">lsblk <span class="nt">-f</span> /dev/sda</code></pre></figure>

<h2 id="criptografando-a-partição">Criptografando a partição</h2>

<p>Vamos imaginar que nossa partição <strong>/home</strong> seja a <strong>/dev/sda2</strong>, com isso vamos desmontar a mesma e logo em seguida criptografar através do <strong>cryptsetup</strong> da seguinte maneira:</p>

<blockquote>
  <p>NOTA: LEMBRE-SE DE TER FEITO O BACKUP DE TODA SUA /home POIS ELA SERÁ DESTRUÍDA AGORA.</p>
</blockquote>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">umount /home
cryptsetup <span class="nt">-y</span> <span class="nt">-v</span> luksFormat <span class="nt">-c</span> aes-xts-plain64 <span class="nt">-s</span> 512 /dev/sda2</code></pre></figure>

<p>O LUKS irá pedir pra que você confirme com um <strong>yes</strong> (em uppercase), ou seja, assim: <strong>YES</strong>.</p>

<blockquote>
  <p>Digite: <strong>YES</strong> e dê Enter</p>
</blockquote>

<p>Após isso, irá pedir para informar a senha de criptografia e logo em seguida para confirmar. Então faça isso.</p>

<p><strong>A T E N Ç Ã O</strong>: Nunca esqueça essa senha, pois é ela que você usará na inicialização do sistema para para montar a <strong>/home</strong> futuramente.</p>

<p>Ok! Você já tem sua partição <strong>/home</strong> criptografada</p>

<h2 id="abrindo-partição-criptografada">Abrindo partição criptografada</h2>

<p>Agora precisamos abrir a partição para poder trabalhar nela, isso faremos com o comando abaixo:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">cryptsetup luksOpen /dev/sda2 home</code></pre></figure>

<p><strong>IMPORTANTE</strong>: Observe que no final do comando tem a palavra <strong>home</strong> (Não necessáriamente precisa ser <strong>home</strong>, você pode colocar outro nome).</p>

<p>Ao fazer um <strong>open</strong> na partição criptografada, criará um “ponteiro” para nossa <strong>home</strong> no diretório <strong>/dev/mapper</strong>, ou seja, será encontrado assim: <strong>/dev/mapper/home</strong>. Porem, esse ponteiro <strong>/dev/mapper/home</strong> será excluído após desmontarmos essa partição ou quando desligar/reiniciar a máquina, para essas configurações se manter usaremos 2(dois) arquivos para isso, onde veremos mais a seguinte, enquanto isso vamos seguir passo por passo.</p>

<p><em>A senha que você colocou para criptografar irá ser requerida nesse momento, então informe-a para abrir nossa partição criptografada.</em></p>

<h2 id="formatando-a-partição-criptografada">Formatando a partição criptografada</h2>

<p>Com nossa partição criptografada já aberta, precisamos formatar a sua montagem (<strong>/dev/mapper/home</strong>) para o tipo ext4. Para isso faremos:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">mkfs <span class="nt">-t</span> ext4 /dev/mapper/home</code></pre></figure>

<h2 id="montando-a-partição-e-restaurando-backup">Montando a partição e restaurando backup</h2>

<p>Agora, vamos montar essa partição formatada e fazer a restauração do nosso backup. Então, faremos essas etapas com os comandos abaixo:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">mkdir</span> <span class="nt">-p</span> /mnt/home
mount <span class="nt">-t</span> ext4 /dev/mapper/home /mnt/home
<span class="nb">cp</span> <span class="nt">-rf</span> /opt/backup/home/<span class="k">*</span> /mnt/home <span class="c"># Essa linha irá restaurar seu backup.</span>
<span class="nb">chown </span>usuário:usuário <span class="nt">-R</span> /mnt/home/usuário
<span class="nb">chmod </span>770 <span class="nt">-R</span> /mnt/home/usuário</code></pre></figure>

<blockquote>
  <p>NOTA: Onde está <strong>usuário</strong> você deve colocar o nome do seu usuário, por exemplo: <strong>william</strong>.</p>
</blockquote>

<h2 id="fechando-nossa-partição-criptografada">Fechando nossa partição criptografada</h2>

<p>Pronto! Agora vamos fechar nossa partição criptografada com o seguinte comando abaixo:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">umount /mnt/home
cryptsetup close /dev/mapper/home
<span class="c">## Linha baixo apaga a pasta que criamos para montagem. Pasta vazia.</span>
<span class="nb">rm</span> <span class="nt">-rf</span> /mnt/home</code></pre></figure>

<h1 id="criando-arquivos-para-montagem-automática">Criando arquivos para montagem automática</h1>

<p>Como foi mencionado acima, a partição que abrir com o cryptsetup <strong>/dev/mapper/home</strong> ela não fica permanente, então precisamos criar ou editar 2 (dois) arquivos no <strong>/etc</strong>.</p>

<h2 id="crypttab">Crypttab</h2>

<p>O arquivo <strong>/etc/crypttab</strong> é responsável por informar nosso sistema que existe um dispositivo criptografado. Caso ele não exista crie e adiciona as seguintes linhas:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># &lt;target name&gt;	&lt;source device&gt;		&lt;key file&gt;	&lt;options&gt;</span>
home <span class="nv">UUID</span><span class="o">=</span>00000000-0000-0000-0000-0000000000 none discard</code></pre></figure>

<p>O número de <strong>UID</strong> que está tudo zerado, coloquei para ilustrar. Esse número é o <strong>UID</strong>  que você terá que colocar no <strong>/etc/crypttab</strong> da partição criptografada. Porém, antes disso dê o comando abaixo para lhe retornar informações da partição criptografada e você saber o <strong>UID</strong> da mesma:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">lsblk <span class="nt">-f</span> | <span class="nb">grep</span> <span class="s2">"cryp"</span></code></pre></figure>

<p>Vai lhe retornar um número extenso, é este que você tem que colocar. Por exemplo, a saída do comando em minha máquina foi essa:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">william at ubuntu <span class="k">in </span>folder ~  ○
 ⇨ lsblk <span class="nt">-f</span> | <span class="nb">grep</span> <span class="s2">"cryp"</span>
  └─linux-home    crypto_LUKS                        824049e5-d6a1-4e91-a1fd-682456b6b500

  william at ubuntu <span class="k">in </span>folder ~  ○
 ⇨
 </code></pre></figure>

<p>Com isso meu arquivo <strong>/etc/crypttab</strong> deveria ficar assim:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># &lt;target name&gt;	&lt;source device&gt;		&lt;key file&gt;	&lt;options&gt;</span>
home <span class="nv">UUID</span><span class="o">=</span>824049e5-d6a1-4e91-a1fd-682456b6b500 none discard</code></pre></figure>

<p>Pronto! Terminamos toda configuração do arquivo <strong>/etc/crypttab</strong>.</p>

<h2 id="fstab">Fstab</h2>

<p>O arquivo <strong>/etc/fstab</strong> é responsável por carregar todo dispositivo na inicialização de nossa máquina. Ao criamos (ou editarmos) o arquivo <strong>/etc/crypttab</strong>, precisamos informar o mesmo no arquivo <strong>/etc/fstab</strong> para que nossa máquina reconheça que existe um dispositivo criptografado a ser lançado na inicialização da máquina.</p>

<p>Para isso, vamos adicionar no <strong>/etc/fstab</strong> a seguinte linha abaixo:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">/dev/mapper/home /home ext4 rw,relatime,data<span class="o">=</span>ordered 0 2</code></pre></figure>

<p>Feito, as configurações do arquivo <strong>/etc/fstab</strong> foram concluídas.</p>

<h1 id="colocando-partição-para-funcionar">Colocando partição para funcionar</h1>

<p>Terminamos aqui toda configuração da partição <strong>/home</strong> criptografada e dos arquivos que a mesma partição necessita. Porém, antes de reiniciar, execute os comandos abaixo com o <strong>grub-mkconfig</strong> (ou <em>grub2-mkconfig</em> dependendo da distro que você usa) para criar novamente nossa imagem de boot:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">grub-mkconfig <span class="nt">-o</span> /boot/grub/grub.cfg <span class="o">&amp;&amp;</span> grub-install /dev/sda</code></pre></figure>

<p>Agora, basta você reiniciar sua máquina, e durante o boot, antes de montar sua <strong>/home</strong>, o sistema irá pedir a senha para descriptografar a <strong>/home</strong> e montar a mesma.</p>

<h1 id="archlinux-e-derivados">Archlinux e derivados</h1>

<p>Essas configurações são válidas para a maiorias das distribuições Linux, porem, se você usa <a href="https://www.archlinux.org/" target="_blank">Archlinux</a> ou derivados, você precisa fazer algumas configurações a mais no arquivo <strong>/etc/mkinitcpio.conf</strong> e <strong>/etc/default/grub</strong>.</p>

<h2 id="arquivo-etcmkinitcpioconf">Arquivo /etc/mkinitcpio.conf</h2>

<p>No arquivo <strong>/etc/mkinitcpio.conf</strong>, você terá que adicionar em <strong>HOOKS</strong> a palavra <strong>encrypt</strong>. Se usar <a href="https://aur.archlinux.org/packages/plymouth/" target="_blank">Plymouth</a>, você deve colocar <strong>plymouth-encrypt</strong>.</p>

<p>Agora você precisa gerar uma imagem nova do <strong>mkinicipo</strong> com o comando abaixo:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">mkinitcpio <span class="nt">-p</span> linux</code></pre></figure>

<h2 id="arquivo-etcdefaultgrub">Arquivo /etc/default/grub</h2>

<p>No arquivo <strong>/etc/default/grub</strong>, você deve deixar o <strong>GRUB_CMDLINE_LINUX</strong> da seguinte maneira:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">GRUB_CMDLINE_LINUX</span><span class="o">=</span><span class="s2">"cryptdevice=/dev/sda2:home"</span></code></pre></figure>

<p>Vamos refazer a imagem de boot e instalar o grub com o comando:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">grub-mkconfig <span class="nt">-o</span> /boot/grub/grub.cfg <span class="o">&amp;&amp;</span> grub-install /dev/sda</code></pre></figure>

<h1 id="conclusão">Conclusão</h1>

<p>Esse foi um tutorial bem básico de como deixar nossa <strong>/home</strong> criptografada no Linux. É de certo que alguma distribuição Linux pode ter suas particularidades e você tem que configurar algo a mais na mesma, porem o principio parte dessa lógica desse tutorial. Espero que você goste e principalmente que suas dúvidas foram eliminadas, mas caso não foi, deixe aqui um comentário informando suas dúvidas. Abraço.</p>]]></content><author><name>William C. Canin</name></author><category term="crypt" /><category term="linux" /><category term="security" /><summary type="html"><![CDATA[Que tal esconder suas coisinhas da /home de possíveis pessoas "espertas"? Siga em frente neste post e descubra.]]></summary></entry><entry><title type="html">Carregando Javascripts para diferentes posts e pages no Jekyll</title><link href="https://williamcanin.github.io/blog/carregando-javascripts-para-diferentes-posts-e-pages-no-jekyll/" rel="alternate" type="text/html" title="Carregando Javascripts para diferentes posts e pages no Jekyll" /><published>2017-10-09T21:31:36+00:00</published><updated>2017-10-09T21:31:36+00:00</updated><id>https://williamcanin.github.io/blog/carregando-javascripts-para-diferentes-posts-e-pages-no-jekyll</id><content type="html" xml:base="https://williamcanin.github.io/blog/carregando-javascripts-para-diferentes-posts-e-pages-no-jekyll/"><![CDATA[<nav class="toc" id="toc" data-toc-selector=".post-content" data-toc-max-level="3" data-toc-scroll-offset="20">
  <div class="toc-head">
    <h2>Índice</h2>
    <button class="toc-toggle" aria-expanded="true" type="button">Fechar</button>
  </div>
  <div class="toc-list-wrapper">
    <ul class="toc-list" role="list"></ul>
    <p class="toc-empty" style="display:none">No titles found. Remove TOC!</p>
  </div>
</nav>

<script>
(function () {
  const minLayoutWidth = 1830;

  const toc = document.getElementById('toc');
  if (toc) {
    const sentinel = document.createElement('div');
    toc.parentNode.insertBefore(sentinel, toc);

    function shouldApplyFixed() {
      return window.innerWidth > minLayoutWidth;
    }

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (shouldApplyFixed()) {
          if (!entry.isIntersecting) {
            toc.classList.add('toc-fixed');
          } else {
            toc.classList.remove('toc-fixed');
          }
        } else {
          toc.classList.remove('toc-fixed');
        }
      },
      { threshold: 0 }
    );
    observer.observe(sentinel);

    window.addEventListener('resize', () => {
        if (!shouldApplyFixed()) {
            toc.classList.remove('toc-fixed');
        }
    });
  }

  function slugify(text) {
    if (!text) return '';
    return text.toString().toLowerCase().trim()
      .normalize('NFKD').replace(/[\u0300-\u036f]/g, '')
      .replace(/[^\w\s-]/g, '').replace(/\s+/g, '-').replace(/--+/g, '-');
  }

  function buildTOC(tocEl) {
    const selector = tocEl.dataset.tocSelector || '.post-content' || '.page-content';
    const maxLevel = parseInt(tocEl.dataset.tocMaxLevel || '3', 10);
    const offset = parseInt(tocEl.dataset.tocScrollOffset || '20', 10);
    const root = document.querySelector(selector);

    if (!root) {
      tocEl.querySelector('.toc-empty').textContent = `Content not found (${selector})`;
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const headings = Array.from(root.querySelectorAll(Array(maxLevel).fill(0).map((_, i) => `h${i + 1}`).join(',')))
      .filter(h => !tocEl.contains(h))
      .filter(h => parseInt(h.tagName.substring(1)) <= maxLevel);

    if (headings.length === 0) {
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const tocRoot = tocEl.querySelector('.toc-list');
    tocRoot.innerHTML = '';

    const idCounts = {};
    headings.forEach(h => {
      if (!h.id) {
        let id = slugify(h.textContent);
        if (!id) id = 'section';
        if (idCounts[id]) { idCounts[id] += 1; id = id + '-' + idCounts[id]; }
        else idCounts[id] = 1;
        h.id = id;
      }
    });

    // Build hierarchical tree
    const stack = [{ level: 0, ul: tocRoot }];
    headings.forEach((h, i) => {
      const level = parseInt(h.tagName.substring(1));
      const li = document.createElement('li');
      const a = document.createElement('a');
      a.href = '#' + h.id;
      a.textContent = h.textContent.trim();
      a.addEventListener('click', e => {
        e.preventDefault();
        window.scrollTo({ top: h.getBoundingClientRect().top + window.scrollY - offset, behavior: 'smooth' });
        history.replaceState(null, '', '#' + h.id);

        // // Clicking on the TOC menu closes the TOC
        // const wrapper = tocEl.querySelector('.toc-list-wrapper');
        // const toggle = tocEl.querySelector('.toc-toggle');
        // wrapper.style.display = 'none';
        // toggle.setAttribute('aria-expanded', 'false');
        // toggle.textContent = '{ { include.btn_show } }';
      });
      li.appendChild(a);

      while (stack.length > 1 && level <= stack[stack.length - 1].level) stack.pop();
      const parent = stack[stack.length - 1].ul;
      parent.appendChild(li);

      const next = headings[i + 1];
      if (next) {
        const nextLevel = parseInt(next.tagName.substring(1));
        if (nextLevel > level) {
          const newUl = document.createElement('ul');
          li.appendChild(newUl);
          stack.push({ level, ul: newUl });
        }
      }
    });

    // Active Highlight
    const links = tocRoot.querySelectorAll('a');
    function onScroll() {
      const fromTop = window.scrollY + offset + 1;
      let current = headings[0];
      for (let i = 0; i < headings.length; i++) {
        if (headings[i].offsetTop <= fromTop) current = headings[i];
      }
      links.forEach(l => l.classList.toggle('active', l.getAttribute('href') === '#' + current.id));
    }
    window.addEventListener('scroll', onScroll, { passive: true });
    onScroll();
  }

  document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.toc').forEach(toc => {
      buildTOC(toc);
      const toggle = toc.querySelector('.toc-toggle');
      const wrapper = toc.querySelector('.toc-list-wrapper');

      wrapper.style.display = 'none';
      toggle.setAttribute('aria-expanded', 'false');
      toggle.textContent = 'Abrir';

      toggle.addEventListener('click', () => {
        const expanded = toggle.getAttribute('aria-expanded') === 'true';
        wrapper.style.display = expanded ? 'none' : 'block';
        toggle.setAttribute('aria-expanded', (!expanded).toString());
        toggle.textContent = expanded ? 'Abrir' : 'Fechar';
      });

      const tocTop = toc.offsetTop;

      function handleScrollFix() {
        if (window.innerWidth <= minLayoutWidth) {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.zIndex = '';
          toc.style.width = '';
          return;
        }

        const scrollTop = window.scrollY || document.documentElement.scrollTop;

        // Fixes pinning behavior in Chrome
        if (scrollTop >= tocTop) {
          toc.classList.add('fixed');
          toc.style.position = 'fixed';
          toc.style.top = '0';
          toc.style.zIndex = '9999';
          // toc.style.width = toc.offsetWidth + 'px';
        } else {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.width = '';
        }

        // // Automatically closes the TOC if it is open and scrolled to it.
        // const rect = toc.getBoundingClientRect();
        // if (rect.top <= 0 && toggle.getAttribute('aria-expanded') === 'true') {
        //   wrapper.style.display = 'none';
        //   toggle.setAttribute('aria-expanded', 'false');
        //   toggle.textContent = '{ { include.btn_show } }';
        // }
      }

      window.addEventListener('scroll', handleScrollFix, { passive: true });
      window.addEventListener('resize', handleScrollFix);
      handleScrollFix();
    });
  });
})();
</script>

<p>Oi pessoa, tudo bem? Me desculpe pela demora de um novo post, mas é que tive alguns contratempos. Mas como diz o Serjão Berranteiro:</p>

<blockquote>
  <p>“E com fé no Pai Eterno sempre aqui estou vou estar tô ae firme pro meu
berrante tocá”.</p>
</blockquote>

<p>😃</p>

<p>Deixando as desculpas de lado, vamos ao que interessa; o Post!</p>

<h2 id="introdução">Introdução</h2>

<p>Essa é uma dica rápida pra você que utiliza <a href="https://jekyllrb.com/" target="_blank">Jekyll</a> como gerador de sites estáticos.</p>

<p>Colocar seus códigos Javascript tudo em apenas um arquivo .js, não é tão recomendável assim, independente de utilizar geradores de sites estáticos ou não. Isso porque ao ser carregado pelo navegador, pode existir um trecho de código de uma determinada página, que não deveria ser carregado, assim irá carregar códigos extras sem necessidade.</p>

<p>A melhor forma de fazer isso, é cada página carregar seu próprio Javascript, isso irá otimizar muito a velocidade de carregamento seu website, caso possua uma gama de códigos javascript em seu carregamento.</p>

<h2 id="requerimentos">Requerimentos</h2>

<p>O que você irá precisar para continuar com essa leitura:</p>

<table>
  <thead>
    <tr>
      <th>Requerido</th>
      <th>Como verificar</th>
      <th>Como instalar</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Ruby</td>
      <td><code class="language-plaintext highlighter-rouge">ruby -v</code></td>
      <td><a href="https://www.ruby-lang.org" target="_blank">Ruby</a></td>
    </tr>
    <tr>
      <td>Gem</td>
      <td><code class="language-plaintext highlighter-rouge">gem -v</code></td>
      <td><strong>Ruby</strong> contém <strong>Gem</strong></td>
    </tr>
    <tr>
      <td>Jekyll</td>
      <td><code class="language-plaintext highlighter-rouge">jekyll -v</code></td>
      <td><code class="language-plaintext highlighter-rouge">gem install jekyll</code></td>
    </tr>
  </tbody>
</table>

<p>Instale conforme o seu sistema operacional.</p>

<h2 id="o-laço-for-no-layoutdefaulthtml">O laço ‘For’ no layout/default.html</h2>

<p>Você pode fazer essa otimização de carregamento de javascripts com <a href="https://jekyllrb.com/" target="_blank">Jekyll</a> de uma forma simples, usando um laço <strong>for</strong> no final do arquivo <em>layout/default.html</em>. Veja:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="c">&lt;!-- Specific for each pages. --&gt;</span>
{ % for script_page in page.script % }
   <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"{ { '/assets/javascripts/' | prepend: site.baseurl | prepend: site.url  | append: script_page } }"</span><span class="nt">&gt;&lt;/script&gt;</span>
{ % endfor % }</code></pre></figure>

<blockquote>
  <p>NOTA: Sem espaços entre as chaves.</p>
</blockquote>

<h3 id="entendendo-o-for">Entendendo o ‘For’</h3>

<p>Observe que o diretório de meus javascripts está com PATH para <em>/assets/javascripts/</em>, ou seja, você deve modificar esse PATH para o local onde esteja seus javascripts.</p>

<p>Na linha <em>{ % for script_page in page.script % }</em>, a variável <strong>script_page</strong> é responsável por amarzenar os valores do laço.
A variável <strong>page</strong> é uma variável padrão do Jekyll, que carrega os arquivos de posts e pages, e a variável <strong>script</strong> temos que criar nos arquivos de post e page.</p>

<h2 id="o-arquivo-de-postagem">O arquivo de postagem</h2>

<p>Como dito antes, temos que criar a variável de <strong>script</strong> dentro do cabeçalho de nossos arquivos de post e page. Dentro de um arquivo no diretório <strong>_posts/mypost.md</strong> por exemplo, adicionaremos:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"># Does not change and does not remove 'script' variable.
script: [post.js]</code></pre></figure>

<p>Nesse casso, você deve colocar essa linha para todos arquivos dentro de <strong>_posts</strong> . Para os arquivos de páginas, você deve colocar também, porém deves mudar o nome do valor da variável <strong>script</strong> para <strong>pages.js</strong>, assim:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"># Does not change and does not remove 'script' variable.
script: [pages.js]</code></pre></figure>

<h3 id="exemplo-para-arquivos-de-posts">Exemplo para arquivos de posts</h3>

<figure class="highlight"><pre><code class="language-text" data-lang="text">---
layout: post
title: My Post 1
date: 2017-05-09 18:31:36
# Does not change and does not remove 'script' variable.
script: [post.js]
---</code></pre></figure>

<h3 id="exemplo-para-arquivos-de-pages">Exemplo para arquivos de pages</h3>

<figure class="highlight"><pre><code class="language-text" data-lang="text">---
layout: page
title: My Page 1
date: 2017-05-09 18:31:36
# Does not change and does not remove 'script' variable.
script: [page1.js]
---</code></pre></figure>

<p>Nesse caso todos os posts irá carregar o código javascript contido no arquivo
<strong>/assets/javascripts/post.js</strong>, ou seja, será um arquivo global para todos os posts, mas você pode especificar um para cada post se quiser também. Os arquivos de páginas, segue o mesmo raciocínio. Nesse exemplo está carregando o
<strong>/assets/javascripts/page1.js</strong>, mas também pode ter um glogal para todas as páginas.</p>

<h2 id="conclusão">Conclusão</h2>

<p>Fazendo dessa forma, você tem maior controle de qual página ou qual post deve carregar um determinado javascript para si próprio. Otimização de código é um marco importante para um bom desenvolvedor. Eu fico por aqui, espero que você possa ter entendido como otimizar o carregamento de javascripts no <a href="https://jekyllrb.com/" target="_blank">Jekyll</a>. Abraço pessoa, :punch:.</p>]]></content><author><name>William C. Canin</name></author><category term="jekyll" /><category term="javascripts" /><category term="liquid" /><summary type="html"><![CDATA[Será que seu projeto em Jekyll está carregados códigos desnecessário? Esse post te ensinará como otimizar o carregamento de javascripts no projeto.]]></summary></entry><entry><title type="html">Instalando Arch Linux com criptografia LUKS e LVM</title><link href="https://williamcanin.github.io/blog/instalando-archlinux-com-criptografia-luks-e-lvm/" rel="alternate" type="text/html" title="Instalando Arch Linux com criptografia LUKS e LVM" /><published>2017-04-27T14:33:43+00:00</published><updated>2017-04-27T14:33:43+00:00</updated><id>https://williamcanin.github.io/blog/instalando-archlinux-com-criptografia-luks-e-lvm</id><content type="html" xml:base="https://williamcanin.github.io/blog/instalando-archlinux-com-criptografia-luks-e-lvm/"><![CDATA[<nav class="toc" id="toc" data-toc-selector=".post-content" data-toc-max-level="3" data-toc-scroll-offset="20">
  <div class="toc-head">
    <h2>Índice</h2>
    <button class="toc-toggle" aria-expanded="true" type="button">Fechar</button>
  </div>
  <div class="toc-list-wrapper">
    <ul class="toc-list" role="list"></ul>
    <p class="toc-empty" style="display:none">No titles found. Remove TOC!</p>
  </div>
</nav>

<script>
(function () {
  const minLayoutWidth = 1830;

  const toc = document.getElementById('toc');
  if (toc) {
    const sentinel = document.createElement('div');
    toc.parentNode.insertBefore(sentinel, toc);

    function shouldApplyFixed() {
      return window.innerWidth > minLayoutWidth;
    }

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (shouldApplyFixed()) {
          if (!entry.isIntersecting) {
            toc.classList.add('toc-fixed');
          } else {
            toc.classList.remove('toc-fixed');
          }
        } else {
          toc.classList.remove('toc-fixed');
        }
      },
      { threshold: 0 }
    );
    observer.observe(sentinel);

    window.addEventListener('resize', () => {
        if (!shouldApplyFixed()) {
            toc.classList.remove('toc-fixed');
        }
    });
  }

  function slugify(text) {
    if (!text) return '';
    return text.toString().toLowerCase().trim()
      .normalize('NFKD').replace(/[\u0300-\u036f]/g, '')
      .replace(/[^\w\s-]/g, '').replace(/\s+/g, '-').replace(/--+/g, '-');
  }

  function buildTOC(tocEl) {
    const selector = tocEl.dataset.tocSelector || '.post-content' || '.page-content';
    const maxLevel = parseInt(tocEl.dataset.tocMaxLevel || '3', 10);
    const offset = parseInt(tocEl.dataset.tocScrollOffset || '20', 10);
    const root = document.querySelector(selector);

    if (!root) {
      tocEl.querySelector('.toc-empty').textContent = `Content not found (${selector})`;
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const headings = Array.from(root.querySelectorAll(Array(maxLevel).fill(0).map((_, i) => `h${i + 1}`).join(',')))
      .filter(h => !tocEl.contains(h))
      .filter(h => parseInt(h.tagName.substring(1)) <= maxLevel);

    if (headings.length === 0) {
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const tocRoot = tocEl.querySelector('.toc-list');
    tocRoot.innerHTML = '';

    const idCounts = {};
    headings.forEach(h => {
      if (!h.id) {
        let id = slugify(h.textContent);
        if (!id) id = 'section';
        if (idCounts[id]) { idCounts[id] += 1; id = id + '-' + idCounts[id]; }
        else idCounts[id] = 1;
        h.id = id;
      }
    });

    // Build hierarchical tree
    const stack = [{ level: 0, ul: tocRoot }];
    headings.forEach((h, i) => {
      const level = parseInt(h.tagName.substring(1));
      const li = document.createElement('li');
      const a = document.createElement('a');
      a.href = '#' + h.id;
      a.textContent = h.textContent.trim();
      a.addEventListener('click', e => {
        e.preventDefault();
        window.scrollTo({ top: h.getBoundingClientRect().top + window.scrollY - offset, behavior: 'smooth' });
        history.replaceState(null, '', '#' + h.id);

        // // Clicking on the TOC menu closes the TOC
        // const wrapper = tocEl.querySelector('.toc-list-wrapper');
        // const toggle = tocEl.querySelector('.toc-toggle');
        // wrapper.style.display = 'none';
        // toggle.setAttribute('aria-expanded', 'false');
        // toggle.textContent = '{ { include.btn_show } }';
      });
      li.appendChild(a);

      while (stack.length > 1 && level <= stack[stack.length - 1].level) stack.pop();
      const parent = stack[stack.length - 1].ul;
      parent.appendChild(li);

      const next = headings[i + 1];
      if (next) {
        const nextLevel = parseInt(next.tagName.substring(1));
        if (nextLevel > level) {
          const newUl = document.createElement('ul');
          li.appendChild(newUl);
          stack.push({ level, ul: newUl });
        }
      }
    });

    // Active Highlight
    const links = tocRoot.querySelectorAll('a');
    function onScroll() {
      const fromTop = window.scrollY + offset + 1;
      let current = headings[0];
      for (let i = 0; i < headings.length; i++) {
        if (headings[i].offsetTop <= fromTop) current = headings[i];
      }
      links.forEach(l => l.classList.toggle('active', l.getAttribute('href') === '#' + current.id));
    }
    window.addEventListener('scroll', onScroll, { passive: true });
    onScroll();
  }

  document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.toc').forEach(toc => {
      buildTOC(toc);
      const toggle = toc.querySelector('.toc-toggle');
      const wrapper = toc.querySelector('.toc-list-wrapper');

      wrapper.style.display = 'none';
      toggle.setAttribute('aria-expanded', 'false');
      toggle.textContent = 'Abrir';

      toggle.addEventListener('click', () => {
        const expanded = toggle.getAttribute('aria-expanded') === 'true';
        wrapper.style.display = expanded ? 'none' : 'block';
        toggle.setAttribute('aria-expanded', (!expanded).toString());
        toggle.textContent = expanded ? 'Abrir' : 'Fechar';
      });

      const tocTop = toc.offsetTop;

      function handleScrollFix() {
        if (window.innerWidth <= minLayoutWidth) {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.zIndex = '';
          toc.style.width = '';
          return;
        }

        const scrollTop = window.scrollY || document.documentElement.scrollTop;

        // Fixes pinning behavior in Chrome
        if (scrollTop >= tocTop) {
          toc.classList.add('fixed');
          toc.style.position = 'fixed';
          toc.style.top = '0';
          toc.style.zIndex = '9999';
          // toc.style.width = toc.offsetWidth + 'px';
        } else {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.width = '';
        }

        // // Automatically closes the TOC if it is open and scrolled to it.
        // const rect = toc.getBoundingClientRect();
        // if (rect.top <= 0 && toggle.getAttribute('aria-expanded') === 'true') {
        //   wrapper.style.display = 'none';
        //   toggle.setAttribute('aria-expanded', 'false');
        //   toggle.textContent = '{ { include.btn_show } }';
        // }
      }

      window.addEventListener('scroll', handleScrollFix, { passive: true });
      window.addEventListener('resize', handleScrollFix);
      handleScrollFix();
    });
  });
})();
</script>

<p>Ei, beleza? 👍</p>

<p>Este é o guia que fiz, e uso atualmente para instalar o <a href="https://archlinux.org/">Arch Linux</a> em
minha máquina.</p>

<p>Este guia irá ter detalhes e comentários RESUMIDO de cada comando, caso queira um guia com apenas os
comandos, sem muita “verbosidade” de comentários, use este outro guia que fiz em modo <code class="language-plaintext highlighter-rouge">.txt</code>:
<a href="/docs/raw/archlinux_installation.txt">archlinux_installation.txt</a>.</p>

<blockquote>
  <p>NOTA: Nesses guias, talvez nem tudo sirva para seu gosto e/ou suporte de sua máquina, então se
for usar algo, tenha consciência se é compatível com seu setup. Não me responsabilizo por qualquer
dano que sua máquina venha sofrer.</p>
</blockquote>

<h1 id="preparação-de-flash-drive">Preparação de Flash Drive</h1>

<p>Baixo a imagem do Arch Linux em <a href="https://archlinux.org/download/">Arch Linux Download</a>.
Eu uso o BitTorrent para evitar corromper a imagem durante o download, e para gravar a imagem, se
eu estiver no Linux, uso <code class="language-plaintext highlighter-rouge">dd</code> com o comando abaixo:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">dd </span><span class="nv">bs</span><span class="o">=</span>4M <span class="k">if</span><span class="o">=</span>archlinux-&lt;VERSION&gt;-x86_64.iso <span class="nv">of</span><span class="o">=</span>/dev/sdX <span class="nv">conv</span><span class="o">=</span>fsync <span class="nv">oflag</span><span class="o">=</span>direct <span class="nv">status</span><span class="o">=</span>progress
</code></pre></div></div>

<blockquote>
  <p>Nota: Substitua o sdX pelo flash drive real.</p>
</blockquote>

<h1 id="iniciando-a-instalação">Iniciando a instalação</h1>

<p>Quando já estou dentro da ISO do <strong>Arch Linux</strong>, sigo esses passos:</p>

<h1 id="layout">Layout</h1>

<p>Atribuo layout do teclado para <code class="language-plaintext highlighter-rouge">br-abnt2</code>, que é o que eu uso:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>loadkeys br-abnt2
</code></pre></div></div>

<h1 id="conexão-com-a-internet">Conexão com a internet</h1>

<p><strong>Via Cabo:</strong></p>

<p>Apenas conecto o cabo de rede e já tenho internet na ISO do <strong>Arch Linux</strong>.</p>

<div class="details-start" data-summary="Via Wi-Fi"></div>

<script>
(function(){
  if (window.__jekyll_details_setup) return;
  window.__jekyll_details_setup = true;

  function initDetails(){
    const starts = document.querySelectorAll('.details-start');
    starts.forEach(start => {
      const summary = start.getAttribute('data-summary') || 'Detalhes';

      let end = start.nextSibling;
      while(end && !(end.nodeType === 1 && end.classList.contains('details-end'))){
        end = end.nextSibling;
      }
      if(!end) return;

      let node = start.nextSibling;
      const content = [];
      while(node && node !== end){
        const next = node.nextSibling;
        if(node.nodeType === Node.ELEMENT_NODE || (node.nodeType === Node.TEXT_NODE && node.textContent.trim())){
          content.push(node.cloneNode(true));
        }
        node = next;
      }

      const details = document.createElement('details');
      const sum = document.createElement('summary');
      sum.textContent = summary;
      details.appendChild(sum);

      const wrapper = document.createElement('div');
      wrapper.className = 'details-content-wrapper';

      content.forEach(el => wrapper.appendChild(el));

      details.appendChild(wrapper);

      start.parentNode.insertBefore(details, start);
      let cur = start;
      while(cur){
        const next = cur.nextSibling;
        cur.remove();
        if(cur === end) break;
        cur = next;
      }
    });
  }

  if(document.readyState === 'loading')
    document.addEventListener('DOMContentLoaded', initDetails);
  else
    initDetails();
})();
</script>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl start iwd<span class="p">;</span>
iwctl
</code></pre></div></div>

<p>Quando entrar dentro do <code class="language-plaintext highlighter-rouge">[iwd]#</code>, os passos de comandos que uso serão esses basicamente:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>device list
device &lt;NAME&gt; set-property Powered on
adapter set-property Powered on
station list
station &lt;IFACE_NAME&gt; scan
station &lt;IFACE_NAME&gt; get-networks
station &lt;IFACE_NAME&gt; connect <span class="s1">'&lt;NETWORK_NAME&gt;'</span>
Passphrase:
quit
</pre></td></tr></tbody></table></code></pre></figure>

<!-- enddetails -->
<div class="details-end"></div>

<blockquote>
  <p>NOTA: Após configurar a internet, faço um <code class="language-plaintext highlighter-rouge">ping 8.8.8.8</code> para verificar.</p>
</blockquote>

<h1 id="conexão-ssh">Conexão SSH</h1>

<p>Geralmente faço a instalação do <strong>Arch Linux</strong> na minha máquina via SSH, ou seja, de outra máquina,
assim eu consigo abrir este guia e apenas copiar e colar os comandos do que ficar digitando cada
comando.</p>

<p><strong>(1)</strong> - Para habilitar o SSH na ISO do <strong>Arch Linux</strong> é simples, a ISO já vem com o SSH instalado,
 então basta ativar:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemct start sshd
</code></pre></div></div>

<p><strong>(2)</strong> - Após isso crio a senha do root da imagem ISO para poder fazer a conexão SSH:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>passwd
</code></pre></div></div>

<p><strong>(3)</strong> - Agora na outra máquina apenas me conecto:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh root@192.168.X.XX
</code></pre></div></div>

<h1 id="particionamento">Particionamento</h1>

<p>Aqui é a parte MAIS DELICADA, tenho o MÁXIMO de atenção para não escolher a unidade errada. hehe 😁</p>

<p>Não vou colocar comandos de como realizar o particionamento, apenas relatar algumas informações
IMPORTANTES e o esboço (tabela) de como o particionamento para a instalação do <strong>Arch Linux</strong> fica
em minha máquina.</p>

<h2 id="tabela">Tabela</h2>

<table>
  <thead>
    <tr>
      <th>Dispositivo</th>
      <th>Tamanho</th>
      <th>Tipo</th>
      <th>Local</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>/dev/sda1</td>
      <td>1,5G</td>
      <td>Sistema EFI</td>
      <td>/boot</td>
    </tr>
    <tr>
      <td>/dev/sda2</td>
      <td>120G</td>
      <td>Linux LVM</td>
      <td> </td>
    </tr>
    <tr>
      <td>/dev/sdb1</td>
      <td>1T</td>
      <td>Linux filesystems</td>
      <td>/home</td>
    </tr>
  </tbody>
</table>

<div class="details-start" data-summary="&gt;&gt;&gt; Informações interessantes 🤔"></div>

<script>
(function(){
  if (window.__jekyll_details_setup) return;
  window.__jekyll_details_setup = true;

  function initDetails(){
    const starts = document.querySelectorAll('.details-start');
    starts.forEach(start => {
      const summary = start.getAttribute('data-summary') || 'Detalhes';

      let end = start.nextSibling;
      while(end && !(end.nodeType === 1 && end.classList.contains('details-end'))){
        end = end.nextSibling;
      }
      if(!end) return;

      let node = start.nextSibling;
      const content = [];
      while(node && node !== end){
        const next = node.nextSibling;
        if(node.nodeType === Node.ELEMENT_NODE || (node.nodeType === Node.TEXT_NODE && node.textContent.trim())){
          content.push(node.cloneNode(true));
        }
        node = next;
      }

      const details = document.createElement('details');
      const sum = document.createElement('summary');
      sum.textContent = summary;
      details.appendChild(sum);

      const wrapper = document.createElement('div');
      wrapper.className = 'details-content-wrapper';

      content.forEach(el => wrapper.appendChild(el));

      details.appendChild(wrapper);

      start.parentNode.insertBefore(details, start);
      let cur = start;
      while(cur){
        const next = cur.nextSibling;
        cur.remove();
        if(cur === end) break;
        cur = next;
      }
    });
  }

  if(document.readyState === 'loading')
    document.addEventListener('DOMContentLoaded', initDetails);
  else
    initDetails();
})();
</script>

<h2 id="boot">Boot</h2>

<p>O <strong>Arch Linux</strong> precisa apenas de uma partição de boot, a <code class="language-plaintext highlighter-rouge">/boot</code> do tipo <strong>EFI System</strong>,
MAS, quando quero fazer um dual-boot com outras distros, que necessita de duas
partições de boot separadas, uma <code class="language-plaintext highlighter-rouge">/boot</code> do tipo <strong>Linux filesystems</strong> e outra <code class="language-plaintext highlighter-rouge">/boot/efi</code> do tipo
<strong>EFI System</strong>, por exemplo, <strong>Fedora 42</strong>, e eu queira COMPARTILHAR o bootloader, no caso o
<strong>systemd-boot</strong> (que eu uso) entre ambas, então instalo o <strong>Arch Linux</strong> com a partição de
boot separada em duas também.</p>

<p>Toda vez que o <strong>Arch Linux</strong> gera o “<strong>vmlinuz-linux-lts</strong>” e “<strong>initramfs-linux-lts.img</strong>” por exemplo, ele
gera no diretório <code class="language-plaintext highlighter-rouge">/boot</code>, isso porque a configuração padrão é para este diretório, mas com a EFI
apontando para <code class="language-plaintext highlighter-rouge">/boot/efi</code>, tive que modificar essa configuração no arquivo
<code class="language-plaintext highlighter-rouge">/etc/mkinitcpio.d/linux-lts.preset</code> (kernel LTS) e reinstalar o kernel. Na seção de
<strong>Instalando o bootloader systemd-boot</strong>, terá mais informações sobre essa modificação.</p>

<ul>
  <li>Sabendo disso, nesses guias NÃO VOU USAR duas partição de boot separadas porque não uso mais
dual-boot e nem compartilhamento do <strong>systemd-boot</strong> com outros sistemas, porém, eu vou relatar
cada passo que precisa fazer em uma instalação com <code class="language-plaintext highlighter-rouge">/boot</code> e <code class="language-plaintext highlighter-rouge">/boot/efi</code> caso eu precise futuramente.</li>
</ul>

<h2 id="sistema">Sistema</h2>

<p>Instalo o <strong>Arch Linux</strong> em um SSD de <strong>250 Gigabytes</strong> (<em>250Gb</em>), mas eu apenas deixo <strong>120Gb</strong>,
não uso mais que isso para o sistema <strong>Arch Linux</strong>. Atualmente estou usando o sistema de
arquivo <code class="language-plaintext highlighter-rouge">ext4</code>.</p>

<h2 id="home">Home</h2>

<p>Tenho um SSD de <strong>1 Terabyte</strong> (<em>1Tb</em>) para minha <code class="language-plaintext highlighter-rouge">/home</code>, e criptografo a mesma usando o
LUKS (<em>dm-crypt</em>), com o sistema de arquivos <code class="language-plaintext highlighter-rouge">ext4</code>.</p>

<h2 id="tabela-1">Tabela</h2>

<p>Tabela com a partição de boot separada em duas deve ficar assim:</p>

<table>
  <thead>
    <tr>
      <th>Dispositivo</th>
      <th>Tamanho</th>
      <th>Tipo</th>
      <th>Local</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>/dev/sda1</td>
      <td>2G</td>
      <td>Linux filesystems</td>
      <td>/boot</td>
    </tr>
    <tr>
      <td>/dev/sda2</td>
      <td>2G</td>
      <td>EFI System</td>
      <td>/boot/efi</td>
    </tr>
    <tr>
      <td>/dev/sda3</td>
      <td>120G</td>
      <td>Linux LVM</td>
      <td> </td>
    </tr>
    <tr>
      <td>/dev/sdb1</td>
      <td>1T</td>
      <td>Linux filesystems</td>
      <td>/home</td>
    </tr>
  </tbody>
</table>

<!-- enddetails -->
<div class="details-end"></div>

<p>Para realizar o particionamento, geralmente eu uso o <code class="language-plaintext highlighter-rouge">cfdisk</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cfdisk /dev/sdX
</code></pre></div></div>

<blockquote>
  <p>Nota: Substituo o sdX pelo dispositivo real, <code class="language-plaintext highlighter-rouge">/dev/sda</code> e <code class="language-plaintext highlighter-rouge">/dev/sdb</code>.</p>
</blockquote>

<h1 id="criando-estrutura-lvm-para-o-sistema">Criando estrutura LVM para o sistema</h1>

<p>No <strong>LVM</strong>, precisa criar um <strong>Volume Físico</strong> (PV), <strong>Grupo</strong> (VG), e um <strong>Volume Lógico</strong> (LV),
onde o grupo vai fazer parte de um volume físico, e o volume lógico vai estar dentro de um grupo.</p>

<p>Gosto de usar <strong>LVM</strong> para ter controle sobre minhas partições, caso eu queira aumentar ou diminuir
sem ter problema de corromper dados. Para isso, os comando que uso são simples:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pvcreate /dev/sda3<span class="p">;</span>
vgcreate linux /dev/sda3<span class="p">;</span>
lvcreate <span class="nt">-L</span> 120G linux <span class="nt">-n</span> <span class="nb">arch</span><span class="p">;</span>
</code></pre></div></div>

<blockquote>
  <p>NOTA: No segundo comando, o nome <code class="language-plaintext highlighter-rouge">linux</code> é o nome do grupo que defino (pode ser qualquer nome), no
terceiro comando, crio um volume lógico especificando o grupo (<code class="language-plaintext highlighter-rouge">linux</code>).</p>
</blockquote>

<h1 id="criando-e-criptografando-a-unidade-home">Criando e criptografando a unidade /home</h1>

<p><strong>(1)</strong> - Criptografando a unidade <code class="language-plaintext highlighter-rouge">/dev/sdb1</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cryptsetup <span class="nt">-y</span> <span class="nt">-v</span> luksFormat /dev/sdb1
</code></pre></div></div>

<blockquote>
  <p>IMPORTANTE!!! Se tenho uma unidade <code class="language-plaintext highlighter-rouge">/dev/mapper/home</code> criptografada com meus arquivos, então não
faço o passo <strong>1</strong>, senão irei perder meus dados/arquivos. PULO para o passo <strong>2</strong>.</p>
</blockquote>

<p><strong>(2)</strong> - Criando/abrindo a unidade criptografada:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cryptsetup open /dev/sdb1 home
</code></pre></div></div>

<h1 id="formatação">Formatação</h1>

<p>Agora formato cada unidade que foi criada:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkfs.fat <span class="nt">-F</span> 32 /dev/sda1<span class="p">;</span>
mkfs <span class="nt">-t</span> ext4 /dev/mapper/linux-arch<span class="p">;</span>
mkfs <span class="nt">-t</span> ext4 /dev/mapper/home<span class="p">;</span>
</code></pre></div></div>

<div class="details-start" data-summary="Com partição de boot separada"></div>

<script>
(function(){
  if (window.__jekyll_details_setup) return;
  window.__jekyll_details_setup = true;

  function initDetails(){
    const starts = document.querySelectorAll('.details-start');
    starts.forEach(start => {
      const summary = start.getAttribute('data-summary') || 'Detalhes';

      let end = start.nextSibling;
      while(end && !(end.nodeType === 1 && end.classList.contains('details-end'))){
        end = end.nextSibling;
      }
      if(!end) return;

      let node = start.nextSibling;
      const content = [];
      while(node && node !== end){
        const next = node.nextSibling;
        if(node.nodeType === Node.ELEMENT_NODE || (node.nodeType === Node.TEXT_NODE && node.textContent.trim())){
          content.push(node.cloneNode(true));
        }
        node = next;
      }

      const details = document.createElement('details');
      const sum = document.createElement('summary');
      sum.textContent = summary;
      details.appendChild(sum);

      const wrapper = document.createElement('div');
      wrapper.className = 'details-content-wrapper';

      content.forEach(el => wrapper.appendChild(el));

      details.appendChild(wrapper);

      start.parentNode.insertBefore(details, start);
      let cur = start;
      while(cur){
        const next = cur.nextSibling;
        cur.remove();
        if(cur === end) break;
        cur = next;
      }
    });
  }

  if(document.readyState === 'loading')
    document.addEventListener('DOMContentLoaded', initDetails);
  else
    initDetails();
})();
</script>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkfs <span class="nt">-t</span> ext4 /dev/sda1<span class="p">;</span>
mkfs.fat <span class="nt">-F</span> 32 /dev/sda2<span class="p">;</span>
mkfs <span class="nt">-t</span> ext4 /dev/mapper/linux-arch<span class="p">;</span>
mkfs <span class="nt">-t</span> ext4 /dev/mapper/home<span class="p">;</span>
</code></pre></div></div>
<!-- enddetails -->
<div class="details-end"></div>

<blockquote>
  <p>IMPORTANTE!!! Se tenho a partição <code class="language-plaintext highlighter-rouge">/dev/mapper/home</code> com arquivos, não formato senão irei perder
TODOS meus dados/arquivos.</p>
</blockquote>

<p>Depois de todas unidades estarem criadas e formatadas, gosto de verificar com o comando: <code class="language-plaintext highlighter-rouge">lsblk -f</code>:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>NAME        FSTYPE      FSVER     LABEL     UUID                                   FSAVAIL FSUSE% MOUNTPOINTS
sda
├─sda1      vfat        FAT32               BA60-4D21                                 1,5G    12% /boot
└─sda2      LVM2_member LVM2 001            8YUXnI-FwmY-Vc8V-fUHy-cVdF-zi9X-MDAK0s
  └──linux-arch
           ext4        1.0                  0a73a608-5260-45c8-9bdd-8285c4a4a84b     89,8G    44% /
sdb
└─sdb1      crypto_LUKS 2                   a4fd06b1-a253-4661-b5a2-47ae92e68efe
  └─home    ext4        1.0                 65660251-8451-4722-adbd-ff5850c5df6d    999,7G    37% /home
</pre></td></tr></tbody></table></code></pre></figure>

<div class="details-start" data-summary="Com partição de boot separada"></div>

<script>
(function(){
  if (window.__jekyll_details_setup) return;
  window.__jekyll_details_setup = true;

  function initDetails(){
    const starts = document.querySelectorAll('.details-start');
    starts.forEach(start => {
      const summary = start.getAttribute('data-summary') || 'Detalhes';

      let end = start.nextSibling;
      while(end && !(end.nodeType === 1 && end.classList.contains('details-end'))){
        end = end.nextSibling;
      }
      if(!end) return;

      let node = start.nextSibling;
      const content = [];
      while(node && node !== end){
        const next = node.nextSibling;
        if(node.nodeType === Node.ELEMENT_NODE || (node.nodeType === Node.TEXT_NODE && node.textContent.trim())){
          content.push(node.cloneNode(true));
        }
        node = next;
      }

      const details = document.createElement('details');
      const sum = document.createElement('summary');
      sum.textContent = summary;
      details.appendChild(sum);

      const wrapper = document.createElement('div');
      wrapper.className = 'details-content-wrapper';

      content.forEach(el => wrapper.appendChild(el));

      details.appendChild(wrapper);

      start.parentNode.insertBefore(details, start);
      let cur = start;
      while(cur){
        const next = cur.nextSibling;
        cur.remove();
        if(cur === end) break;
        cur = next;
      }
    });
  }

  if(document.readyState === 'loading')
    document.addEventListener('DOMContentLoaded', initDetails);
  else
    initDetails();
})();
</script>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>NAME        FSTYPE      FSVER     LABEL     UUID                                   FSAVAIL FSUSE% MOUNTPOINTS
sda
├─sda1      ext4        1.0                 69660251-8451-4322-cdbd-ff5850c5df6d      1,5G    12% /boot
├─sda2      vfat        FAT32               BA60-4D21                                 1,5G    12% /boot
└─sda3      LVM2_member LVM2 001            8YUXnI-FwmY-Vc8V-fUHy-cVdF-zi9X-MDAK0s
  └──linux-arch
           ext4        1.0                  0a73a608-5260-45c8-9bdd-8285c4a4a84b     89,8G    44% /
sdb
└─sdb1      crypto_LUKS 2                   a4fd06b1-a253-4661-b5a2-47ae92e68efe
  └─home    ext4        1.0                 65660251-8451-4722-adbd-ff5850c5df6d    999,7G    37% /home
</pre></td></tr></tbody></table></code></pre></figure>

<!-- enddetails -->
<div class="details-end"></div>

<h1 id="montagem-das-unidades">Montagem das unidades</h1>

<p>Tudo em ordem, agora faço o <code class="language-plaintext highlighter-rouge">mount</code> das unidades:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount /dev/mapper/linux-arch /mnt<span class="p">;</span>
mount <span class="nt">--mkdir</span> /dev/sda1 /mnt/boot<span class="p">;</span>
mount <span class="nt">--mkdir</span> /dev/mapper/home /mnt/home<span class="p">;</span>
</code></pre></div></div>

<div class="details-start" data-summary="Com partição de boot separada"></div>

<script>
(function(){
  if (window.__jekyll_details_setup) return;
  window.__jekyll_details_setup = true;

  function initDetails(){
    const starts = document.querySelectorAll('.details-start');
    starts.forEach(start => {
      const summary = start.getAttribute('data-summary') || 'Detalhes';

      let end = start.nextSibling;
      while(end && !(end.nodeType === 1 && end.classList.contains('details-end'))){
        end = end.nextSibling;
      }
      if(!end) return;

      let node = start.nextSibling;
      const content = [];
      while(node && node !== end){
        const next = node.nextSibling;
        if(node.nodeType === Node.ELEMENT_NODE || (node.nodeType === Node.TEXT_NODE && node.textContent.trim())){
          content.push(node.cloneNode(true));
        }
        node = next;
      }

      const details = document.createElement('details');
      const sum = document.createElement('summary');
      sum.textContent = summary;
      details.appendChild(sum);

      const wrapper = document.createElement('div');
      wrapper.className = 'details-content-wrapper';

      content.forEach(el => wrapper.appendChild(el));

      details.appendChild(wrapper);

      start.parentNode.insertBefore(details, start);
      let cur = start;
      while(cur){
        const next = cur.nextSibling;
        cur.remove();
        if(cur === end) break;
        cur = next;
      }
    });
  }

  if(document.readyState === 'loading')
    document.addEventListener('DOMContentLoaded', initDetails);
  else
    initDetails();
})();
</script>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount /dev/mapper/linux-arch /mnt<span class="p">;</span>
mount <span class="nt">--mkdir</span> /dev/sda1 /mnt/boot<span class="p">;</span>
mount <span class="nt">--mkdir</span> /dev/sda2 /mnt/boot/efi<span class="p">;</span>
mount <span class="nt">--mkdir</span> /dev/mapper/home /mnt/home<span class="p">;</span>
</code></pre></div></div>
<!-- enddetails -->
<div class="details-end"></div>

<h1 id="instalando-o-sistema-base-do-arch-linux">Instalando o sistema base do Arch Linux</h1>

<p>Aqui eu atualizo os <code class="language-plaintext highlighter-rouge">mirrorlist</code> para o <code class="language-plaintext highlighter-rouge">Brazil</code> e <code class="language-plaintext highlighter-rouge">US</code> usando <code class="language-plaintext highlighter-rouge">reflector</code> já disponível na ISO do
<strong>Arch Linux</strong>, e logo em seguida atualizo as chaves e o cache, para depois fazer instalação do
sistema base com o kernel LTS, e alguns pacotes que acho essenciais durante a instalação.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre>reflector <span class="nt">--verbose</span> <span class="nt">--country</span> Brazil,US <span class="nt">--age</span> 12 <span class="nt">--protocol</span> https <span class="nt">--sort</span> rate <span class="nt">--save</span> /etc/pacman.d/mirrorlist<span class="p">;</span>
pacman <span class="nt">-Syy</span><span class="p">;</span>
pacman <span class="nt">-Sy</span> archlinux-keyring<span class="p">;</span>
pacman-key <span class="nt">--populate</span> archlinux<span class="p">;</span>
pacstrap <span class="nt">-K</span> /mnt base base-devel linux-lts linux-lts-headers linux-firmware systemd systemd-ukify <span class="nb">sudo </span>vim dhcpcd wireless_tools wpa_supplicant<span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h1 id="gerando-o-etcfstab">Gerando o /etc/fstab</h1>

<p>Aqui não tenho muito o que dizer, apenas gero o <code class="language-plaintext highlighter-rouge">/etc/fstab</code> para que todas minhas partições montadas
sejam configuradas durando o boot da máquina.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>genfstab <span class="nt">-U</span> <span class="nt">-p</span> /mnt <span class="o">&gt;&gt;</span> /mnt/etc/fstab
</code></pre></div></div>

<h1 id="entrando-no-sistema-pré-instalado">Entrando no sistema pré-instalado</h1>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>arch-chroot /mnt /bin/bash
</code></pre></div></div>

<h1 id="atribuindo-senha-de-root">Atribuindo senha de <code class="language-plaintext highlighter-rouge">root</code></h1>

<p>A primeira coisa que gosto de fazer é atribuir uma senha para o usuário <code class="language-plaintext highlighter-rouge">root</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>passwd
</code></pre></div></div>

<h1 id="configurando-internet">Configurando internet</h1>

<p>Como atualmente uso uma conexão via cabo, não tenho necessidade de usar o <code class="language-plaintext highlighter-rouge">NetworkManager</code> como
gerenciador de conexão com internet para ficar me dando várias configurações que não uso.</p>

<p>Eu apenas quero me conectar e pronto. Acho ele um pouco desnecessário em consumo de memória pra uma
finalidade muito específica.</p>

<p>Então, eu uso o <code class="language-plaintext highlighter-rouge">systemd-networkd</code> que é mais leve e objetivo.</p>

<p><strong>(1)</strong> - Caso eu já tenho o <code class="language-plaintext highlighter-rouge">NetworkManager</code> instalado, eu apenas desabilito e faço o <code class="language-plaintext highlighter-rouge">mask</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl disable <span class="nt">--now</span> NetworkManager.service<span class="p">;</span>
systemctl mask NetworkManager.service<span class="p">;</span>
</code></pre></div></div>

<p><strong>(2)</strong> - Depois habilito o <code class="language-plaintext highlighter-rouge">systemd-networkd</code> e <code class="language-plaintext highlighter-rouge">systemd-resolved</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl <span class="nb">enable</span> <span class="nt">--now</span> systemd-networkd.service systemd-resolved.service
</code></pre></div></div>

<p><strong>(3)</strong> - Abro o arquivo de configuração do <code class="language-plaintext highlighter-rouge">systemd-networkd</code> e coloco o seguinte:</p>

<figure class="highlight"><pre><code class="language-conf" data-lang="conf"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>[<span class="n">Match</span>]
<span class="n">Name</span>=<span class="n">eno1</span> <span class="c"># Nome da minha interface de rede
</span>
<span class="c">## Conexão com IP Estático
</span>[<span class="n">Network</span>]
<span class="n">Address</span>=<span class="m">192</span>.<span class="m">168</span>.<span class="m">0</span>.<span class="m">2</span>/<span class="m">24</span>
<span class="n">Gateway</span>=<span class="m">192</span>.<span class="m">168</span>.<span class="m">0</span>.<span class="m">1</span>
<span class="n">DNS</span>=<span class="m">8</span>.<span class="m">8</span>.<span class="m">8</span>.<span class="m">8</span>

<span class="c">## Conexão via DHCP
# [Network]
</span><span class="err">#</span> <span class="n">DHCP</span>=<span class="n">yes</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><strong>(4)</strong> - Depois crio um link simbólico para o <code class="language-plaintext highlighter-rouge">DNS</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ln</span> <span class="nt">-sf</span> /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf
</code></pre></div></div>

<h1 id="configurando-o-pacman">Configurando o Pacman</h1>

<p>Aqui habilito o repositório <code class="language-plaintext highlighter-rouge">[multilib]</code> e ignoro alguns pacotes de serem instalados e atualizados.</p>

<blockquote>
  <p>NOTA: Como eu uso kernel <em>LTS</em>, não tenho mania de ficar atualizando kernel sempre, e também
não uso os driver da minha GPU (<strong>NVIDIA</strong>) diretamente do repo do <strong>Arch Linux</strong>. Como o
<strong>Arch Linux</strong> é rolling-release e sempre disponibiliza a “última” versão dos pacotes, tive alguns
problemas com a útilma versão da <strong>NVIDIA</strong> em relação a minha GPU 😠, então instalo o driver (<code class="language-plaintext highlighter-rouge">.run</code>)
baixado do próprio <a href="https://www.nvidia.com/en-us/drivers/unix/">site da NVIDIA</a> com uma versão
anterior, mas especificamente a <em>Latest New Feature Branch Version</em>.</p>
</blockquote>

<p><strong>(1)</strong> - Abro o <strong>/etc/pacman.conf</strong>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim /etc/pacman.conf
</code></pre></div></div>

<p><strong>(2)</strong> - Descomento as seguintes linhas do <code class="language-plaintext highlighter-rouge">[multilib]</code> deixando assim:</p>

<div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[<span class="n">multilib</span>]
<span class="n">Include</span> = /<span class="n">etc</span>/<span class="n">pacman</span>.<span class="n">d</span>/<span class="n">mirrorlist</span>
</code></pre></div></div>

<p><strong>(3)</strong> - Ignoro atualização/instalação de alguns pacotes do repo do <strong>Arch Linux</strong> que não uso,
adicionando o seguintes:</p>

<div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">IgnorePkg</span>  = <span class="n">linux</span>-<span class="n">lts</span> <span class="n">linux</span> <span class="n">linux</span>-<span class="n">zen</span> <span class="n">linux</span>-<span class="n">headers</span> <span class="n">linux</span>-<span class="n">zen</span>-<span class="n">headers</span> <span class="n">linux</span>-<span class="n">lts</span>-<span class="n">headers</span>
<span class="n">nvidia</span>-<span class="n">utils</span> <span class="n">nvidia</span>-<span class="n">settings</span> <span class="n">nvidia</span> <span class="n">lib32</span>-<span class="n">nvidia</span> <span class="n">cuda</span>
</code></pre></div></div>

<p><strong>(4)</strong> - Adiciono meu próprio repo de algumas configurações que fiz para minha máquina 😎:</p>

<figure class="highlight"><pre><code class="language-conf" data-lang="conf"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre>[<span class="n">canin</span>]
<span class="n">SigLevel</span> = <span class="n">Optional</span> <span class="n">TrustAll</span>
<span class="n">Server</span> = <span class="n">https</span>://<span class="n">williamcanin</span>.<span class="n">gitlab</span>.<span class="n">io</span>/<span class="n">archlinux</span>/<span class="n">stable</span>/<span class="n">x86_64</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><strong>(5)</strong> - Atualizo o cache do pacman:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman <span class="nt">-Syy</span>
</code></pre></div></div>

<h1 id="configurando-home">Configurando /home</h1>

<p>O arquivo de configuração para dispositivos criptografados lançados “durante o boot” no
<strong>Arch Linux</strong>, é o <code class="language-plaintext highlighter-rouge">/etc/crypttab.initramfs</code>. Por padrão ele não existe, então eu crio o mesmo
atribuindo o <code class="language-plaintext highlighter-rouge">UUID</code> do dispositivo criptografado LUKS, que no caso é o <code class="language-plaintext highlighter-rouge">/dev/sdb1</code>.</p>

<p><strong>(1)</strong> - Crio o arquivo <code class="language-plaintext highlighter-rouge">/etc/crypttab.initramfs</code> inserindo o <code class="language-plaintext highlighter-rouge">UUID</code> com a ajuda do <code class="language-plaintext highlighter-rouge">blkid</code>:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh"> &gt;&gt; /etc/crypttab.initramfs
# /dev/sdb1
home UUID=</span><span class="si">$(</span>blkid <span class="nt">-s</span> UUID <span class="nt">-o</span> value /dev/sdb1<span class="si">)</span><span class="sh"> none luks,tries=0,timeout=0
EOF</span>
</pre></td></tr></tbody></table></code></pre></figure>

<blockquote>
  <p>ATENÇÃO!!! Não confundir <code class="language-plaintext highlighter-rouge">/dev/sdb1</code> (dispositivo LUKS) com <code class="language-plaintext highlighter-rouge">/dev/mapper/home</code>
(partição com sistema de arquivos).</p>
</blockquote>

<p><strong>(2)</strong> - Agora para a partição <code class="language-plaintext highlighter-rouge">/dev/mapper/home</code> iniciar com o sistema, insiro a mesma no arquivo
<code class="language-plaintext highlighter-rouge">/etc/fstab</code>. Sigo basicamente a mesma ideia do comando de acima, copiando o <code class="language-plaintext highlighter-rouge">UUID</code> com o <code class="language-plaintext highlighter-rouge">blkid</code>
mas dessa vez no <code class="language-plaintext highlighter-rouge">/etc/fstab</code>:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh"> &gt;&gt; /etc/fstab
# /dev/mapper/home
UUID=</span><span class="si">$(</span>blkid <span class="nt">-s</span> UUID <span class="nt">-o</span> value /dev/mapper/home<span class="si">)</span><span class="sh"> /home ext4 rw,relatime,data=ordered 0 2
EOF</span>
</pre></td></tr></tbody></table></code></pre></figure>

<blockquote>
  <p>ATENÇÃO!!! Observe que para inserir a configuração no <code class="language-plaintext highlighter-rouge">/etc/fstab</code>, estou usando <strong>tee -a</strong>, este
parâmetro <strong>-a</strong> significa <strong>append</strong>, adicionar, se emitir ele, irá sobrescrever o <code class="language-plaintext highlighter-rouge">/etc/fstab</code>.</p>
</blockquote>

<h1 id="configurando-o-etcmkinitcpioconf">Configurando o /etc/mkinitcpio.conf</h1>

<p><strong>(1)</strong> - Aqui adiciono os módulos que preciso que carreguem durante o boot:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s|^MODULES=.*|MODULES=(xhci_hcd ehci_hcd uhci_hcd usbhid)|g"</span> /etc/mkinitcpio.conf
</code></pre></div></div>

<p>O driver <code class="language-plaintext highlighter-rouge">usbhid</code> é essencial para reconhecer dispositivos como teclados e mouses que se conectam
via USB. Já o <code class="language-plaintext highlighter-rouge">xhci_hcd</code> e <code class="language-plaintext highlighter-rouge">ehci_hcd</code> são responsáveis por fazer a ponte entre o hardware e os
dispositivos USB.</p>

<blockquote>
  <p>Bug: Como eu tenho a partição <code class="language-plaintext highlighter-rouge">/home</code> criptografada que necessita colocar a senha durante o boot,
eu não acrescento os módulos da minha GPU (NVIDIA) para não dar “<em>flicker</em>” na tela durante o boot,
ocasionando quebra de linha do cursor no passphrase da <code class="language-plaintext highlighter-rouge">/home</code>.</p>
</blockquote>

<p><strong>(2)</strong> - Nos HOOKS adiciono a opção de criptografia e <strong>LVM</strong>. Então faço assim:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s|^HOOKS=.*|HOOKS=(base systemd autodetect keymap modconf kms keyboard sd-vconsole block sd-encrypt lvm2 filesystems fsck)|g"</span> /etc/mkinitcpio.conf
</code></pre></div></div>

<blockquote>
  <p>Nota: Antigamente eu usava o <code class="language-plaintext highlighter-rouge">plymouth</code> depois de <code class="language-plaintext highlighter-rouge">keymap</code> para ter um boot com splash, mas hoje
prefiro o boot verboso para averiguar alguma mensagem de erro, ou demora caso ocorra.</p>
</blockquote>

<p><strong>(3)</strong> - Agora instalo o pacote <code class="language-plaintext highlighter-rouge">lvm2</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman <span class="nt">-S</span> lvm2
</code></pre></div></div>

<h1 id="instalando-o-bootloader">Instalando o bootloader</h1>

<p>Já faz um bom tempo que uso <code class="language-plaintext highlighter-rouge">systemd-boot</code> por achar o <code class="language-plaintext highlighter-rouge">GRUB</code> pesado e com recursos que nem preciso.</p>

<p>Minha máquina é <strong>EFI</strong>, por que eu teria que ter um bootloader pra gerenciar <em>Legacy</em> também?! 🤔</p>

<p><strong>(1)</strong> - Primeiro instalo o <code class="language-plaintext highlighter-rouge">efibootmgr</code> e <code class="language-plaintext highlighter-rouge">intel-ucode</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman <span class="nt">-S</span> <span class="nt">--noconfirm</span> efibootmgr intel-ucode
</code></pre></div></div>

<blockquote>
  <p>Nota: O <code class="language-plaintext highlighter-rouge">efibootmgr</code> é um “gerenciador” de bootloader EFI, e o <code class="language-plaintext highlighter-rouge">intel-ucode</code> é um microcódigo de
segurança para CPU Intel. Na AMD como CPU, instalo o <code class="language-plaintext highlighter-rouge">amd-code</code>.</p>
</blockquote>

<p><strong>(2)</strong> - Depois faço de fato a instalação o <code class="language-plaintext highlighter-rouge">systemd-boot</code> como bootloader:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bootctl <span class="nt">--path</span><span class="o">=</span>/boot <span class="nb">install</span>
</code></pre></div></div>

<div class="details-start" data-summary="Com partição de boot separada"></div>

<script>
(function(){
  if (window.__jekyll_details_setup) return;
  window.__jekyll_details_setup = true;

  function initDetails(){
    const starts = document.querySelectorAll('.details-start');
    starts.forEach(start => {
      const summary = start.getAttribute('data-summary') || 'Detalhes';

      let end = start.nextSibling;
      while(end && !(end.nodeType === 1 && end.classList.contains('details-end'))){
        end = end.nextSibling;
      }
      if(!end) return;

      let node = start.nextSibling;
      const content = [];
      while(node && node !== end){
        const next = node.nextSibling;
        if(node.nodeType === Node.ELEMENT_NODE || (node.nodeType === Node.TEXT_NODE && node.textContent.trim())){
          content.push(node.cloneNode(true));
        }
        node = next;
      }

      const details = document.createElement('details');
      const sum = document.createElement('summary');
      sum.textContent = summary;
      details.appendChild(sum);

      const wrapper = document.createElement('div');
      wrapper.className = 'details-content-wrapper';

      content.forEach(el => wrapper.appendChild(el));

      details.appendChild(wrapper);

      start.parentNode.insertBefore(details, start);
      let cur = start;
      while(cur){
        const next = cur.nextSibling;
        cur.remove();
        if(cur === end) break;
        cur = next;
      }
    });
  }

  if(document.readyState === 'loading')
    document.addEventListener('DOMContentLoaded', initDetails);
  else
    initDetails();
})();
</script>

<p>Se eu instalei o sistema com a partição de boot separada, então minha instalação do bootloader
fica assim:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bootctl <span class="nt">--path</span><span class="o">=</span>/boot/efi <span class="nb">install</span>
</code></pre></div></div>
<!-- enddetails -->
<div class="details-end"></div>

<p><strong>(3)</strong> - Crio o loader do <code class="language-plaintext highlighter-rouge">systemd-boot</code>:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="nv">ESP_DIR</span><span class="o">=</span><span class="s2">""</span><span class="p">;</span>
<span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh"> &gt; /boot/</span><span class="k">${</span><span class="nv">ESP_DIR</span><span class="k">}</span><span class="sh">loader/loader.conf
default arch-linux-lts.efi
timeout 3
console-mode max
editor no
EOF</span>
</pre></td></tr></tbody></table></code></pre></figure>

<blockquote>
  <p>IMPORTANTE: Está variável de ambiente <code class="language-plaintext highlighter-rouge">ESP_DIR</code> é temporária, é apenas para o momento de instalação.
Se instalou o sistema com a partição de boot separada, um em <code class="language-plaintext highlighter-rouge">/boot</code> e outra <code class="language-plaintext highlighter-rouge">/boot/efi</code>, então a
variável <code class="language-plaintext highlighter-rouge">ESP_DIR</code> DEVE ser assim: <code class="language-plaintext highlighter-rouge">ESP_DIR="efi/"</code>. Caso contrário deixe vazio.</p>
</blockquote>

<blockquote>
  <p>Nota: Na opção <code class="language-plaintext highlighter-rouge">default</code>, se usar UKI, colocar o nome do UKI completo, por exemplo:
<code class="language-plaintext highlighter-rouge">arch-linux-lts.efi</code>. Se usar modo tradicional, usar o nome do arquivo presente no diretório
<code class="language-plaintext highlighter-rouge">entries</code> , por exemplo: <code class="language-plaintext highlighter-rouge">arch.conf</code>.</p>
</blockquote>

<h2 id="usando-uki-unified-kernel-image">Usando UKI (Unified Kernel Image)</h2>

<p>Atualmente estou usando <code class="language-plaintext highlighter-rouge">systemd-boot</code> + <code class="language-plaintext highlighter-rouge">UKI</code> (Unified Kernel Image), e esses são os passos que
faço para instalar.</p>

<p><strong>(1)</strong> - Crio um backup do “<em>preset</em>” primeiro:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /etc/mkinitcpio.d/linux-lts.preset /etc/mkinitcpio.d/linux-lts.preset.backup
</code></pre></div></div>

<p><strong>(2)</strong> - Depois crio um novo <code class="language-plaintext highlighter-rouge">/etc/mkinitcpio.d/linux-lts.preset</code> com as configurações abaixo:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh"> &gt; /etc/mkinitcpio.d/linux-lts.preset
ESP_DIR="</span><span class="k">${</span><span class="nv">ESP_DIR</span><span class="k">}</span><span class="sh">"

ALL_config="/etc/mkinitcpio.conf"
ALL_kver="/boot/</span><span class="se">\$</span><span class="sh">{ESP_DIR}vmlinuz-linux-lts"
ALL_cmdline="root=UUID=</span><span class="si">$(</span>blkid <span class="nt">-s</span> UUID <span class="nt">-o</span> value /dev/mapper/linux-arch<span class="si">)</span><span class="sh"> rw loglevel=3 nvidia_drm.modeset=1 video=1920x1080@75"
PRESETS=('default' 'fallback')

default_config="/etc/mkinitcpio.conf"
default_image="/boot/</span><span class="se">\$</span><span class="sh">{ESP_DIR}initramfs-linux-lts.img"
default_uki="/boot/</span><span class="se">\$</span><span class="sh">{ESP_DIR}EFI/Linux/arch-linux-lts.efi"
default_options="--splash /usr/share/systemd/bootctl/splash-arch.bmp"

fallback_config="/etc/mkinitcpio.conf"
fallback_image="/boot/</span><span class="se">\$</span><span class="sh">{ESP_DIR}initramfs-linux-lts-fallback.img"
fallback_uki="/boot/</span><span class="se">\$</span><span class="sh">{ESP_DIR}EFI/Linux/arch-linux-lts-fallback.efi"
fallback_options="-S autodetect"
EOF</span>
</pre></td></tr></tbody></table></code></pre></figure>

<blockquote>
  <p>Dica: Caso eu queira um boot menos verboso e com splash, eu adiciono na opção <code class="language-plaintext highlighter-rouge">ALL_cmdline</code> os
parâmentros: <code class="language-plaintext highlighter-rouge">quiet splash loglevel=3 systemd.show_status=auto rd.udev.log_level=3</code>. E depois
instalo o pacote <code class="language-plaintext highlighter-rouge">plymouth</code>, e adiciono a flag <code class="language-plaintext highlighter-rouge">plymouth</code> nos HOOKS do <code class="language-plaintext highlighter-rouge">/etc/mkinitcpio.conf</code> depois
de <code class="language-plaintext highlighter-rouge">keymap</code>.</p>
</blockquote>

<!--
**(3)** - Agora crio as entradas do `systemd-boot` padrão:

```shell
cat << EOF > /boot/${ESP_DIR}loader/entries/arch.conf
title   Arch Linux LTS
efi     /EFI/Linux/arch-linux-lts.efi
EOF
```

**(4)** - E por final, crio as entradas do `systemd-boot` de fallback:

```shell
cat << EOF > /boot/${ESP_DIR}loader/entries/arch-fallback.conf
title   Arch Linux LTS (Fallback)
efi     /EFI/Linux/arch-linux-lts-fallback.efi
EOF
``` -->

<p><strong>(3)</strong> - Reinstalo o kernel:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman <span class="nt">-S</span> <span class="nt">--noconfirm</span> linux-lts
</code></pre></div></div>

<div class="details-start" data-summary="Usando modo tradicional (Opcional)"></div>

<script>
(function(){
  if (window.__jekyll_details_setup) return;
  window.__jekyll_details_setup = true;

  function initDetails(){
    const starts = document.querySelectorAll('.details-start');
    starts.forEach(start => {
      const summary = start.getAttribute('data-summary') || 'Detalhes';

      let end = start.nextSibling;
      while(end && !(end.nodeType === 1 && end.classList.contains('details-end'))){
        end = end.nextSibling;
      }
      if(!end) return;

      let node = start.nextSibling;
      const content = [];
      while(node && node !== end){
        const next = node.nextSibling;
        if(node.nodeType === Node.ELEMENT_NODE || (node.nodeType === Node.TEXT_NODE && node.textContent.trim())){
          content.push(node.cloneNode(true));
        }
        node = next;
      }

      const details = document.createElement('details');
      const sum = document.createElement('summary');
      sum.textContent = summary;
      details.appendChild(sum);

      const wrapper = document.createElement('div');
      wrapper.className = 'details-content-wrapper';

      content.forEach(el => wrapper.appendChild(el));

      details.appendChild(wrapper);

      start.parentNode.insertBefore(details, start);
      let cur = start;
      while(cur){
        const next = cur.nextSibling;
        cur.remove();
        if(cur === end) break;
        cur = next;
      }
    });
  }

  if(document.readyState === 'loading')
    document.addEventListener('DOMContentLoaded', initDetails);
  else
    initDetails();
})();
</script>

<p>Aqui a configuração do <strong>systemd-boot</strong> muda, em vez de usar UKI, uso os arquivos
<strong>vmlinuz-linux-lts</strong>, <strong>initramfs-linux-lts.img</strong> e <strong>intel-ucode.img</strong> para iniciar o boot.</p>

<p><strong>(1)</strong> - Primeiro removo qualquer imagem <code class="language-plaintext highlighter-rouge">.efi</code> gerada:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> <span class="nt">-f</span> /boot/<span class="k">${</span><span class="nv">ESP_DIR</span><span class="k">}</span>EFI/Linux/arch-linux-lts<span class="k">*</span>.efi
</code></pre></div></div>

<p><strong>(2)</strong> - Depois eu crio a entrada padrão assim:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh"> &gt; /boot/</span><span class="k">${</span><span class="nv">ESP_DIR</span><span class="k">}</span><span class="sh">loader/entries/arch.conf
title Arch Linux (Default)
linux /vmlinuz-linux-lts
initrd  /intel-ucode.img
initrd /initramfs-linux-lts.img
options root=UUID=</span><span class="si">$(</span>blkid <span class="nt">-s</span> UUID <span class="nt">-o</span> value /dev/mapper/linux-arch<span class="si">)</span><span class="sh"> rw nvidia_drm.modeset=1 video=1920x1080@75
EOF</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><strong>(2)</strong> - E a entrada de fallback assim:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh"> &gt; /boot/</span><span class="k">${</span><span class="nv">ESP_DIR</span><span class="k">}</span><span class="sh">loader/entries/arch-fallback.conf
title Arch Linux (Fallback)
linux /vmlinuz-linux-lts-fallback
initrd  /intel-ucode.img
initrd /initramfs-linux-ltsfallback.img
options root=UUID=</span><span class="si">$(</span>blkid <span class="nt">-s</span> UUID <span class="nt">-o</span> value /dev/mapper/linux-arch<span class="si">)</span><span class="sh"> rw nvidia_drm.modeset=1 video=1920x1080@75
</span><span class="no">EOF
</span></code></pre></div></div>

<blockquote>
  <p>Nota: Nas entradas de boot, em <code class="language-plaintext highlighter-rouge">options</code>, vale a mesma configuração do <code class="language-plaintext highlighter-rouge">ALL_cmdline</code> do <strong>UKI</strong>.</p>
</blockquote>

<!-- enddetails -->
<div class="details-end"></div>

<div class="details-start" data-summary="Adicionando EFI do Windows (Opcional)"></div>

<script>
(function(){
  if (window.__jekyll_details_setup) return;
  window.__jekyll_details_setup = true;

  function initDetails(){
    const starts = document.querySelectorAll('.details-start');
    starts.forEach(start => {
      const summary = start.getAttribute('data-summary') || 'Detalhes';

      let end = start.nextSibling;
      while(end && !(end.nodeType === 1 && end.classList.contains('details-end'))){
        end = end.nextSibling;
      }
      if(!end) return;

      let node = start.nextSibling;
      const content = [];
      while(node && node !== end){
        const next = node.nextSibling;
        if(node.nodeType === Node.ELEMENT_NODE || (node.nodeType === Node.TEXT_NODE && node.textContent.trim())){
          content.push(node.cloneNode(true));
        }
        node = next;
      }

      const details = document.createElement('details');
      const sum = document.createElement('summary');
      sum.textContent = summary;
      details.appendChild(sum);

      const wrapper = document.createElement('div');
      wrapper.className = 'details-content-wrapper';

      content.forEach(el => wrapper.appendChild(el));

      details.appendChild(wrapper);

      start.parentNode.insertBefore(details, start);
      let cur = start;
      while(cur){
        const next = cur.nextSibling;
        cur.remove();
        if(cur === end) break;
        cur = next;
      }
    });
  }

  if(document.readyState === 'loading')
    document.addEventListener('DOMContentLoaded', initDetails);
  else
    initDetails();
})();
</script>

<p>Quando quero fazer um dual-boot com <strong>Windows</strong> ou até mesmo usar o Windows instalado em outra
SSD/HDD, e adicionar o mesmo no <strong>systemd-boot</strong>, eu faço os passos abaixo:</p>

<p><strong>(1)</strong> - Acho a partição de bootloader do Windows, por exemplo, <strong>sdc1</strong> e monto a mesma:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount <span class="nt">--mkdir</span> /dev/sdc1 /mnt/winboot
</code></pre></div></div>

<p><strong>(2)</strong> - Depois eu copio a pasta <strong>Microsoft</strong> para meu <code class="language-plaintext highlighter-rouge">/boot/EFI</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> <span class="nt">-r</span> /mnt/winboot/EFI/Microsoft /boot/<span class="k">${</span><span class="nv">ESP_DIR</span><span class="k">}</span>EFI
</code></pre></div></div>

<p><strong>(3)</strong> - Crio o arquivo de entrada para o <strong>Windows</strong>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh"> &gt; /boot/</span><span class="k">${</span><span class="nv">ESP_DIR</span><span class="k">}</span><span class="sh">loader/entries/windows.conf
title   Windows 11
efi     /EFI/Microsoft/Boot/bootmgfw.efi
</span><span class="no">EOF
</span></code></pre></div></div>

<!-- enddetails -->
<div class="details-end"></div>

<div class="details-start" data-summary="Reinstalando o bootloader (Manutenção)"></div>

<script>
(function(){
  if (window.__jekyll_details_setup) return;
  window.__jekyll_details_setup = true;

  function initDetails(){
    const starts = document.querySelectorAll('.details-start');
    starts.forEach(start => {
      const summary = start.getAttribute('data-summary') || 'Detalhes';

      let end = start.nextSibling;
      while(end && !(end.nodeType === 1 && end.classList.contains('details-end'))){
        end = end.nextSibling;
      }
      if(!end) return;

      let node = start.nextSibling;
      const content = [];
      while(node && node !== end){
        const next = node.nextSibling;
        if(node.nodeType === Node.ELEMENT_NODE || (node.nodeType === Node.TEXT_NODE && node.textContent.trim())){
          content.push(node.cloneNode(true));
        }
        node = next;
      }

      const details = document.createElement('details');
      const sum = document.createElement('summary');
      sum.textContent = summary;
      details.appendChild(sum);

      const wrapper = document.createElement('div');
      wrapper.className = 'details-content-wrapper';

      content.forEach(el => wrapper.appendChild(el));

      details.appendChild(wrapper);

      start.parentNode.insertBefore(details, start);
      let cur = start;
      while(cur){
        const next = cur.nextSibling;
        cur.remove();
        if(cur === end) break;
        cur = next;
      }
    });
  }

  if(document.readyState === 'loading')
    document.addEventListener('DOMContentLoaded', initDetails);
  else
    initDetails();
})();
</script>

<p>Caso eu precise reinstalar o <strong>systemd-boot</strong> após um update ou reinstalação de outro
sistema operacional, sigo as etapas abaixo após entrar na ISO do <strong>Arch Linux</strong>:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>mount /dev/mapper/linux-arch /mnt<span class="p">;</span>
mount <span class="nt">--mkdir</span> /dev/sda1 /mnt/boot<span class="p">;</span>
mount <span class="nt">--mkdir</span> /dev/mapper/home /mnt/home<span class="p">;</span>
<span class="k">for </span><span class="nb">dir </span><span class="k">in </span>proc sys dev run<span class="p">;</span> <span class="k">do </span>mount <span class="nt">--rbind</span> /<span class="nv">$dir</span> /mnt/<span class="nv">$dir</span><span class="p">;</span> <span class="k">done</span><span class="p">;</span>
arch-chroot /mnt<span class="p">;</span>
pacman <span class="nt">-S</span> <span class="nt">--noconfirm</span> linux-lts linux-lts-headers<span class="p">;</span>
mkinitcpio <span class="nt">-P</span><span class="p">;</span>
bootctl <span class="nt">--path</span><span class="o">=</span>/boot <span class="nb">install</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<blockquote>
  <p>Nota 1: Então Repito os passos de: <strong>Instalando o bootloader</strong>.
Nota 2: Lembrando que, se usar <code class="language-plaintext highlighter-rouge">/boot</code> e <code class="language-plaintext highlighter-rouge">/boot/efi</code>, montar ambos e usar o <code class="language-plaintext highlighter-rouge">bootctl</code> em <code class="language-plaintext highlighter-rouge">/boot/efi</code>.</p>
</blockquote>

<!-- enddetails -->
<div class="details-end"></div>

<h1 id="instalação-de-drivers-gráficos">Instalação de drivers gráficos</h1>

<p>Agora vou de fato para o ambiente gráfico. Então começo a instalar alguns drivers essenciais e
API, como <strong>Vulkan</strong>, <strong>OpenGL</strong>, etc:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman <span class="nt">-S</span> <span class="nt">--needed</span> <span class="nt">--noconfirm</span> xorg wayland dialog mesa lib32-mesa xf86-video-vesa vulkan-icd-loader <span class="se">\</span>
lib32-vulkan-icd-loader vulkan-tools
</code></pre></div></div>

<p><strong>Intel:</strong></p>

<p>Como uso <a href="https://www.intel.com.br/content/www/br/pt/products/details/processors/core.html">Intel</a>,
então também instalo esses drivers para GPU integrada:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman <span class="nt">-S</span> <span class="nt">--needed</span> <span class="nt">--noconfirm</span> mesa-vulkan-intel vulkan-intel linux-firmware-intel
</code></pre></div></div>

<div class="details-start" data-summary="AMD"></div>

<script>
(function(){
  if (window.__jekyll_details_setup) return;
  window.__jekyll_details_setup = true;

  function initDetails(){
    const starts = document.querySelectorAll('.details-start');
    starts.forEach(start => {
      const summary = start.getAttribute('data-summary') || 'Detalhes';

      let end = start.nextSibling;
      while(end && !(end.nodeType === 1 && end.classList.contains('details-end'))){
        end = end.nextSibling;
      }
      if(!end) return;

      let node = start.nextSibling;
      const content = [];
      while(node && node !== end){
        const next = node.nextSibling;
        if(node.nodeType === Node.ELEMENT_NODE || (node.nodeType === Node.TEXT_NODE && node.textContent.trim())){
          content.push(node.cloneNode(true));
        }
        node = next;
      }

      const details = document.createElement('details');
      const sum = document.createElement('summary');
      sum.textContent = summary;
      details.appendChild(sum);

      const wrapper = document.createElement('div');
      wrapper.className = 'details-content-wrapper';

      content.forEach(el => wrapper.appendChild(el));

      details.appendChild(wrapper);

      start.parentNode.insertBefore(details, start);
      let cur = start;
      while(cur){
        const next = cur.nextSibling;
        cur.remove();
        if(cur === end) break;
        cur = next;
      }
    });
  }

  if(document.readyState === 'loading')
    document.addEventListener('DOMContentLoaded', initDetails);
  else
    initDetails();
})();
</script>

<p>Não estou usando <strong>AMD</strong> no momento, mas vou deixar os drivers necessários caso eu use futuramente:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman <span class="nt">-S</span> <span class="nt">--needed</span> <span class="nt">--noconfirm</span> mesa-vulkan-radeon vulkan-radeon linux-firmware-radeon
</code></pre></div></div>
<!-- enddetails -->
<div class="details-end"></div>

<p><strong>NVIDIA (Nouveau)</strong></p>

<p>Sempe bom ter os drivers da NVIDIA open-source caso a NVIDIA faça alguma “nhaca” de incompatibilidade:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman <span class="nt">-S</span> <span class="nt">--noconfirm</span>  xf86-video-nouveau vulkan-nouveau
</code></pre></div></div>

<div class="details-start" data-summary="NVIDIA (proprietary) 🙄"></div>

<script>
(function(){
  if (window.__jekyll_details_setup) return;
  window.__jekyll_details_setup = true;

  function initDetails(){
    const starts = document.querySelectorAll('.details-start');
    starts.forEach(start => {
      const summary = start.getAttribute('data-summary') || 'Detalhes';

      let end = start.nextSibling;
      while(end && !(end.nodeType === 1 && end.classList.contains('details-end'))){
        end = end.nextSibling;
      }
      if(!end) return;

      let node = start.nextSibling;
      const content = [];
      while(node && node !== end){
        const next = node.nextSibling;
        if(node.nodeType === Node.ELEMENT_NODE || (node.nodeType === Node.TEXT_NODE && node.textContent.trim())){
          content.push(node.cloneNode(true));
        }
        node = next;
      }

      const details = document.createElement('details');
      const sum = document.createElement('summary');
      sum.textContent = summary;
      details.appendChild(sum);

      const wrapper = document.createElement('div');
      wrapper.className = 'details-content-wrapper';

      content.forEach(el => wrapper.appendChild(el));

      details.appendChild(wrapper);

      start.parentNode.insertBefore(details, start);
      let cur = start;
      while(cur){
        const next = cur.nextSibling;
        cur.remove();
        if(cur === end) break;
        cur = next;
      }
    });
  }

  if(document.readyState === 'loading')
    document.addEventListener('DOMContentLoaded', initDetails);
  else
    initDetails();
})();
</script>

<p>Como já relatei acima, não uso o driver proprietário da <strong>NVIDIA</strong> do repo do <strong>Arch Linux</strong> por
algumas incompatibilidades que tive na última versão 😡, mas mesmo assim vou deixar os pacotes
essenciais que se deve instalar:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman <span class="nt">-S</span> <span class="nt">--needed</span> <span class="nt">--noconfirm</span> nvidia nvidia-utils lib32-nvidia-utils nvidia-settings opencl-nvidia<span class="p">;</span>
systemctl set-default multi-user.target
</code></pre></div></div>
<!-- enddetails -->
<div class="details-end"></div>

<h1 id="instalação-de-fontes">Instalação de fontes</h1>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman <span class="nt">-S</span> <span class="nt">--needed</span> <span class="nt">--noconfirm</span> noto-fonts noto-fonts-emoji noto-fonts-cjk ttf-liberation <span class="se">\</span>
otf-font-awesome ttf-jetbrains-mono ttf-jetbrains-mono-nerd ttf-dejavu-nerd
</code></pre></div></div>

<h1 id="instalação-de-drivers-de-áudio-e-mixer">Instalação de drivers de áudio e mixer</h1>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman <span class="nt">-S</span> <span class="nt">--needed</span> <span class="nt">--noconfirm</span> pipewire wireplumer pipewire-audio pipewire-pulse pipewire-alsa <span class="se">\</span>
pipewire-jack lib32-pipewire lsp-plugins-lv2 mda.lv2 zam-plugins-lv2 zam-plugins-lv2 pavucontrol
</code></pre></div></div>

<h1 id="ambiente-de-trabalho-i3">Ambiente de trabalho (i3)</h1>

<p>Atualmente uso <strong>i3</strong> + <strong>Polybar</strong>, e esses são os pacotes que uso para um ambiente agradável:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman <span class="nt">-S</span> <span class="nt">--needed</span> <span class="nt">--noconfirm</span> i3 i3lock i3status polybar pcmanfm picom rofi nitrogen gtk-chtheme <span class="se">\</span>
btop jq conky gsimplecal numlockx qt5ct qt6ct scrot dunst yazi xautolock imagemagick ranger lynx
</code></pre></div></div>

<div class="details-start" data-summary="Ambiente de trabalho (XFCE)"></div>

<script>
(function(){
  if (window.__jekyll_details_setup) return;
  window.__jekyll_details_setup = true;

  function initDetails(){
    const starts = document.querySelectorAll('.details-start');
    starts.forEach(start => {
      const summary = start.getAttribute('data-summary') || 'Detalhes';

      let end = start.nextSibling;
      while(end && !(end.nodeType === 1 && end.classList.contains('details-end'))){
        end = end.nextSibling;
      }
      if(!end) return;

      let node = start.nextSibling;
      const content = [];
      while(node && node !== end){
        const next = node.nextSibling;
        if(node.nodeType === Node.ELEMENT_NODE || (node.nodeType === Node.TEXT_NODE && node.textContent.trim())){
          content.push(node.cloneNode(true));
        }
        node = next;
      }

      const details = document.createElement('details');
      const sum = document.createElement('summary');
      sum.textContent = summary;
      details.appendChild(sum);

      const wrapper = document.createElement('div');
      wrapper.className = 'details-content-wrapper';

      content.forEach(el => wrapper.appendChild(el));

      details.appendChild(wrapper);

      start.parentNode.insertBefore(details, start);
      let cur = start;
      while(cur){
        const next = cur.nextSibling;
        cur.remove();
        if(cur === end) break;
        cur = next;
      }
    });
  }

  if(document.readyState === 'loading')
    document.addEventListener('DOMContentLoaded', initDetails);
  else
    initDetails();
})();
</script>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman <span class="nt">-S</span> <span class="nt">--needed</span> <span class="nt">--noconfirm</span> xfce4 xfce4-goodies appmenu-gtk-module libdbusmenu-glib lightdm <span class="se">\</span>
lightdm-gtk-greeter
</code></pre></div></div>

<!-- enddetails -->
<div class="details-end"></div>

<div class="details-start" data-summary="Instalação do ambiente de trabalho (GNOME)"></div>

<script>
(function(){
  if (window.__jekyll_details_setup) return;
  window.__jekyll_details_setup = true;

  function initDetails(){
    const starts = document.querySelectorAll('.details-start');
    starts.forEach(start => {
      const summary = start.getAttribute('data-summary') || 'Detalhes';

      let end = start.nextSibling;
      while(end && !(end.nodeType === 1 && end.classList.contains('details-end'))){
        end = end.nextSibling;
      }
      if(!end) return;

      let node = start.nextSibling;
      const content = [];
      while(node && node !== end){
        const next = node.nextSibling;
        if(node.nodeType === Node.ELEMENT_NODE || (node.nodeType === Node.TEXT_NODE && node.textContent.trim())){
          content.push(node.cloneNode(true));
        }
        node = next;
      }

      const details = document.createElement('details');
      const sum = document.createElement('summary');
      sum.textContent = summary;
      details.appendChild(sum);

      const wrapper = document.createElement('div');
      wrapper.className = 'details-content-wrapper';

      content.forEach(el => wrapper.appendChild(el));

      details.appendChild(wrapper);

      start.parentNode.insertBefore(details, start);
      let cur = start;
      while(cur){
        const next = cur.nextSibling;
        cur.remove();
        if(cur === end) break;
        cur = next;
      }
    });
  }

  if(document.readyState === 'loading')
    document.addEventListener('DOMContentLoaded', initDetails);
  else
    initDetails();
})();
</script>

<p>Minha relação com <strong>GNOME</strong> é entre amor e ódio. Instalo mas deixo com um ambiente de fallback:</p>

<p><strong>Mínimo:</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman <span class="nt">-S</span> <span class="nt">--needed</span> <span class="nt">--noconfirm</span> gnome-shell gnome-control-center gnome-terminal nautilus gdm <span class="se">\</span>
gnome-browser-connector gnome-shell-extensions gnome-tweaks
</code></pre></div></div>

<p><strong>Completo:</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman <span class="nt">-S</span> <span class="nt">--needed</span> <span class="nt">--noconfirm</span> gnome gnome-extra gnome-desktop gnome-shell-extensions <span class="se">\</span>
gnome-browser-connector gnome-tweaks gdm
</code></pre></div></div>
<!-- enddetails -->
<div class="details-end"></div>

<h1 id="instalação-de-aplicações">Instalação de aplicações</h1>

<p>Algumas aplicações básicas que uso:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman <span class="nt">-S</span> <span class="nt">--needed</span> <span class="nt">--noconfirm</span> pacman-contrib util-linux dkms xdg-user-dirs ntfs-3g udisks2 <span class="se">\</span>
dosfstools mtools cpupower reflector samba git openssh tor virtualbox-guest-utils vlc <span class="se">\</span>
transmission-gtk gvfs gvfs-smb ttf-dejavu ttf-dejavu-nerd terminator veracrypt zip unzip xarchiver <span class="se">\</span>
gimp inkscape make gcc go ruby perl tk python nodejs npm arch-wiki-docs arch-wiki-lite zeal <span class="se">\</span>
qemu-full virt-manager piper steam-native-runtime firefox libreoffice-fresh libreoffice-fresh-pt-br <span class="se">\</span>
terminator galculator leafpad calf smplayer gparted rofimoji easyeffects gnome-keyring seahorse mpv
</code></pre></div></div>

<h1 id="habilitando-serviços">Habilitando serviços</h1>

<p>Neste momento habilito alguns serviços para iniciar durante o boot:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl <span class="nb">enable </span>iptables.service smb.service nmb.service tor.service
</code></pre></div></div>

<h1 id="complementando-o-etcfstab">Complementando o /etc/fstab</h1>

<p>Meu computador não tem leitor de disquete e CD/DVD (e quem tem?), mas mesmo asim eu mantenho a
configuração no <code class="language-plaintext highlighter-rouge">/etc/fstab</code>, e também já deixo comentado para uma partição <strong>Windows</strong>, caso eu
tenha um dia. Para essas configurações, eu faço os comandos:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="nb">mkdir</span> <span class="nt">-p</span> /media/cdrom0<span class="p">;</span> <span class="nb">mkdir</span> /mnt/floppy<span class="p">;</span> <span class="nb">mkdir</span> /mnt/windows<span class="p">;</span>
<span class="nb">ln</span> <span class="nt">-s</span> /media/cdrom0 /media/cdrom<span class="p">;</span>
<span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh"> &gt;&gt; /etc/fstab
### CDROM
/dev/sr0  /media/cdrom0  udf,iso9660 user,noauto  0 0

### Floppy
/dev/fd0  /mnt/floppy  auto  defaults,user,noauto  0 0

### Windows (optional)
#UUID=XXXXX-XXXXX-XXXXX /mnt/windows  ntfs-3g defaults,user,rw,auto  0 0
EOF</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h1 id="zram">ZRAM</h1>

<p>Geralmente não forço tanto meu computador a ponto de usar <strong>zram</strong>, mas mesmo assim eu configuro:</p>

<p><strong>1</strong> - Instalando o gerenciador de zram:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman <span class="nt">-S</span> <span class="nt">--needed</span> <span class="nt">--noconfirm</span> zram-generator
</code></pre></div></div>

<p><strong>2</strong> - Configurando um perfil equilibrado para <strong>zram</strong>:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="sh">"</span><span class="no">EOF</span><span class="sh">" &gt; /etc/systemd/zram-generator.conf
[zram0]
zram-size = ram / 4
compression-algorithm = zstd
swap-priority = 50
fs-type = swap
EOF</span>
</pre></td></tr></tbody></table></code></pre></figure>

<blockquote>
  <p>Nota: Caso eu queira um perfil mais agressivo, para jogar por exemplo, que necessite de <strong>zram</strong>,
então eu uso este perfil abaixo:</p>
</blockquote>

<div class="details-start" data-summary="ZRAM: Perfil Agressivo"></div>

<script>
(function(){
  if (window.__jekyll_details_setup) return;
  window.__jekyll_details_setup = true;

  function initDetails(){
    const starts = document.querySelectorAll('.details-start');
    starts.forEach(start => {
      const summary = start.getAttribute('data-summary') || 'Detalhes';

      let end = start.nextSibling;
      while(end && !(end.nodeType === 1 && end.classList.contains('details-end'))){
        end = end.nextSibling;
      }
      if(!end) return;

      let node = start.nextSibling;
      const content = [];
      while(node && node !== end){
        const next = node.nextSibling;
        if(node.nodeType === Node.ELEMENT_NODE || (node.nodeType === Node.TEXT_NODE && node.textContent.trim())){
          content.push(node.cloneNode(true));
        }
        node = next;
      }

      const details = document.createElement('details');
      const sum = document.createElement('summary');
      sum.textContent = summary;
      details.appendChild(sum);

      const wrapper = document.createElement('div');
      wrapper.className = 'details-content-wrapper';

      content.forEach(el => wrapper.appendChild(el));

      details.appendChild(wrapper);

      start.parentNode.insertBefore(details, start);
      let cur = start;
      while(cur){
        const next = cur.nextSibling;
        cur.remove();
        if(cur === end) break;
        cur = next;
      }
    });
  }

  if(document.readyState === 'loading')
    document.addEventListener('DOMContentLoaded', initDetails);
  else
    initDetails();
})();
</script>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="sh">"</span><span class="no">EOF</span><span class="sh">" &gt; /etc/systemd/zram-generator.conf
[zram0]
zram-size = ram * 3/4
compression-algorithm = lz4
swap-priority = 100
fs-type = swap
EOF</span>
</pre></td></tr></tbody></table></code></pre></figure>

<!-- enddetails -->
<div class="details-end"></div>

<p><strong>3</strong> - Depois de configurar, eu faço um <em>reset</em> no daemon e habilito o serviço de <strong>ZRAM</strong>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl daemon-reload<span class="p">;</span>
systemctl <span class="nb">enable</span> <span class="nt">--now</span> systemd-zram-setup@zram0.service
</code></pre></div></div>

<div class="details-start" data-summary="Swap (opcional)"></div>

<script>
(function(){
  if (window.__jekyll_details_setup) return;
  window.__jekyll_details_setup = true;

  function initDetails(){
    const starts = document.querySelectorAll('.details-start');
    starts.forEach(start => {
      const summary = start.getAttribute('data-summary') || 'Detalhes';

      let end = start.nextSibling;
      while(end && !(end.nodeType === 1 && end.classList.contains('details-end'))){
        end = end.nextSibling;
      }
      if(!end) return;

      let node = start.nextSibling;
      const content = [];
      while(node && node !== end){
        const next = node.nextSibling;
        if(node.nodeType === Node.ELEMENT_NODE || (node.nodeType === Node.TEXT_NODE && node.textContent.trim())){
          content.push(node.cloneNode(true));
        }
        node = next;
      }

      const details = document.createElement('details');
      const sum = document.createElement('summary');
      sum.textContent = summary;
      details.appendChild(sum);

      const wrapper = document.createElement('div');
      wrapper.className = 'details-content-wrapper';

      content.forEach(el => wrapper.appendChild(el));

      details.appendChild(wrapper);

      start.parentNode.insertBefore(details, start);
      let cur = start;
      while(cur){
        const next = cur.nextSibling;
        cur.remove();
        if(cur === end) break;
        cur = next;
      }
    });
  }

  if(document.readyState === 'loading')
    document.addEventListener('DOMContentLoaded', initDetails);
  else
    initDetails();
})();
</script>

<p>Caso eu prefiro usar <strong>Swap</strong> em arquivo em vez de <strong>zram</strong>, esses são os passos:</p>

<p><strong>(1)</strong> - Criando arquivo para swap:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fallocate <span class="nt">-l</span> 8G /swapfile
<span class="c"># ou: dd if=/dev/zero of=/swapfile bs=1M count=4096 status=progress</span>
</code></pre></div></div>

<p><strong>(2)</strong> - Dando permissões:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod </span>600 /swapfile
<span class="nb">chown </span>root:root /swapfile
</code></pre></div></div>

<p><strong>(3)</strong> - Ativando:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkswap /swapfile
swapon /swapfile
</code></pre></div></div>

<p><strong>(4)</strong> - Ativando swap no boot:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh"> &gt;&gt; /etc/fstab
### Swap
/swapfile none swap defaults 0 0
</span><span class="no">EOF
</span></code></pre></div></div>

<p><strong>(5)</strong> - Configurando <em>swappiness</em>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'vm.swappiness=10'</span> | <span class="nb">tee</span> <span class="nt">-a</span> /etc/sysctl.d/99-swap.conf
</code></pre></div></div>

<blockquote>
  <p>Nota: O swappiness recomendado é: 10 para SSD, 60 para HDD.</p>
</blockquote>

<!-- enddetails -->
<div class="details-end"></div>

<h1 id="adicionando-um-usuário">Adicionando um usuário</h1>

<p><strong>1</strong> - Antes, vou liberar o grupo <code class="language-plaintext highlighter-rouge">sudo</code> no arquivo <code class="language-plaintext highlighter-rouge">/etc/sudoers</code> para meu usuário pertencer a
esse grupo e eu ter privilégios de <em>sudo</em>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s|# %sudo ALL=(ALL:ALL) ALL|%sudo ALL=(ALL:ALL) ALL|g"</span> /etc/sudoers
</code></pre></div></div>

<p><strong>2</strong> - Agora começo a criação do grupo do meu usuário e a criação do meu usuário em si:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="nv">USERNAME_TEMP</span><span class="o">=</span><span class="s2">"will"</span><span class="p">;</span>
groupadd <span class="nv">$USERNAME_TEMP</span><span class="p">;</span>
useradd <span class="nt">-m</span> <span class="nt">-g</span> <span class="nv">$USERNAME_TEMP</span> <span class="nt">-G</span> <span class="nb">users</span>,tty,wheel,games,power,optical,storage,scanner,lp,audio,video,input,mail,root <span class="nt">-s</span> /bin/zsh <span class="nv">$USERNAME_TEMP</span><span class="p">;</span>
groupadd <span class="nb">sudo</span> <span class="nt">-U</span> <span class="nv">$USERNAME_TEMP</span><span class="p">;</span>
passwd <span class="nv">$USERNAME_TEMP</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h1 id="idioma-e-região">Idioma e região</h1>

<p>Esses comandos são necessário para configurar o teclado e idioma do sistema, onde cada linha é um
comando:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>timedatectl set-timezone America/Sao_Paulo<span class="p">;</span>
<span class="nb">echo</span> <span class="s2">"KEYMAP=br-abnt2"</span> <span class="o">&gt;</span> /etc/vconsole.conf<span class="p">;</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s|#en_US.UTF-8 UTF-8|en_US.UTF-8 UTF-8|g"</span> /etc/locale.gen<span class="p">;</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s|#pt_BR.UTF-8 UTF-8|pt_BR.UTF-8 UTF-8|g"</span> /etc/locale.gen<span class="p">;</span>
locale-gen<span class="p">;</span>
<span class="nb">echo </span><span class="nv">LANG</span><span class="o">=</span>pt_BR.UTF-8 | <span class="nb">tee</span> /etc/locale.conf<span class="p">;</span>
<span class="nb">rm</span> <span class="nt">-f</span> /etc/localtime <span class="o">&amp;&amp;</span> <span class="nb">ln</span> <span class="nt">-s</span> /usr/share/zoneinfo/America/Sao_Paulo /etc/localtime<span class="p">;</span>
hwclock <span class="nt">--systohc</span><span class="p">;</span>
<span class="nb">echo</span> <span class="s2">"archlinux"</span> | <span class="nb">tee</span> /etc/hostname<span class="p">;</span>
<span class="nb">printf</span> <span class="s2">"127.0.0.1        archlinux</span><span class="se">\n</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> /etc/hosts<span class="p">;</span>
<span class="nb">echo </span><span class="nv">KEYMAP</span><span class="o">=</span>br-abnt2 | <span class="nb">tee</span> /etc/vconsole.conf<span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h1 id="security-boot-opcional">Security Boot (Opcional)</h1>

<p><strong>(1)</strong> - Instalar o pacote <code class="language-plaintext highlighter-rouge">sbctl</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman <span class="nt">-S</span> <span class="nt">--noconfirm</span> sbctl
</code></pre></div></div>

<p><strong>(2)</strong> - Criar as chaves e aplicar as assinaturas:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre>sbctl create-keys
sbctl sign <span class="nt">-s</span> <span class="nt">-o</span> /usr/lib/systemd/boot/efi/systemd-bootx64.efi.signed /usr/lib/systemd/boot/efi/systemd-bootx64.efi
sbctl sign <span class="nt">-s</span> /boot/EFI/BOOT/BOOTX64.EFI
sbctl sign <span class="nt">-s</span> /boot/EFI/Linux/arch-linux-lts.efi
sbctl sign <span class="nt">-s</span> /boot/EFI/Linux/arch-linux-lts-fallback.efi
sbctl verify
</pre></td></tr></tbody></table></code></pre></figure>

<div class="details-start" data-summary="Assinando EFI Windows"></div>

<script>
(function(){
  if (window.__jekyll_details_setup) return;
  window.__jekyll_details_setup = true;

  function initDetails(){
    const starts = document.querySelectorAll('.details-start');
    starts.forEach(start => {
      const summary = start.getAttribute('data-summary') || 'Detalhes';

      let end = start.nextSibling;
      while(end && !(end.nodeType === 1 && end.classList.contains('details-end'))){
        end = end.nextSibling;
      }
      if(!end) return;

      let node = start.nextSibling;
      const content = [];
      while(node && node !== end){
        const next = node.nextSibling;
        if(node.nodeType === Node.ELEMENT_NODE || (node.nodeType === Node.TEXT_NODE && node.textContent.trim())){
          content.push(node.cloneNode(true));
        }
        node = next;
      }

      const details = document.createElement('details');
      const sum = document.createElement('summary');
      sum.textContent = summary;
      details.appendChild(sum);

      const wrapper = document.createElement('div');
      wrapper.className = 'details-content-wrapper';

      content.forEach(el => wrapper.appendChild(el));

      details.appendChild(wrapper);

      start.parentNode.insertBefore(details, start);
      let cur = start;
      while(cur){
        const next = cur.nextSibling;
        cur.remove();
        if(cur === end) break;
        cur = next;
      }
    });
  }

  if(document.readyState === 'loading')
    document.addEventListener('DOMContentLoaded', initDetails);
  else
    initDetails();
})();
</script>

<p>A EFI do Windows existem muitos arquivos que devem ser assinados, por isso, faço da seguinte maneira
retirado da própria <a href="https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot#Assisted_process_with_sbctl">Wiki do Arch Linux</a>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /boot/EFI/Microsoft
sbctl verify | <span class="nb">sed</span> <span class="s1">'s/✗ /sbctl sign -s /e'</span>
</code></pre></div></div>

<blockquote>
  <p>Nota: Para este passo ser realizado, primeiro tem que ter realizado o passo
<strong>Adicionando EFI do Windows (Opcional)</strong>.</p>
</blockquote>

<!-- enddetails -->
<div class="details-end"></div>

<p><strong>(4)</strong> - Reinicio a máquina com o comando abaixo para entrar automaticamente na <strong>BIOS</strong>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl reboot <span class="nt">--firmware-setup</span>
</code></pre></div></div>

<p><strong>(5)</strong> - Quando estou dentro da <strong>BIOS</strong>, vou na aba <strong>Boot</strong> &gt; <strong>Security Boot</strong> deixando
desabilitado, e no modo <strong>Custom</strong>. Em <strong>Key Management</strong>, apago TODAS as chaves e RESTAURO para o
<strong>Setup Mode</strong>, feito isso, salvo e inicio o <strong>Arch Linux</strong> novamente.</p>

<p><strong>(6)</strong> - Após estar dentro do <strong>Arch Linux</strong> novamente, executo o comando abaixo:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sbctl enroll-keys <span class="nt">--microsoft</span>
</code></pre></div></div>

<blockquote>
  <p>Nota: Isso faz com que crie as chaves de assinatura na <strong>EFI</strong>, e a opção <code class="language-plaintext highlighter-rouge">--microsoft</code> é para
habilitar assinatura no <strong>Windows</strong> também (caso eu tenha dual-boot com Windows).</p>
</blockquote>

<p><strong>(7)</strong> - Reinicio a máquina novamente para entrar na <strong>BIOS</strong> igual o passo <strong>(4)</strong>. Agora, dentro
da <strong>BIOS</strong>,  habilito o <strong>Security Boot</strong> e salvo. Quando reinicio o <strong>Arch Linux</strong>, minha máquina
já estará em modo <strong>Security Boot</strong>.</p>

<h1 id="pós-instalação">Pós Instalação</h1>

<p>Após estar dentro do <strong>Arch Linux</strong> com meu usuário, outras configurações que faço são:</p>

<h2 id="instalando-yay">Instalando yay</h2>

<p><strong>(1)</strong> - Instalar um gerenciador de pacotes para o <strong>AUR</strong>, no caso, o <code class="language-plaintext highlighter-rouge">yay</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://aur.archlinux.org/yay.git<span class="p">;</span>
<span class="nb">cd </span>yay <span class="o">&amp;&amp;</span> makepkg <span class="nt">-si</span> PKGBUILD
</code></pre></div></div>

<p><strong>(2)</strong> - Depois do <code class="language-plaintext highlighter-rouge">yay</code> instalado, instalo outros pacotes/programas essenciais do <strong>AUR</strong>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yay <span class="nt">-S</span> <span class="nt">--noconfirm</span> i3-volume spotify visual-studio-code-bin brave-bin google-chrome secure-delete <span class="se">\</span>
smem
</code></pre></div></div>

<h2 id="configurando-meu-shell">Configurando meu shell</h2>

<p>Uso o <strong>ZSH</strong> com <a href="https://ohmyz.sh/">Oh-My-ZSH</a>, plugins e <a href="https://startship.rs">Starship</a>, e faço
assim:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="nb">sudo </span>pacman <span class="nt">-S</span> <span class="nt">--noconfirm</span> starship<span class="p">;</span>
sh <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="si">)</span><span class="s2">"</span><span class="p">;</span>
git clone https://github.com/zsh-users/zsh-autosuggestions <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-autosuggestions<span class="p">;</span>
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-syntax-highlighting<span class="p">;</span>
<span class="nv">new_plugins</span><span class="o">=</span><span class="s2">" zsh-autosuggestions zsh-syntax-highlighting"</span><span class="p">;</span>
<span class="nv">current_plugins</span><span class="o">=</span><span class="si">$(</span><span class="nb">grep</span> <span class="s1">'^plugins='</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.zshrc"</span> | <span class="nb">sed</span> <span class="s1">'s/^plugins=(//; s/)//'</span><span class="si">)</span><span class="p">;</span>
<span class="nv">new_plugins_line</span><span class="o">=</span><span class="s2">"plugins=(</span><span class="k">${</span><span class="nv">current_plugins</span><span class="k">}${</span><span class="nv">new_plugins</span><span class="k">}</span><span class="s2">)"</span><span class="p">;</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s|^plugins=.*|</span><span class="k">${</span><span class="nv">new_plugins_line</span><span class="k">}</span><span class="s2">|"</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.zshrc"</span><span class="p">;</span>
<span class="nb">echo</span> <span class="s2">"eval </span><span class="se">\"\$</span><span class="s2">(starship init zsh)</span><span class="se">\"</span><span class="s2">"</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span><span class="s2">/themes/starship.zsh-theme"</span><span class="p">;</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s/^ZSH_THEME=".*"/ZSH_THEME="starship"/'</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.zshrc"</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<blockquote>
  <p>Nota: Geralmente eu apenas instalo o <a href="https://ohmyz.sh/">Oh-My-ZSH</a>, plugins e <a href="https://startship.rs">Starship</a>,
e as configurações do <code class="language-plaintext highlighter-rouge">~/.zshrc</code> e resgato do meu <strong>dotfiles</strong>, usando o
<a href="https://github.com/snakypy/dotctrl">DotCtrl</a>, um gerenciador de dotfiles criado por mim mesmo 😆.</p>
</blockquote>

<h2 id="login-automático">Login automático</h2>

<p>Como eu uso criptografia dos meus dados, não acho interessante ter que ficar colocando senha para
entrar no <strong>ambiente gráfico</strong> após descriptografar minha máquina em boot, então uso
<strong>login automático</strong> através do <strong>TTY</strong>. Não uso gerenciador de login, como o <strong>GDM</strong>, <strong>LightDM</strong>,
etc.</p>

<p>Sabendo disso, os passos são:</p>

<p><strong>(1)</strong> - Crio um serviço no <strong>systemd</strong> para pular o prompt:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="nb">sudo mkdir</span> <span class="nt">-p</span> /etc/systemd/system/getty@tty1.service.d<span class="p">;</span>
<span class="nb">sudo cat</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh"> &gt; /etc/systemd/system/getty@tty1.service.d/skip-prompt.conf
[Service]
ExecStart=
ExecStart=-/usr/bin/agetty --skip-login --nonewline --noissue --autologin &lt;USER&gt; --noclear %I </span><span class="se">\$</span><span class="sh">TERM
EOF</span>
</pre></td></tr></tbody></table></code></pre></figure>

<blockquote>
  <p>IMPORTANTE: Onde esta <code class="language-plaintext highlighter-rouge">&lt;USER&gt;</code> coloco o nome do meu usuário.</p>
</blockquote>

<p><strong>(2)</strong> - Crio um novo arquivo <code class="language-plaintext highlighter-rouge">~/.xinitrc</code> (fazendo backup do mesmo caso exista) adicionando o <code class="language-plaintext highlighter-rouge">i3</code>
para ser executado:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="o">[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.xinitrc"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">mv</span> <span class="nv">$HOME</span>/.xinitrc <span class="nv">$HOME</span>/.xinitrc.bak<span class="p">;</span>
<span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh"> &gt; </span><span class="nv">$HOME</span><span class="sh">/.xinitrc
exec i3
EOF</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><strong>(3)</strong> - Crio um novo arquivo <code class="language-plaintext highlighter-rouge">~/.zprofile</code> (fazendo backup do mesmo caso exista) e uma condição
apenas para logar automaticamente quando estiver no <strong>tty1</strong>:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="o">[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.zprofile"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">mv</span> <span class="nv">$HOME</span>/.zprofile <span class="nv">$HOME</span>/.zprofile.bak<span class="p">;</span>
<span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh"> &gt; </span><span class="nv">$HOME</span><span class="sh">/.zprofile
if [ -z "</span><span class="se">\$</span><span class="sh">DISPLAY" ] &amp;&amp; [ "</span><span class="se">\$</span><span class="sh">XDG_VTNR" = 1 ]; then
  exec startx &amp;&gt;/dev/null
fi
EOF</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h1 id="conclusão">Conclusão</h1>

<p>Óbvio que faço muito mais otimizações e configurações no meu <strong>Arch Linux</strong>, mas esses são os passos
e configurações BÁSICAS que uso. Espero que esse guia tenha te ajudado, e se ajudou, curta com uma
estrelinha ⭐ aqui. Flw.</p>]]></content><author><name>William C. Canin</name></author><category term="archlinux" /><category term="encryption" /><category term="criptografia" /><category term="luks" /><category term="lvm" /><summary type="html"><![CDATA[Este post, irá lhe informar como ter uma segurança forte para proteção do seu S.O Arch Linux. Iae, quer estar protegido?!]]></summary></entry></feed>