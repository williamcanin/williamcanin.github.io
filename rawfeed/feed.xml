<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://williamcanin.github.io/rawfeed/feed.xml" rel="self" type="application/atom+xml" /><link href="https://williamcanin.github.io/rawfeed/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-10-14T13:35:45-03:00</updated><id>https://williamcanin.github.io/rawfeed/feed.xml</id><title type="html">rawfeed</title><subtitle>A raw Jekyll theme for minimalists</subtitle><entry><title type="html">Content styles and Codeblocks - Demonstration in the post</title><link href="https://williamcanin.github.io/rawfeed/blog/content-styles-and-codeblocks/" rel="alternate" type="text/html" title="Content styles and Codeblocks - Demonstration in the post" /><published>2025-10-04T17:09:18-03:00</published><updated>2025-10-04T17:09:18-03:00</updated><id>https://williamcanin.github.io/rawfeed/blog/content-styles-and-codeblocks</id><content type="html" xml:base="https://williamcanin.github.io/rawfeed/blog/content-styles-and-codeblocks/"><![CDATA[<nav class="toc" id="toc" data-toc-selector=".post-content" data-toc-max-level="3" data-toc-scroll-offset="20">
  <div class="toc-head">
    <h2>TOC</h2>
    <button class="toc-toggle" aria-expanded="true" type="button">Hidden</button>
  </div>
  <div class="toc-list-wrapper">
    <ul class="toc-list" role="list"></ul>
    <p class="toc-empty" style="display:none">No titles found.</p>
  </div>
</nav>

<script>
(function () {
  function slugify(text) {
    if (!text) return '';
    return text.toString().toLowerCase().trim()
      .normalize('NFKD').replace(/[\u0300-\u036f]/g, '')
      .replace(/[^\w\s-]/g, '').replace(/\s+/g, '-').replace(/--+/g, '-');
  }

  function buildTOC(tocEl) {
    const selector = tocEl.dataset.tocSelector || '.post-content' || '.page-content';
    const maxLevel = parseInt(tocEl.dataset.tocMaxLevel || '3', 10);
    const offset = parseInt(tocEl.dataset.tocScrollOffset || '20', 10);
    const root = document.querySelector(selector);

    if (!root) {
      tocEl.querySelector('.toc-empty').textContent = `Content not found (${selector})`;
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const headings = Array.from(root.querySelectorAll(Array(maxLevel).fill(0).map((_, i) => `h${i + 1}`).join(',')))
      .filter(h => !tocEl.contains(h))
      .filter(h => parseInt(h.tagName.substring(1)) <= maxLevel);

    if (headings.length === 0) {
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const tocRoot = tocEl.querySelector('.toc-list');
    tocRoot.innerHTML = '';

    const idCounts = {};
    headings.forEach(h => {
      if (!h.id) {
        let id = slugify(h.textContent);
        if (!id) id = 'section';
        if (idCounts[id]) { idCounts[id] += 1; id = id + '-' + idCounts[id]; }
        else idCounts[id] = 1;
        h.id = id;
      }
    });

    // Build hierarchical tree
    const stack = [{ level: 0, ul: tocRoot }];
    headings.forEach((h, i) => {
      const level = parseInt(h.tagName.substring(1));
      const li = document.createElement('li');
      const a = document.createElement('a');
      a.href = '#' + h.id;
      a.textContent = h.textContent.trim();
      a.addEventListener('click', e => {
        e.preventDefault();
        window.scrollTo({ top: h.getBoundingClientRect().top + window.scrollY - offset, behavior: 'smooth' });
        history.replaceState(null, '', '#' + h.id);

        // // Clicking on the TOC menu closes the TOC
        // const wrapper = tocEl.querySelector('.toc-list-wrapper');
        // const toggle = tocEl.querySelector('.toc-toggle');
        // wrapper.style.display = 'none';
        // toggle.setAttribute('aria-expanded', 'false');
        // toggle.textContent = '{ { include.btn_show } }';
      });
      li.appendChild(a);

      while (stack.length > 1 && level <= stack[stack.length - 1].level) stack.pop();
      const parent = stack[stack.length - 1].ul;
      parent.appendChild(li);

      const next = headings[i + 1];
      if (next) {
        const nextLevel = parseInt(next.tagName.substring(1));
        if (nextLevel > level) {
          const newUl = document.createElement('ul');
          li.appendChild(newUl);
          stack.push({ level, ul: newUl });
        }
      }
    });

    // Active Highlight
    const links = tocRoot.querySelectorAll('a');
    function onScroll() {
      const fromTop = window.scrollY + offset + 1;
      let current = headings[0];
      for (let i = 0; i < headings.length; i++) {
        if (headings[i].offsetTop <= fromTop) current = headings[i];
      }
      links.forEach(l => l.classList.toggle('active', l.getAttribute('href') === '#' + current.id));
    }
    window.addEventListener('scroll', onScroll, { passive: true });
    onScroll();
  }

  document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.toc').forEach(toc => {
      buildTOC(toc);
      const toggle = toc.querySelector('.toc-toggle');
      const wrapper = toc.querySelector('.toc-list-wrapper');

      wrapper.style.display = 'none';
      toggle.setAttribute('aria-expanded', 'false');
      toggle.textContent = 'Show';

      toggle.addEventListener('click', () => {
        const expanded = toggle.getAttribute('aria-expanded') === 'true';
        wrapper.style.display = expanded ? 'none' : 'block';
        toggle.setAttribute('aria-expanded', (!expanded).toString());
        toggle.textContent = expanded ? 'Show' : 'Hidden';
      });

      const tocTop = toc.offsetTop;

      function handleScrollFix() {
        const scrollTop = window.scrollY || document.documentElement.scrollTop;

        // Fixes pinning behavior in Chrome
        if (scrollTop >= tocTop) {
          toc.classList.add('fixed');
          toc.style.position = 'fixed';
          toc.style.top = '0';
          toc.style.zIndex = '9999';
          // toc.style.width = toc.offsetWidth + 'px';
        } else {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.width = '';
        }

        // // Automatically closes the TOC if it is open and scrolled to it.
        // const rect = toc.getBoundingClientRect();
        // if (rect.top <= 0 && toggle.getAttribute('aria-expanded') === 'true') {
        //   wrapper.style.display = 'none';
        //   toggle.setAttribute('aria-expanded', 'false');
        //   toggle.textContent = '{ { include.btn_show } }';
        // }
      }

      window.addEventListener('scroll', handleScrollFix, { passive: true });
      window.addEventListener('resize', handleScrollFix);
      handleScrollFix();
    });
  });
})();
</script>

<h1 id="theology-h1">Theology (h1)</h1>

<p>Lorem ipsum dolor sit amet, <code class="language-plaintext highlighter-rouge">consectetur</code> adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit.</p>

<h2 id="eschatology">Eschatology</h2>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit.</p>

<blockquote>
  <p>Curabitur dignissim accumsan rutrum.</p>
</blockquote>

<h1 id="animals-h1">Animals (h1)</h1>

<p>Proin convallis mi ac felis pharetra aliquam. Curabitur <a href="/" target="\_blank">dignissim accumsan</a> rutrum. In arcu magna, aliquet vel pretium et, molestie et arcu.</p>

<p><em>Mauris lobortis nulla et felis ullamcorper bibendum.</em> Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc. Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.</p>

<h2 id="feline-h2">Feline (h2)</h2>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. <strong>Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt.</strong> Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit.</p>

<h3 id="cat-h3">Cat (h3)</h3>

<p>Proin convallis mi ac felis pharetra aliquam. Curabitur dignissim accumsan rutrum. In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum.</p>

<p>Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc.</p>

<h3 id="tiger-h3">Tiger (h3)</h3>

<p>Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.</p>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt.</p>

<h1 id="lists">Lists</h1>

<h2 id="ordered-list">Ordered list</h2>

<ol>
  <li>First item, yo</li>
  <li>Second item, dawg</li>
  <li>Third item, what what?!</li>
  <li>Fourth item, fo sheezy my neezy</li>
  <li>Fifth item, nested!</li>
</ol>

<h2 id="list-with-subtitles">List with subtitles</h2>

<ul>
  <li>First item, yo</li>
  <li>Second item, dawg</li>
  <li>Third item, what what?!</li>
  <li>Fourth item, fo sheezy my neezy</li>
  <li>Fifth item, nested!
    <ul>
      <li>So la ti do</li>
      <li>Ba-da-bing!</li>
      <li>Ba-da-boom!</li>
    </ul>
  </li>
</ul>

<h2 id="whaaat-a-checklist">Whaaat, a checklist??</h2>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Milk</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Cookies
    <ul class="task-list">
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Classic Choco-chip</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Sourdough Choco-chip</li>
    </ul>
  </li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Chee-ee-eeee-zzze!!!!</li>
</ul>

<h1 id="quotes">Quotes</h1>

<blockquote>
  <p>normal citation</p>
</blockquote>

<blockquote>
  <blockquote>
    <p>double quote</p>
  </blockquote>
</blockquote>

<h1 id="line-separators">Line separators</h1>

<hr />
<hr />
<hr />

<h1 id="escaping-special-characters">Escaping special characters</h1>

<p>*not in italics*</p>

<h1 id="table">Table</h1>

<table>
  <thead>
    <tr>
      <th>Title 1</th>
      <th>Title 2</th>
      <th>Title 3</th>
      <th>Title 4</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>lorem</td>
      <td>lorem ipsum</td>
      <td>lorem ipsum dolor</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
    <tr>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
    <tr>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
    <tr>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
  </tbody>
</table>

<h1 id="images-or-gifs-example">Images or Gifs example</h1>

<figure class="img-include-wrapper img-include-align-left" style="float: left; margin-right: 10px; width: 300px;">
    <img src="https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExMXNqM21hNWtxeWtkMTh0ajIwc3prYmt3dmV0a3ptY2RyMDJrejlrYiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/xT9IgG50Fb7Mi0prBC/giphy.gif" alt="Hello!" style="display:block; width:100%; height: auto; border-radius: 2px; border: 2px solid #000;" /><figcaption class="img-include-caption">Example animated GIF — © Giphy</figcaption></figure>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt.
<em>Mauris lobortis nulla et felis ullamcorper bibendum.</em> Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc. Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.</p>

<figure class="img-include-wrapper img-include-align-right" style="float: right; margin-left: 10px; width: 300px;">
    <img src="https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExMXNqM21hNWtxeWtkMTh0ajIwc3prYmt3dmV0a3ptY2RyMDJrejlrYiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/xT9IgG50Fb7Mi0prBC/giphy.gif" alt="Hello!" style="display:block; width:100%; height: auto; border-radius: 2px; border: 2px solid #000;" /><figcaption class="img-include-caption">Example animated GIF — © Giphy</figcaption></figure>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt.
<em>Mauris lobortis nulla et felis ullamcorper bibendum.</em> Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc. Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.</p>

<figure class="img-include-wrapper img-include-align-center" style="width: 100%;">
    <img src="https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExMXNqM21hNWtxeWtkMTh0ajIwc3prYmt3dmV0a3ptY2RyMDJrejlrYiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/xT9IgG50Fb7Mi0prBC/giphy.gif" alt="Hello!" style="display:block; width:100%; height: auto; border-radius: 2px; border: 2px solid #000;" /><figcaption class="img-include-caption">Example animated GIF — © Giphy</figcaption></figure>

<p>Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.</p>

<h1 id="video-youtube">Video YouTube</h1>

<blockquote>
  <p>Note: You must copy the embed link</p>
</blockquote>

<div class="video-wrapper">
  <iframe src="https://www.youtube.com/embed/IcICF_YF_tI?si=2n30rpxhzdEpZH4Y" title="Video" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
  </iframe>
  <noscript>
    <p>The video is not available for embedding. Watch it on <a href="https://www.youtube.com/embed/IcICF_YF_tI?si=2n30rpxhzdEpZH4Y" target="_blank">YouTube</a>.
    </p>
  </noscript>
</div>

<h1 id="tabs-example">Tabs example</h1>

<div class="tabs-start" aria-hidden="true"></div>

<script>
  (function () {
    if (window.__simple_tabs_installed) return;
    window.__simple_tabs_installed = true;

    function processTabs() {
      var starts = Array.from(document.querySelectorAll('.tabs-start'));
      starts.forEach(function (start) {
        var end = start.nextSibling;
        while (end && !(end.nodeType === 1 && end.classList && end.classList.contains('tabs-end'))) {
          end = end.nextSibling;
        }
        if (!end) return;

        var node = start.nextSibling;
        var tabs = [];
        var currentTab = null;
        while (node && node !== end) {
          var next = node.nextSibling;
          if (node.nodeType === Node.TEXT_NODE && !node.textContent.trim()) {
            node = next; continue;
          }
          var text = (node.textContent || '').trim();
          var m = text.match(/^\s*tab\d*\s*:\s*(.+)$/i);
          if (m) {
            currentTab = { title: m[1].trim(), nodes: [] };
            tabs.push(currentTab);
            if (node.parentNode) node.parentNode.removeChild(node);
          } else if (currentTab) {
            currentTab.nodes.push(node);
          } else {
          }
          node = next;
        }

        if (tabs.length === 0) {
          return;
        }

        var wrap = document.createElement('div');
        wrap.className = 'tabs-wrap';

        var nav = document.createElement('div');
        nav.className = 'tabs-nav';

        var panels = document.createElement('div');
        panels.className = 'tabs-panels';

        tabs.forEach(function (tab, i) {
          var btn = document.createElement('button');
          btn.type = 'button';
          btn.className = 'tab-btn' + (i === 0 ? ' active' : '');
          btn.setAttribute('data-idx', i);
          btn.textContent = tab.title;
          btn.addEventListener('click', function () {
            var idx = +this.getAttribute('data-idx');
            wrap.querySelectorAll('.tab-btn').forEach(function (b) {
              b.classList.toggle('active', +b.getAttribute('data-idx') === idx);
            });
            wrap.querySelectorAll('.tab-panel').forEach(function (p, pi) {
              p.classList.toggle('active', pi === idx);
            });
          });
          nav.appendChild(btn);

          var panel = document.createElement('div');
          panel.className = 'tab-panel' + (i === 0 ? ' active' : '');
          tab.nodes.forEach(function (n) {
            panel.appendChild(n.cloneNode(true));
          });
          panels.appendChild(panel);
        });

        wrap.appendChild(nav);
        wrap.appendChild(panels);

        start.parentNode.insertBefore(wrap, start);

        var cur = start;
        while (cur) {
          var nx = cur.nextSibling;
          if (cur.parentNode) cur.parentNode.removeChild(cur);
          if (cur === end) break;
          cur = nx;
        }
      });
    }

    if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', processTabs);
    else processTabs();
  })();
</script>

<p>tab1: Installation</p>

<p>Tab 1 content — can contain <strong>markdown</strong>, images, code, etc.</p>

<p>tab2: Settings</p>

<p>Tab 2 content — everything is set up normally.</p>

<!-- endtabs -->
<div class="tabs-end" aria-hidden="true"></div>

<h1 id="details-example">Details example</h1>

<div class="details-start" data-summary="How install"></div>

<script>
(function(){
  if (window.__jekyll_details_setup) return;
  window.__jekyll_details_setup = true;

  function initDetails(){
    const starts = document.querySelectorAll('.details-start');
    starts.forEach(start => {
      const summary = start.getAttribute('data-summary') || 'Detalhes';

      let end = start.nextSibling;
      while(end && !(end.nodeType === 1 && end.classList.contains('details-end'))){
        end = end.nextSibling;
      }
      if(!end) return;

      let node = start.nextSibling;
      const content = [];
      while(node && node !== end){
        const next = node.nextSibling;
        if(node.nodeType === Node.ELEMENT_NODE || (node.nodeType === Node.TEXT_NODE && node.textContent.trim())){
          content.push(node.cloneNode(true));
        }
        node = next;
      }

      const details = document.createElement('details');
      const sum = document.createElement('summary');
      sum.textContent = summary;
      details.appendChild(sum);

      const wrapper = document.createElement('div');
      wrapper.className = 'details-content-wrapper';

      content.forEach(el => wrapper.appendChild(el));

      details.appendChild(wrapper);

      start.parentNode.insertBefore(details, start);
      let cur = start;
      while(cur){
        const next = cur.nextSibling;
        cur.remove();
        if(cur === end) break;
        cur = next;
      }
    });
  }

  if(document.readyState === 'loading')
    document.addEventListener('DOMContentLoaded', initDetails);
  else
    initDetails();
})();
</script>

<p>Here’s the <strong>expanded</strong> content — it may have Markdown, code, lists, etc.</p>

<!-- enddetails -->
<div class="details-end"></div>

<h1 id="alerts">Alerts</h1>

<h2 id="success">Success</h2>

<div class="alert alert-success">
  
<p>Congratulations! Your theme is working.</p>

</div>

<h2 id="danger">Danger</h2>

<div class="alert alert-danger">
  
<p>Danger! Do not remove this example</p>

</div>

<h2 id="warning">Warning</h2>

<div class="alert alert-warning">
  
<p>Warning! This is just an example</p>

</div>

<h1 id="charts-example">Charts example</h1>

<canvas class="chart" id="chart-sales"> </canvas>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const ctx = document.getElementById("chart-sales");
    if (!ctx) return;
    new Chart(ctx, {
      type: "bar",
      data: {
        labels: "January,February,March,April,May".split(","),
        datasets: [{
          label: "Sales",
          data: "10,13,20,25,50".split(",").map(Number),
          borderColor: "#00bfffff",
          backgroundColor: "#00bfffff33",
          fill: true,
          tension: 0.3,
          borderWidth: 2,
          pointRadius: 4,
          pointHoverRadius: 6
        }]
      },
      options: {
        responsive: true,
        plugins: { legend: { display: true, labels: { color: '#444444' } } },
        scales: {
          x: { ticks: { color: '#131313' }, grid: { color: '#111111' } },
          y: { ticks: { color: '#131313' }, grid: { color: '#111111' } }
        }
      }
    });
  });
</script>

<h1 id="socials-networks-links">Socials networks links</h1>

<div class="container socials">
  <div class="row"><div class="col-sm d-flex justify-content-center"><strong>.&nbsp;</strong>
      
      
        <a class="socials-link" title="github" href="https://github.com/williamcanin/rawfeed" target="_blank">
          github
        </a><strong>&nbsp;.&nbsp;</strong>
      
        <a class="socials-link" title="rubygems" href="https://rubygems.org/gems/rawfeed" target="_blank">
          rubygems
        </a><strong>&nbsp;.&nbsp;</strong>
      
    </div>

  </div>
</div>

<h1 id="blockcodes">Blockcodes</h1>

<p>An article with various blocks of highlighted code snippets.</p>

<h2 id="html-code-using-crase---">HTML code using crase ` ` `</h2>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span> <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;p&gt;</span>Hello, World!<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h2 id="ruby-code-using-crase---">Ruby code using crase ` ` `</h2>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kp">include</span> <span class="no">Enumerable</span>

<span class="k">module</span> <span class="nn">Foo</span>
  <span class="k">class</span> <span class="nc">Bar</span>
    <span class="no">LIPSUM</span> <span class="o">=</span> <span class="s2">"lorem ipsum dolor sit"</span>

    <span class="nb">attr_reader</span> <span class="ss">:layout</span>

    <span class="k">def</span> <span class="nf">initialize</span>
      <span class="vi">@layout</span> <span class="o">=</span> <span class="no">Layout</span><span class="p">.</span><span class="nf">new</span>
    <span class="k">end</span>

    <span class="c1"># instance method</span>
    <span class="k">def</span> <span class="nf">profile</span>
      <span class="n">measure_time</span> <span class="k">do</span>
        <span class="n">compile</span> <span class="n">layout</span>
        <span class="n">layout</span><span class="p">.</span><span class="nf">render_with</span> <span class="no">Bar</span><span class="o">::</span><span class="no">LIPSUM</span>
      <span class="k">end</span>
    <span class="k">rescue</span> <span class="no">ArgumentError</span>
      <span class="kp">false</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># Execute code</span>
<span class="no">Foo</span><span class="o">::</span><span class="no">Bar</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">profile</span>
</code></pre></div></div>

<h2 id="sass-code-using-crase---">Sass code using crase ` ` `</h2>

<div class="language-sass highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@import</span> <span class="s">"base"</span>

<span class="nc">.card</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">inline-block</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span>

  <span class="k">&amp;</span><span class="nd">:hover</span>
    <span class="nl">color</span><span class="p">:</span> <span class="mh">#ab45ef</span><span class="err">;</span>
</code></pre></div></div>

<h2 id="block-raw">Block raw</h2>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">foo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">foo</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">bar</span><span class="p">:</span><span class="w"> </span><span class="s1">'baz'</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{{</span><span class="w"> </span><span class="nv">foo</span><span class="w"> </span><span class="cp">}}</span>
</code></pre></div></div>

<h2 id="html-using---highlight---with-numbers">HTML using { % highlight % } with numbers</h2>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>Hello World<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;p&gt;</span>Hello, World!<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="rust-using---highlight---with-numbers-and-marking-lines">Rust using { % highlight % } with numbers and marking lines</h2>

<figure class="highlight"><pre><code class="language-rust" data-lang="rust"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre><span class="hll"><span class="c1">// main.rs</span>
</span>
<span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">collections</span><span class="p">::</span><span class="n">HashMap</span><span class="p">;</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>

<span class="hll">  <span class="k">let</span> <span class="n">workflow</span><span class="p">:</span> <span class="n">HashMap</span><span class="o">&lt;&amp;</span><span class="nb">str</span><span class="p">,</span> <span class="n">HashMap</span><span class="o">&lt;&amp;</span><span class="nb">str</span><span class="p">,</span> <span class="nb">Vec</span><span class="o">&lt;&amp;</span><span class="nb">str</span><span class="o">&gt;&gt;&gt;</span> <span class="o">=</span> <span class="nn">HashMap</span><span class="p">::</span><span class="nf">from</span><span class="p">([</span>
</span>    <span class="p">(</span>
      <span class="s">"My Main Tech Stack"</span><span class="p">,</span>
      <span class="nn">HashMap</span><span class="p">::</span><span class="nf">from</span><span class="p">([</span>
        <span class="p">(</span><span class="s">"Languages"</span><span class="p">,</span> <span class="nd">vec!</span><span class="p">[</span><span class="s">"Rust"</span><span class="p">,</span> <span class="s">"Python"</span><span class="p">,</span> <span class="s">"Shell Script"</span><span class="p">]),</span>
        <span class="p">(</span><span class="s">"Frontend"</span><span class="p">,</span> <span class="nd">vec!</span><span class="p">[</span><span class="s">"HTML"</span><span class="p">,</span> <span class="s">"CSS"</span><span class="p">,</span> <span class="s">"SASS"</span><span class="p">,</span> <span class="s">"Bootstrap"</span><span class="p">,</span> <span class="s">"Jekyll"</span><span class="p">]),</span>
        <span class="p">(</span><span class="s">"Database"</span><span class="p">,</span> <span class="nd">vec!</span><span class="p">[</span><span class="s">"PostGreSQL"</span><span class="p">,</span> <span class="s">"MySQL"</span><span class="p">]),</span>
        <span class="p">(</span><span class="s">"Tools"</span><span class="p">,</span> <span class="nd">vec!</span><span class="p">[</span><span class="s">"VSCode"</span><span class="p">,</span> <span class="s">"Vim"</span><span class="p">,</span> <span class="s">"JetBrains IDEs"</span><span class="p">,</span> <span class="s">"Git"</span><span class="p">]),</span>
<span class="hll">        <span class="p">(</span><span class="s">"OS"</span><span class="p">,</span> <span class="nd">vec!</span><span class="p">[</span><span class="s">"Linux"</span><span class="p">,</span> <span class="s">"Windows"</span><span class="p">]),</span>
</span>      <span class="p">]),</span>
    <span class="p">),</span>
  <span class="p">]);</span>

  <span class="k">let</span> <span class="n">yt_link</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span> <span class="o">=</span> <span class="s">"https://www.youtube.com/c/williamcanin"</span><span class="p">;</span>

  <span class="nd">println!</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
  <span class="nd">println!</span><span class="p">(</span><span class="s">"My name is William, and I am a programming and hacking enthusiast."</span><span class="p">);</span>

  <span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="o">&amp;</span><span class="n">workflow</span> <span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"{}:"</span><span class="p">,</span> <span class="n">key</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">inner_key</span><span class="p">,</span> <span class="n">inner_value</span><span class="p">)</span> <span class="k">in</span> <span class="n">value</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"  {}: {:?}"</span><span class="p">,</span> <span class="n">inner_key</span><span class="p">,</span> <span class="n">inner_value</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

<span class="hll">  <span class="nd">println!</span><span class="p">(</span><span class="s">"YouTube::&gt; {}"</span><span class="p">,</span> <span class="n">yt_link</span><span class="p">);</span>
</span>
<span class="p">}</span>

</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name>William C. Canin</name></author><category term="example" /><category term="codeblocks" /><category term="style" /><category term="include" /><category term="chart" /><category term="ruby" /><category term="html" /><category term="rust" /><category term="raw" /><summary type="html"><![CDATA[An example post for: Code Block and Styles]]></summary></entry><entry><title type="html">Codeblocks - Demonstration in the post</title><link href="https://williamcanin.github.io/rawfeed/blog/this-post-demonstrates-post-codeblocks/" rel="alternate" type="text/html" title="Codeblocks - Demonstration in the post" /><published>2025-09-25T10:36:34-03:00</published><updated>2025-09-25T10:36:34-03:00</updated><id>https://williamcanin.github.io/rawfeed/blog/this-post-demonstrates-post-codeblocks</id><content type="html" xml:base="https://williamcanin.github.io/rawfeed/blog/this-post-demonstrates-post-codeblocks/"><![CDATA[<nav class="toc" id="toc" data-toc-selector=".post-content" data-toc-max-level="3" data-toc-scroll-offset="20">
  <div class="toc-head">
    <h2>TOC</h2>
    <button class="toc-toggle" aria-expanded="true" type="button">Hidden</button>
  </div>
  <div class="toc-list-wrapper">
    <ul class="toc-list" role="list"></ul>
    <p class="toc-empty" style="display:none">No titles found.</p>
  </div>
</nav>

<script>
(function () {
  function slugify(text) {
    if (!text) return '';
    return text.toString().toLowerCase().trim()
      .normalize('NFKD').replace(/[\u0300-\u036f]/g, '')
      .replace(/[^\w\s-]/g, '').replace(/\s+/g, '-').replace(/--+/g, '-');
  }

  function buildTOC(tocEl) {
    const selector = tocEl.dataset.tocSelector || '.post-content' || '.page-content';
    const maxLevel = parseInt(tocEl.dataset.tocMaxLevel || '3', 10);
    const offset = parseInt(tocEl.dataset.tocScrollOffset || '20', 10);
    const root = document.querySelector(selector);

    if (!root) {
      tocEl.querySelector('.toc-empty').textContent = `Content not found (${selector})`;
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const headings = Array.from(root.querySelectorAll(Array(maxLevel).fill(0).map((_, i) => `h${i + 1}`).join(',')))
      .filter(h => !tocEl.contains(h))
      .filter(h => parseInt(h.tagName.substring(1)) <= maxLevel);

    if (headings.length === 0) {
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const tocRoot = tocEl.querySelector('.toc-list');
    tocRoot.innerHTML = '';

    const idCounts = {};
    headings.forEach(h => {
      if (!h.id) {
        let id = slugify(h.textContent);
        if (!id) id = 'section';
        if (idCounts[id]) { idCounts[id] += 1; id = id + '-' + idCounts[id]; }
        else idCounts[id] = 1;
        h.id = id;
      }
    });

    // Build hierarchical tree
    const stack = [{ level: 0, ul: tocRoot }];
    headings.forEach((h, i) => {
      const level = parseInt(h.tagName.substring(1));
      const li = document.createElement('li');
      const a = document.createElement('a');
      a.href = '#' + h.id;
      a.textContent = h.textContent.trim();
      a.addEventListener('click', e => {
        e.preventDefault();
        window.scrollTo({ top: h.getBoundingClientRect().top + window.scrollY - offset, behavior: 'smooth' });
        history.replaceState(null, '', '#' + h.id);

        // // Clicking on the TOC menu closes the TOC
        // const wrapper = tocEl.querySelector('.toc-list-wrapper');
        // const toggle = tocEl.querySelector('.toc-toggle');
        // wrapper.style.display = 'none';
        // toggle.setAttribute('aria-expanded', 'false');
        // toggle.textContent = '{ { include.btn_show } }';
      });
      li.appendChild(a);

      while (stack.length > 1 && level <= stack[stack.length - 1].level) stack.pop();
      const parent = stack[stack.length - 1].ul;
      parent.appendChild(li);

      const next = headings[i + 1];
      if (next) {
        const nextLevel = parseInt(next.tagName.substring(1));
        if (nextLevel > level) {
          const newUl = document.createElement('ul');
          li.appendChild(newUl);
          stack.push({ level, ul: newUl });
        }
      }
    });

    // Active Highlight
    const links = tocRoot.querySelectorAll('a');
    function onScroll() {
      const fromTop = window.scrollY + offset + 1;
      let current = headings[0];
      for (let i = 0; i < headings.length; i++) {
        if (headings[i].offsetTop <= fromTop) current = headings[i];
      }
      links.forEach(l => l.classList.toggle('active', l.getAttribute('href') === '#' + current.id));
    }
    window.addEventListener('scroll', onScroll, { passive: true });
    onScroll();
  }

  document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.toc').forEach(toc => {
      buildTOC(toc);
      const toggle = toc.querySelector('.toc-toggle');
      const wrapper = toc.querySelector('.toc-list-wrapper');

      wrapper.style.display = 'none';
      toggle.setAttribute('aria-expanded', 'false');
      toggle.textContent = 'Show';

      toggle.addEventListener('click', () => {
        const expanded = toggle.getAttribute('aria-expanded') === 'true';
        wrapper.style.display = expanded ? 'none' : 'block';
        toggle.setAttribute('aria-expanded', (!expanded).toString());
        toggle.textContent = expanded ? 'Show' : 'Hidden';
      });

      const tocTop = toc.offsetTop;

      function handleScrollFix() {
        const scrollTop = window.scrollY || document.documentElement.scrollTop;

        // Fixes pinning behavior in Chrome
        if (scrollTop >= tocTop) {
          toc.classList.add('fixed');
          toc.style.position = 'fixed';
          toc.style.top = '0';
          toc.style.zIndex = '9999';
          // toc.style.width = toc.offsetWidth + 'px';
        } else {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.width = '';
        }

        // // Automatically closes the TOC if it is open and scrolled to it.
        // const rect = toc.getBoundingClientRect();
        // if (rect.top <= 0 && toggle.getAttribute('aria-expanded') === 'true') {
        //   wrapper.style.display = 'none';
        //   toggle.setAttribute('aria-expanded', 'false');
        //   toggle.textContent = '{ { include.btn_show } }';
        // }
      }

      window.addEventListener('scroll', handleScrollFix, { passive: true });
      window.addEventListener('resize', handleScrollFix);
      handleScrollFix();
    });
  });
})();
</script>

<h1 id="blockcodes">Blockcodes</h1>

<p>An article with various blocks of highlighted code snippets.</p>

<h2 id="html-code-using-crase---">HTML code using crase ` ` `</h2>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span> <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;p&gt;</span>Hello, World!<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h2 id="ruby-code-using-crase---">Ruby code using crase ` ` `</h2>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kp">include</span> <span class="no">Enumerable</span>

<span class="k">module</span> <span class="nn">Foo</span>
  <span class="k">class</span> <span class="nc">Bar</span>
    <span class="no">LIPSUM</span> <span class="o">=</span> <span class="s2">"lorem ipsum dolor sit"</span>

    <span class="nb">attr_reader</span> <span class="ss">:layout</span>

    <span class="k">def</span> <span class="nf">initialize</span>
      <span class="vi">@layout</span> <span class="o">=</span> <span class="no">Layout</span><span class="p">.</span><span class="nf">new</span>
    <span class="k">end</span>

    <span class="c1"># instance method</span>
    <span class="k">def</span> <span class="nf">profile</span>
      <span class="n">measure_time</span> <span class="k">do</span>
        <span class="n">compile</span> <span class="n">layout</span>
        <span class="n">layout</span><span class="p">.</span><span class="nf">render_with</span> <span class="no">Bar</span><span class="o">::</span><span class="no">LIPSUM</span>
      <span class="k">end</span>
    <span class="k">rescue</span> <span class="no">ArgumentError</span>
      <span class="kp">false</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># Execute code</span>
<span class="no">Foo</span><span class="o">::</span><span class="no">Bar</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">profile</span>
</code></pre></div></div>

<h2 id="sass-code-using-crase---">Sass code using crase ` ` `</h2>

<div class="language-sass highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@import</span> <span class="s">"base"</span>

<span class="nc">.card</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">inline-block</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span>

  <span class="k">&amp;</span><span class="nd">:hover</span>
    <span class="nl">color</span><span class="p">:</span> <span class="mh">#ab45ef</span><span class="err">;</span>
</code></pre></div></div>

<h2 id="block-raw">Block raw</h2>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">foo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">foo</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">bar</span><span class="p">:</span><span class="w"> </span><span class="s1">'baz'</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{{</span><span class="w"> </span><span class="nv">foo</span><span class="w"> </span><span class="cp">}}</span>
</code></pre></div></div>

<h2 id="html-using---highlight---with-numbers">HTML using { % highlight % } with numbers</h2>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>Hello World<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;p&gt;</span>Hello, World!<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="rust-using---highlight---with-numbers-and-marking-lines">Rust using { % highlight % } with numbers and marking lines</h2>

<figure class="highlight"><pre><code class="language-rust" data-lang="rust"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre><span class="hll"><span class="c1">// main.rs</span>
</span>
<span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">collections</span><span class="p">::</span><span class="n">HashMap</span><span class="p">;</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>

<span class="hll">  <span class="k">let</span> <span class="n">workflow</span><span class="p">:</span> <span class="n">HashMap</span><span class="o">&lt;&amp;</span><span class="nb">str</span><span class="p">,</span> <span class="n">HashMap</span><span class="o">&lt;&amp;</span><span class="nb">str</span><span class="p">,</span> <span class="nb">Vec</span><span class="o">&lt;&amp;</span><span class="nb">str</span><span class="o">&gt;&gt;&gt;</span> <span class="o">=</span> <span class="nn">HashMap</span><span class="p">::</span><span class="nf">from</span><span class="p">([</span>
</span>    <span class="p">(</span>
      <span class="s">"My Main Tech Stack"</span><span class="p">,</span>
      <span class="nn">HashMap</span><span class="p">::</span><span class="nf">from</span><span class="p">([</span>
        <span class="p">(</span><span class="s">"Languages"</span><span class="p">,</span> <span class="nd">vec!</span><span class="p">[</span><span class="s">"Rust"</span><span class="p">,</span> <span class="s">"Python"</span><span class="p">,</span> <span class="s">"Shell Script"</span><span class="p">]),</span>
        <span class="p">(</span><span class="s">"Frontend"</span><span class="p">,</span> <span class="nd">vec!</span><span class="p">[</span><span class="s">"HTML"</span><span class="p">,</span> <span class="s">"CSS"</span><span class="p">,</span> <span class="s">"SASS"</span><span class="p">,</span> <span class="s">"Bootstrap"</span><span class="p">,</span> <span class="s">"Jekyll"</span><span class="p">]),</span>
        <span class="p">(</span><span class="s">"Database"</span><span class="p">,</span> <span class="nd">vec!</span><span class="p">[</span><span class="s">"PostGreSQL"</span><span class="p">,</span> <span class="s">"MySQL"</span><span class="p">]),</span>
        <span class="p">(</span><span class="s">"Tools"</span><span class="p">,</span> <span class="nd">vec!</span><span class="p">[</span><span class="s">"VSCode"</span><span class="p">,</span> <span class="s">"Vim"</span><span class="p">,</span> <span class="s">"JetBrains IDEs"</span><span class="p">,</span> <span class="s">"Git"</span><span class="p">]),</span>
<span class="hll">        <span class="p">(</span><span class="s">"OS"</span><span class="p">,</span> <span class="nd">vec!</span><span class="p">[</span><span class="s">"Linux"</span><span class="p">,</span> <span class="s">"Windows"</span><span class="p">]),</span>
</span>      <span class="p">]),</span>
    <span class="p">),</span>
  <span class="p">]);</span>

  <span class="k">let</span> <span class="n">yt_link</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span> <span class="o">=</span> <span class="s">"https://www.youtube.com/c/williamcanin"</span><span class="p">;</span>

  <span class="nd">println!</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
  <span class="nd">println!</span><span class="p">(</span><span class="s">"My name is William, and I am a programming and hacking enthusiast."</span><span class="p">);</span>

  <span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="o">&amp;</span><span class="n">workflow</span> <span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"{}:"</span><span class="p">,</span> <span class="n">key</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">inner_key</span><span class="p">,</span> <span class="n">inner_value</span><span class="p">)</span> <span class="k">in</span> <span class="n">value</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"  {}: {:?}"</span><span class="p">,</span> <span class="n">inner_key</span><span class="p">,</span> <span class="n">inner_value</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

<span class="hll">  <span class="nd">println!</span><span class="p">(</span><span class="s">"YouTube::&gt; {}"</span><span class="p">,</span> <span class="n">yt_link</span><span class="p">);</span>
</span>
<span class="p">}</span>

</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name>William Canin</name></author><category term="example" /><category term="codeblocks" /><category term="ruby" /><category term="html" /><category term="rust" /><category term="raw" /><summary type="html"><![CDATA[This post demonstrates post codeblock]]></summary></entry><entry><title type="html">Content styles - Demonstration in the post</title><link href="https://williamcanin.github.io/rawfeed/blog/this-post-demonstrates-post-content-styles/" rel="alternate" type="text/html" title="Content styles - Demonstration in the post" /><published>2025-09-22T17:24:04-03:00</published><updated>2025-09-22T17:24:04-03:00</updated><id>https://williamcanin.github.io/rawfeed/blog/this-post-demonstrates-post-content-styles</id><content type="html" xml:base="https://williamcanin.github.io/rawfeed/blog/this-post-demonstrates-post-content-styles/"><![CDATA[<nav class="toc" id="toc" data-toc-selector=".post-content" data-toc-max-level="3" data-toc-scroll-offset="20">
  <div class="toc-head">
    <h2>TOC</h2>
    <button class="toc-toggle" aria-expanded="true" type="button">Hidden</button>
  </div>
  <div class="toc-list-wrapper">
    <ul class="toc-list" role="list"></ul>
    <p class="toc-empty" style="display:none">No titles found.</p>
  </div>
</nav>

<script>
(function () {
  function slugify(text) {
    if (!text) return '';
    return text.toString().toLowerCase().trim()
      .normalize('NFKD').replace(/[\u0300-\u036f]/g, '')
      .replace(/[^\w\s-]/g, '').replace(/\s+/g, '-').replace(/--+/g, '-');
  }

  function buildTOC(tocEl) {
    const selector = tocEl.dataset.tocSelector || '.post-content' || '.page-content';
    const maxLevel = parseInt(tocEl.dataset.tocMaxLevel || '3', 10);
    const offset = parseInt(tocEl.dataset.tocScrollOffset || '20', 10);
    const root = document.querySelector(selector);

    if (!root) {
      tocEl.querySelector('.toc-empty').textContent = `Content not found (${selector})`;
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const headings = Array.from(root.querySelectorAll(Array(maxLevel).fill(0).map((_, i) => `h${i + 1}`).join(',')))
      .filter(h => !tocEl.contains(h))
      .filter(h => parseInt(h.tagName.substring(1)) <= maxLevel);

    if (headings.length === 0) {
      tocEl.querySelector('.toc-empty').style.display = 'block';
      return;
    }

    const tocRoot = tocEl.querySelector('.toc-list');
    tocRoot.innerHTML = '';

    const idCounts = {};
    headings.forEach(h => {
      if (!h.id) {
        let id = slugify(h.textContent);
        if (!id) id = 'section';
        if (idCounts[id]) { idCounts[id] += 1; id = id + '-' + idCounts[id]; }
        else idCounts[id] = 1;
        h.id = id;
      }
    });

    // Build hierarchical tree
    const stack = [{ level: 0, ul: tocRoot }];
    headings.forEach((h, i) => {
      const level = parseInt(h.tagName.substring(1));
      const li = document.createElement('li');
      const a = document.createElement('a');
      a.href = '#' + h.id;
      a.textContent = h.textContent.trim();
      a.addEventListener('click', e => {
        e.preventDefault();
        window.scrollTo({ top: h.getBoundingClientRect().top + window.scrollY - offset, behavior: 'smooth' });
        history.replaceState(null, '', '#' + h.id);

        // // Clicking on the TOC menu closes the TOC
        // const wrapper = tocEl.querySelector('.toc-list-wrapper');
        // const toggle = tocEl.querySelector('.toc-toggle');
        // wrapper.style.display = 'none';
        // toggle.setAttribute('aria-expanded', 'false');
        // toggle.textContent = '{ { include.btn_show } }';
      });
      li.appendChild(a);

      while (stack.length > 1 && level <= stack[stack.length - 1].level) stack.pop();
      const parent = stack[stack.length - 1].ul;
      parent.appendChild(li);

      const next = headings[i + 1];
      if (next) {
        const nextLevel = parseInt(next.tagName.substring(1));
        if (nextLevel > level) {
          const newUl = document.createElement('ul');
          li.appendChild(newUl);
          stack.push({ level, ul: newUl });
        }
      }
    });

    // Active Highlight
    const links = tocRoot.querySelectorAll('a');
    function onScroll() {
      const fromTop = window.scrollY + offset + 1;
      let current = headings[0];
      for (let i = 0; i < headings.length; i++) {
        if (headings[i].offsetTop <= fromTop) current = headings[i];
      }
      links.forEach(l => l.classList.toggle('active', l.getAttribute('href') === '#' + current.id));
    }
    window.addEventListener('scroll', onScroll, { passive: true });
    onScroll();
  }

  document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.toc').forEach(toc => {
      buildTOC(toc);
      const toggle = toc.querySelector('.toc-toggle');
      const wrapper = toc.querySelector('.toc-list-wrapper');

      wrapper.style.display = 'none';
      toggle.setAttribute('aria-expanded', 'false');
      toggle.textContent = 'Show';

      toggle.addEventListener('click', () => {
        const expanded = toggle.getAttribute('aria-expanded') === 'true';
        wrapper.style.display = expanded ? 'none' : 'block';
        toggle.setAttribute('aria-expanded', (!expanded).toString());
        toggle.textContent = expanded ? 'Show' : 'Hidden';
      });

      const tocTop = toc.offsetTop;

      function handleScrollFix() {
        const scrollTop = window.scrollY || document.documentElement.scrollTop;

        // Fixes pinning behavior in Chrome
        if (scrollTop >= tocTop) {
          toc.classList.add('fixed');
          toc.style.position = 'fixed';
          toc.style.top = '0';
          toc.style.zIndex = '9999';
          // toc.style.width = toc.offsetWidth + 'px';
        } else {
          toc.classList.remove('fixed');
          toc.style.position = '';
          toc.style.top = '';
          toc.style.width = '';
        }

        // // Automatically closes the TOC if it is open and scrolled to it.
        // const rect = toc.getBoundingClientRect();
        // if (rect.top <= 0 && toggle.getAttribute('aria-expanded') === 'true') {
        //   wrapper.style.display = 'none';
        //   toggle.setAttribute('aria-expanded', 'false');
        //   toggle.textContent = '{ { include.btn_show } }';
        // }
      }

      window.addEventListener('scroll', handleScrollFix, { passive: true });
      window.addEventListener('resize', handleScrollFix);
      handleScrollFix();
    });
  });
})();
</script>

<h1 id="theology-h1">Theology (h1)</h1>

<p>Lorem ipsum dolor sit amet, <code class="language-plaintext highlighter-rouge">consectetur</code> adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit.</p>

<h2 id="eschatology">Eschatology</h2>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit.</p>

<blockquote>
  <p>Curabitur dignissim accumsan rutrum.</p>
</blockquote>

<h1 id="animals-h1">Animals (h1)</h1>

<p>Proin convallis mi ac felis pharetra aliquam. Curabitur <a href="/" target="\_blank">dignissim accumsan</a> rutrum. In arcu magna, aliquet vel pretium et, molestie et arcu.</p>

<p><em>Mauris lobortis nulla et felis ullamcorper bibendum.</em> Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc. Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.</p>

<h2 id="feline-h2">Feline (h2)</h2>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. <strong>Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt.</strong> Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit.</p>

<h3 id="cat-h3">Cat (h3)</h3>

<p>Proin convallis mi ac felis pharetra aliquam. Curabitur dignissim accumsan rutrum. In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum.</p>

<p>Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc.</p>

<h3 id="tiger-h3">Tiger (h3)</h3>

<p>Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.</p>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt.</p>

<h1 id="lists">Lists</h1>

<h2 id="ordered-list">Ordered list</h2>

<ol>
  <li>First item, yo</li>
  <li>Second item, dawg</li>
  <li>Third item, what what?!</li>
  <li>Fourth item, fo sheezy my neezy</li>
  <li>Fifth item, nested!</li>
</ol>

<h2 id="list-with-subtitles">List with subtitles</h2>

<ul>
  <li>First item, yo</li>
  <li>Second item, dawg</li>
  <li>Third item, what what?!</li>
  <li>Fourth item, fo sheezy my neezy</li>
  <li>Fifth item, nested!
    <ul>
      <li>So la ti do</li>
      <li>Ba-da-bing!</li>
      <li>Ba-da-boom!</li>
    </ul>
  </li>
</ul>

<h2 id="whaaat-a-checklist">Whaaat, a checklist??</h2>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Milk</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Cookies
    <ul class="task-list">
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Classic Choco-chip</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Sourdough Choco-chip</li>
    </ul>
  </li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Chee-ee-eeee-zzze!!!!</li>
</ul>

<h1 id="table">Table</h1>

<table>
  <thead>
    <tr>
      <th>Title 1</th>
      <th>Title 2</th>
      <th>Title 3</th>
      <th>Title 4</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>lorem</td>
      <td>lorem ipsum</td>
      <td>lorem ipsum dolor</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
    <tr>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
    <tr>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
    <tr>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
      <td>lorem ipsum dolor sit</td>
    </tr>
  </tbody>
</table>

<h1 id="tabs-example">Tabs example</h1>

<div class="tabs-start" aria-hidden="true"></div>

<script>
  (function () {
    if (window.__simple_tabs_installed) return;
    window.__simple_tabs_installed = true;

    function processTabs() {
      var starts = Array.from(document.querySelectorAll('.tabs-start'));
      starts.forEach(function (start) {
        var end = start.nextSibling;
        while (end && !(end.nodeType === 1 && end.classList && end.classList.contains('tabs-end'))) {
          end = end.nextSibling;
        }
        if (!end) return;

        var node = start.nextSibling;
        var tabs = [];
        var currentTab = null;
        while (node && node !== end) {
          var next = node.nextSibling;
          if (node.nodeType === Node.TEXT_NODE && !node.textContent.trim()) {
            node = next; continue;
          }
          var text = (node.textContent || '').trim();
          var m = text.match(/^\s*tab\d*\s*:\s*(.+)$/i);
          if (m) {
            currentTab = { title: m[1].trim(), nodes: [] };
            tabs.push(currentTab);
            if (node.parentNode) node.parentNode.removeChild(node);
          } else if (currentTab) {
            currentTab.nodes.push(node);
          } else {
          }
          node = next;
        }

        if (tabs.length === 0) {
          return;
        }

        var wrap = document.createElement('div');
        wrap.className = 'tabs-wrap';

        var nav = document.createElement('div');
        nav.className = 'tabs-nav';

        var panels = document.createElement('div');
        panels.className = 'tabs-panels';

        tabs.forEach(function (tab, i) {
          var btn = document.createElement('button');
          btn.type = 'button';
          btn.className = 'tab-btn' + (i === 0 ? ' active' : '');
          btn.setAttribute('data-idx', i);
          btn.textContent = tab.title;
          btn.addEventListener('click', function () {
            var idx = +this.getAttribute('data-idx');
            wrap.querySelectorAll('.tab-btn').forEach(function (b) {
              b.classList.toggle('active', +b.getAttribute('data-idx') === idx);
            });
            wrap.querySelectorAll('.tab-panel').forEach(function (p, pi) {
              p.classList.toggle('active', pi === idx);
            });
          });
          nav.appendChild(btn);

          var panel = document.createElement('div');
          panel.className = 'tab-panel' + (i === 0 ? ' active' : '');
          tab.nodes.forEach(function (n) {
            panel.appendChild(n.cloneNode(true));
          });
          panels.appendChild(panel);
        });

        wrap.appendChild(nav);
        wrap.appendChild(panels);

        start.parentNode.insertBefore(wrap, start);

        var cur = start;
        while (cur) {
          var nx = cur.nextSibling;
          if (cur.parentNode) cur.parentNode.removeChild(cur);
          if (cur === end) break;
          cur = nx;
        }
      });
    }

    if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', processTabs);
    else processTabs();
  })();
</script>

<p>tab1: Installation</p>

<p>Tab 1 content — can contain <strong>markdown</strong>, images, code, etc.</p>

<p>tab2: Settings</p>

<p>Tab 2 content — everything is set up normally.</p>

<!-- endtabs -->
<div class="tabs-end" aria-hidden="true"></div>

<h1 id="alerts">Alerts</h1>

<h2 id="success">Success</h2>

<div class="alert alert-success">
  
<p>Congratulations! Your theme is working.</p>

</div>

<h2 id="danger">Danger</h2>

<div class="alert alert-danger">
  
<p>Danger! Do not remove this example</p>

</div>

<h2 id="warning">Warning</h2>

<div class="alert alert-warning">
  
<p>Warning! This is just an example</p>

</div>

<h1 id="charts-example">Charts example</h1>

<canvas class="chart" id="chart-sales"> </canvas>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const ctx = document.getElementById("chart-sales");
    if (!ctx) return;
    new Chart(ctx, {
      type: "bar",
      data: {
        labels: "January,February,March,April,May".split(","),
        datasets: [{
          label: "Sales",
          data: "10,13,20,25,50".split(",").map(Number),
          borderColor: "#3c7052ff",
          backgroundColor: "#3c7052ff33",
          fill: true,
          tension: 0.3,
          borderWidth: 2,
          pointRadius: 4,
          pointHoverRadius: 6
        }]
      },
      options: {
        responsive: true,
        plugins: { legend: { display: true, labels: { color: '#444444' } } },
        scales: {
          x: { ticks: { color: '#131313' }, grid: { color: '#111111' } },
          y: { ticks: { color: '#131313' }, grid: { color: '#111111' } }
        }
      }
    });
  });
</script>

<h1 id="socials-networks-links">Socials networks links</h1>

<div class="container socials">
  <div class="row"><div class="col-sm d-flex justify-content-center"><strong>.&nbsp;</strong>
      
      
        <a class="socials-link" title="github" href="https://github.com/williamcanin/rawfeed" target="_blank">
          github
        </a><strong>&nbsp;.&nbsp;</strong>
      
        <a class="socials-link" title="rubygems" href="https://rubygems.org/gems/rawfeed" target="_blank">
          rubygems
        </a><strong>&nbsp;.&nbsp;</strong>
      
    </div>

  </div>
</div>]]></content><author><name>William Canin</name></author><category term="example" /><category term="style" /><category term="include" /><category term="chart" /><summary type="html"><![CDATA[This post demonstrates post content styles]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="https://williamcanin.github.io/rawfeed/blog/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2025-09-20T16:36:34-03:00</published><updated>2025-09-20T16:36:34-03:00</updated><id>https://williamcanin.github.io/rawfeed/blog/welcome-to-jekyll</id><content type="html" xml:base="https://williamcanin.github.io/rawfeed/blog/welcome-to-jekyll/"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
<span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>William Canin</name></author><category term="welcome" /><category term="jekyll" /><category term="example" /><summary type="html"><![CDATA[Welcome page]]></summary></entry></feed>